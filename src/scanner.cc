#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer GLEFFECTSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc GLEFFECTSalloc

    #define yyrealloc GLEFFECTSrealloc

    #define yyfree GLEFFECTSfree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *GLEFFECTSalloc ( yy_size_t  );
void *GLEFFECTSrealloc ( void *, yy_size_t  );
void GLEFFECTSfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 24
#define YY_END_OF_BUFFER 25
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[991] =
    {   0,
        0,    0,    0,    0,   25,   23,   21,   22,   23,   23,
       17,   17,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,    3,    3,    4,    3,    3,   21,    0,    0,    7,
       18,   17,    0,   20,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,    0,    0,    0,    0,    7,   18,   18,   20,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    0,    0,    6,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    9,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   15,   19,   19,   19,   19,   19,   19,   19,
       19,    0,    0,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   16,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       14,   14,   19,   14,   19,    0,    0,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   11,   12,   13,   19,   19,   19,   14,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    0,    0,   19,   19,   19,
       19,   14,   19,   19,   14,   14,   19,   19,   19,   19,
       19,   14,   19,   19,   10,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       14,   19,   19,   19,   19,   19,   19,   19,   19,   14,
       19,   19,   19,   19,   19,   14,   19,    0,    0,   14,
       14,   14,   19,   19,   19,   14,   19,   19,   19,   19,
       19,   14,   19,   19,   19,   19,   14,   19,   19,   19,
       19,   19,   14,   14,   19,   19,   14,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   14,   14,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   14,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    0,    0,   19,   14,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   14,   14,   19,
       19,   19,   19,   14,   19,   19,   19,   14,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   14,   19,
       14,   19,   19,   19,   19,   19,   19,   19,   14,   14,
       19,   19,   19,   19,   19,   19,   14,   19,   19,   19,
       14,   14,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,    8,   19,   19,   19,   19,   19,
       19,   19,   19,   19,    0,    0,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   14,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       14,   19,   14,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       14,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,    0,    0,   19,   19,   19,   14,   19,   19,
       19,   19,   19,   14,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   14,   19,   19,   19,   14,
       19,   19,   19,   19,   19,   19,   14,   19,   19,   19,
       19,   14,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   14,   19,   14,   14,   14,   14,   19,   19,   19,
       19,   19,   14,   14,   19,   19,   19,   19,    0,    0,
       19,   19,   19,   19,   19,   19,   19,   19,   14,   19,
       14,   19,   19,   14,   19,   14,   19,   14,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   14,   14,   14,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   14,   19,   19,   19,

       14,   19,   19,   14,    0,    0,   19,   19,   19,   19,
       14,   19,   19,   19,   19,   14,   19,   19,   19,   14,
       14,   19,   19,   19,   14,   19,   14,   14,   19,   19,
       19,   14,   19,   19,   14,   14,   19,   19,   19,   19,
       19,   19,   14,   19,   14,   14,   19,   19,   14,   19,
        0,    0,   19,   19,   19,   14,   19,   19,   19,   19,
       19,   19,   14,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   14,   19,   14,   19,   19,   19,
       19,   14,    2,    0,   19,   14,   19,   14,   19,   19,
       19,   19,   19,   14,   14,   19,   19,   19,   14,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,    1,
       19,   14,   19,   19,   19,   19,   14,   14,   19,   14,
       19,   14,   19,   19,   19,   19,   14,   14,   19,   19,
       19,   19,   19,   19,   19,   14,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   14,   14,   14,
       19,   19,   19,   19,   19,   19,   19,   14,   14,   14,
       14,   14,   19,   19,   14,   14,   14,   19,   19,   19,
       14,   14,   14,   14,   14,   19,   14,   19,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    6,    1,    7,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    1,    1,    1,
        1,    1,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
        1,    1,    1,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    4,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    8,    6,    6,    9,    6,    6,    6,    6,
        6,    7,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6
    } ;

static const flex_int16_t yy_base[1000] =
    {   0,
        0,    0,   71,   75,  258, 4544,   79, 4544,   60,   78,
       77,   78,   81,   83,   85,   87,   90,   98,   92,   94,
      150,  153,  128,  157,  159,  215,  206,  100,  164,  209,
        0, 4544, 4544, 4544, 4544,   81,  172,   76,  218,    0,
      138,    0,    0,    0,  126,  179,  224,  161,  229,  219,
      231,  237,  264,  233,  259,  277,  280,  296,  299,  291,
      293,  303,  306,  310,  325,  330,  332,  341,  343,  351,
      334,  353,  368,  377,  371,  379,  398,  390,  406,  413,
      418,  424,  415,  420,  426,  440,  433,  445,  442,  453,
      451,    0,  146,  165,  197,  190,    0,  167, 4544,    0,

      469,  471,  473,  476,  488,  478,  492,  496,  500,  510,
      514,  516,  524,  536,  539,  543,  552,  558,  604,  562,
      564,  566,  577,  581,  593,  587,  584,  607,  640,  591,
      630,  649,  653,  655,  644,  614,  657,  667,  673,  675,
      677,  682,  684,  679,  686,  709,  701,  711,  714,  726,
      720,  734,  736,  738,  742,  224,  225, 4544,  752,  747,
      757,  765,  777,  782,  779,  784,  792,  797,  803,  805,
      809,  811,  816,  831,  829,  824,  835,  843,  837,  852,
      857,  865,  867,  871,  876,  878,  885,  891,  893,  895,
      904,  913,  923,  917,  927,  188,  900,  931,  941,  949,

      953,  944,  956,  958,  971,  976,  984,  978,  986,  990,
      998, 1005, 1003, 1013, 1017, 1019, 1011, 1079, 1030, 1032,
     1040,  231,  272, 1045, 1104, 1022, 1067, 1062, 1055, 1049,
     1112, 1106, 1101, 1109, 1114, 1095, 1132, 1159, 1057, 1140,
     1170, 1168, 1178, 1182, 1184, 1186, 1142, 1201, 1190, 1246,
     1059, 1205, 1209, 1212, 1214, 1220, 1234, 1240, 1248, 1251,
     1253, 1265, 1281, 1272, 1292, 1297, 1299, 1236, 1307, 1317,
     1319, 1325, 1327, 1330, 1216, 1332, 1334, 1321, 1344, 1349,
     1346, 1387, 1353, 1358, 1366,  307,  333, 1371, 1385, 1396,
     1398, 1405, 1411, 1413, 1416, 1418, 1421, 1425, 1423, 1360,

     1434, 1437, 1439, 1444, 1450, 1452, 1461, 1470, 1479, 1488,
     1477, 1484, 1497, 1502, 1506, 1512, 1515, 1517, 1519, 1521,
     1524, 1528, 1533, 1535, 1540, 1542, 1544, 1554, 1556, 1561,
     1583, 1552, 1585, 1568, 1601, 1611, 1603, 1613, 1618, 1620,
     1629, 1625, 1627, 1639, 1635, 1642, 1644, 1646, 1658, 1666,
     1668, 1686, 1691, 1688, 1693, 1706, 1708, 1710, 1715, 1712,
     1719, 1726, 1717, 1734, 1744,  335,  334, 1748, 1753, 1762,
     1742, 1769, 1775, 1784, 1786, 1789, 1791, 1797, 1800, 1802,
     1804, 1812, 1824, 1816, 1826, 1830, 1839, 1832, 1834, 1843,
     1856, 1860, 1862, 1866, 1870, 1875, 1882, 1888, 1890, 1901,

     1897, 1908, 1912, 1915, 1922, 1935, 1943, 1947, 1949, 1959,
     1962, 1952, 1965, 1970, 1984, 1988, 1993, 1995, 1999, 1997,
     2019, 2017, 2021, 2025, 2028, 2031, 2033, 2045, 2053, 2047,
     2049, 2057, 2061, 2059, 2075, 2078, 2138, 2080, 2086, 2125,
     2094, 2083, 2097, 2105, 2111, 2114, 2119,  354,  465, 2121,
     2127, 2132, 2149, 2141, 2146, 2159, 2164, 2174, 2177, 2179,
     2185, 2191, 2204, 2208, 2215, 2217, 2219, 2226, 2229, 2231,
     2238, 2234, 2240, 2242, 2253, 2260, 2255, 2262, 2264, 2266,
     2268, 2280, 2288, 2290, 2294, 2302, 2296, 2298, 2306, 2321,
     2317, 2324, 2329, 2333, 2340, 2344, 2403, 2348, 2351, 2353,

     2356, 2371, 2367, 2364, 2359, 2378, 2391, 2389, 2396, 2398,
     2423, 2426, 2436, 2438, 2448, 2428, 2450, 2455, 2463, 2469,
     2474, 2477, 2485, 2498, 2490, 2501, 2504, 2511, 2518, 2528,
     2524, 2526, 2530, 2535,  467,  480, 2538, 2459, 2546, 2559,
     2551, 2561, 2565, 2569, 2585, 2587, 2592, 2532, 2573, 2594,
     2596, 2598, 2612, 2614, 2616, 2619, 2621, 2623, 2633, 2639,
     2641, 2645, 2655, 2657, 2661, 2647, 2666, 2668, 2672, 2685,
     2682, 2688, 2694, 2696, 2703, 2709, 2716, 2718, 2722, 2724,
     2727, 2731, 2733, 2743, 2749, 2752, 2738, 2770, 2774, 2778,
     2780, 2783, 2788, 2790, 2794, 2798, 2808, 2812, 2810, 2814,

     2818, 2822, 2825, 2837, 2841, 2852, 2856, 2861, 2858, 2864,
     2868, 2879, 2882, 2886,  482,  129, 2891, 2888, 2893, 2895,
     2902, 2906, 2928, 2922, 2915, 2933, 2938, 2942, 2944, 2953,
     2956, 2958, 2960, 2962, 2964, 2967, 2969, 2973, 2986, 2979,
     2983, 2994, 3005, 3007, 3009, 3020, 3013, 3032, 3029, 3035,
     3039, 3047, 3041, 3043, 3051, 3053, 3059, 3055, 3071, 3074,
     3078, 3086, 3092, 3081, 3099, 3108, 3111, 3119, 3123, 3125,
     3127, 3136, 3130, 3138, 3144, 3141, 3147, 3158, 3152, 3163,
     3170, 3165,   50,  508, 3179, 3184, 3191, 3186, 3198, 3206,
     3208, 3219, 3213, 3227, 3233, 3235, 3237, 3241, 3243, 3239,

     3245, 3251, 3263, 3249, 3267, 3269, 3272, 3274, 3278, 3294,
     3298, 3296, 3304, 3306, 3311, 3308, 3320, 3324, 3329, 3331,
     3333, 3343, 3347, 3376, 3338, 3355, 3366, 3370, 3393, 3401,
     3397, 3374, 3379, 3382, 3404, 3406, 3408, 3412, 3419, 3421,
     3424, 3426, 3431, 3433, 3439, 3444, 3435, 3446,  510,  524,
     3448, 3452, 3454, 3459, 3480, 3471, 3482, 3486, 3467, 3491,
     3498, 3508, 3504, 3510, 3513, 3515, 3517, 3519, 3527, 3529,
     3532, 3535, 3538, 3554, 3541, 3546, 3550, 3556, 3560, 3562,
     3588, 3564, 3577, 3592, 3597, 3602, 3604, 3606, 3612, 3615,
     3620, 3622, 3624, 3626, 3630, 3633, 3635, 3642, 3651, 3661,

     3653, 3663, 3669, 3672,  519,  576, 3686, 3689, 3691, 3693,
     3696, 3709, 3702, 3711, 3717, 3719, 3721, 3728, 3741, 3736,
     3744, 3746, 3753, 3756, 3758, 3763, 3768, 3770, 3773, 3778,
     3780, 3782, 3789, 3796, 3785, 3791, 3800, 3802, 3806, 3816,
     3818, 3824, 3821, 3826, 3829, 3833, 3843, 3846, 3851, 3853,
      608,  621, 3856, 3859, 3863, 3867, 3881, 3884, 3888, 3891,
     3893, 3895, 3901, 3909, 3915, 3918, 3920, 3926, 3923, 3929,
     3936, 3942, 3950, 3954, 3956, 3961, 3969, 3971, 3975, 3977,
     3987, 3982, 4544,  678, 3997, 3989, 3995, 3999, 4001, 4004,
     4015, 4019, 4021, 4009, 4023, 4027, 4029, 4037, 4031, 4042,

     4048, 4051, 4054, 4057, 4069, 4060, 4064, 4081, 4088, 4544,
     4090, 4092, 4096, 4098, 4108, 4121, 4103, 4112, 4115, 4127,
     4130, 4135, 4137, 4140, 4147, 4151, 4157, 4159, 4164, 4172,
     4174, 4162, 4183, 4179, 4185, 4187, 4190, 4197, 4192, 4201,
     4217, 4212, 4214, 4221, 4228, 4235, 4250, 4239, 4255, 4259,
     4261, 4267, 4265, 4283, 4276, 4278, 4287, 4346, 4289, 4294,
     4299, 4296, 4302, 4310, 4321, 4340, 4323, 4316, 4343, 4348,
     4357, 4368, 4370, 4372, 4431, 4374, 4376, 4378, 4383, 4389,
     4380, 4392, 4398, 4400, 4404, 4410, 4407, 4425, 4413, 4544,
     4486, 4492, 4498, 4503, 4512, 4521, 4526, 4528, 4534

    } ;

static const flex_int16_t yy_def[1000] =
    {   0,
      990,    1,  991,  991,  990,  990,  990,  990,  990,  990,
      992,  992,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      994,  990,  990,  990,  990,  990,  990,  990,  995,  996,
      997,   12,  998,  999,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  994,  990,  990,  995,  995,  996,  997,  990,  999,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  990,  990,  990,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  990,  990,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  990,  990,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  990,  990,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  990,  990,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  990,  990,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  990,  990,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  990,  990,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  990,  990,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  990,  990,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      990,  990,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  990,  990,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  990,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,    0,
      990,  990,  990,  990,  990,  990,  990,  990,  990

    } ;

static const flex_int16_t yy_nxt[4617] =
    {   0,
        6,    7,    8,    7,    9,    6,    6,    6,   10,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   19,   19,
       21,   22,   23,   19,   24,   19,   25,   26,   27,   19,
       28,   29,   19,   19,   30,   31,   13,   14,   15,   16,
       17,   18,   19,   19,   20,   19,   19,   21,   22,   23,
       19,   24,   19,   25,   26,   27,   19,   28,   29,   19,
       19,   30,   33,   34,   35,   36,   33,   34,   35,   36,
       37,   38,   37,   39,   41,   41,   40,   44,   44,   44,
       44,   44,   44,   44,   44,  749,   44,   44,   44,   44,

       44,   44,   93,   46,   44,   44,   44,   44,   38,   94,
       55,   47,   48,   49,   56,   52,   50,   58,   53,   43,
      990,   57,   51,   85,   54,   59,   62,   86,   60,   93,
       46,   61,   44,   44,   44,   44,   94,   55,   47,   48,
       49,   56,   52,   50,   58,   53,   43,  990,   57,   51,
       85,   54,   59,   62,   86,   60,   44,   44,   61,   44,
       44,   69,   99,   44,   44,   44,   44,   44,   44,   63,
       44,   44,   66,   37,  684,   37,   70,   64,   74,  156,
       67,  103,   75,   65,   71,   44,   44,  157,   69,   99,
       72,   99,   68,   73,   44,   44,   63,   87,  158,   66,

       88,  101,   96,   70,   64,   74,  156,   67,  103,   75,
       65,   71,   44,   44,  157,   44,   44,   72,   99,   68,
       73,   44,   44,   96,   87,   44,   44,   88,  101,   82,
       44,   44,   89,   90,   76,   44,   44,   44,   44,   44,
       44,   77,   83,   44,   44,   78,  222,   84,  223,   79,
       91,   80,  104,   81,  286,  105,   82,  990,  102,   89,
       90,   76,  106,  110,  107,   44,   44,  990,   77,   83,
       44,   44,   78,  222,   84,  223,   79,   91,   80,  104,
       81,  286,  105,   44,   44,  102,   44,   44,  990,  106,
      110,  107,  287,  111,  108,  109,  112,   44,   44,   44,

       44,  113,   44,   44,  990,   44,   44,  115,  990,   44,
       44,  990,   44,   44,  990,  114,   44,   44,  119,  287,
      111,  108,  109,  112,  118,  120,  116,  366,  113,  117,
      990,   44,   44,  990,  115,  122,   44,   44,   44,   44,
       44,   44,  114,  121,  990,  119,  123,   44,   44,   44,
       44,  118,  120,  116,  366,  124,  117,   44,   44,   44,
       44,  990,  122,  367,  127,  448,  128,  449,  125,  990,
      121,  129,  126,  123,   44,   44,  133,   44,   44,  130,
      134,  990,  124,   44,   44,   44,   44,  535,  131,  132,
      367,  127,  448,  128,  449,  125,   44,   44,  129,  126,

      990,  135,  990,  133,   44,   44,  130,  134,  137,  136,
      138,  990,   44,   44,  535,  131,  132,  139,  990,   44,
       44,   44,   44,  140,   44,   44,   44,   44,  135,  141,
       44,   44,   44,   44,  142,  137,  136,  138,  143,   44,
       44,  144,  990,  148,  139,  145,   44,   44,   44,   44,
      140,   44,   44,  990,  147,  990,  141,   44,   44,   44,
       44,  142,  149,  150,  152,  143,  146,  990,  144,  151,
      148,  990,  145,  990,  153,   44,   44,   44,   44,   44,
       44,  147,   44,   44,   44,   44,  536,  155,  615,  149,
      150,  152,  154,  146,   44,   44,  151,  160,   44,   44,

      161,  153,   44,   44,  990,  159,   44,   44,  162,  616,
      163,  683,  164,  536,  155,  615,   44,   44,  990,  154,
       44,   44,   44,   44,  160,  990,  165,  161,  750,  166,
       44,   44,  159,  805,  167,  162,  616,  163,  683,  164,
      168,  990,   44,   44,  990,   44,   44,  806,  171,   44,
       44,  851,  169,  165,  170,  750,  166,  990,   44,   44,
      805,  167,  172,  990,   44,   44,  990,  168,   44,   44,
       44,   44,   44,   44,  806,  171,  173,  176,  851,  169,
      174,  170,  175,   44,   44,  183,  990,   44,   44,  172,
       44,   44,  185,   44,   44,  990,  186,   44,   44,   44,

       44,  852,  184,  173,  176,  187,  189,  174,  191,  175,
       44,   44,  183,   44,   44,  990,  188,  990,  190,  185,
       44,   44,  195,  186,  990,  177,  178,  179,  852,  184,
      883,  192,  187,  189,  990,  191,   44,   44,  193,  201,
      990,  180,  181,  188,  182,  190,   44,   44,  884,  195,
       44,   44,  177,  178,  179,   44,   44,  883,  192,   44,
       44,   44,   44,   44,   44,  193,  201,  196,  180,  181,
      197,  182,  200,   44,   44,  884,  198,  990,  194,   44,
       44,   44,   44,   44,   44,   44,   44,  199,   44,   44,
       44,   44,   44,   44,  196,  204,  202,  197,  206,  200,

      990,  203,  207,  198,  208,  194,  990,   44,   44,  205,
      910,  209,  210,  990,  199,   44,   44,   44,   44,  990,
       44,   44,  204,  202,  213,  206,   44,   44,  203,  207,
      211,  208,   44,   44,  214,  990,  205,  910,  209,  210,
       44,   44,   44,   44,   44,   44,  990,  212,   44,   44,
      217,  213,  215,   44,   44,  219,  990,  211,   44,   44,
      990,  214,  990,   44,   44,  990,  225,  216,  218,  221,
      220,   44,   44,  990,  212,  224,  990,  217,  990,  215,
      226,  990,  219,   44,   44,   44,   44,  227,   44,   44,
       44,   44,  990,  225,  216,  218,  221,  220,   44,   44,

      228,  990,  224,   44,   44,  229,  990,  226,  990,   44,
       44,   44,   44,  230,  227,   44,   44,   44,   44,  232,
      231,  990,   44,   44,  990,  235,  990,  228,  233,  234,
       44,   44,  229,  990,  237,   44,   44,   44,   44,  990,
      230,   44,   44,   44,   44,  990,  232,  231,  236,   44,
       44,  990,  235,  238,  239,  233,  234,  990,   44,   44,
      240,  237,  241,   44,   44,  990,  243,  990,  242,  244,
      990,   44,   44,   44,   44,  236,  246,   44,   44,  990,
      238,  239,   44,   44,   44,   44,  990,  240,  247,  241,
      245,   44,   44,  243,  990,  242,  244,   44,   44,   44,

       44,   44,   44,  246,  990,  249,   44,   44,  251,  248,
       44,   44,  252,  990,  250,  247,  990,  245,  990,   44,
       44,  990,  255,   44,   44,  254,  261,  253,  990,   44,
       44,  256,  249,   44,   44,  251,  248,   44,   44,  252,
      257,  250,  258,  990,  259,  990,  260,   44,   44,  255,
       44,   44,  254,  261,  253,   44,   44,  990,  256,   44,
       44,  262,   44,   44,   44,   44,  990,  257,  990,  258,
      990,  259,  264,  260,  266,  990,  265,   44,   44,  263,
      990,  268,   44,   44,   44,   44,  267,  990,  262,  990,
       44,   44,   44,   44,  269,  990,   44,   44,  990,  264,

      990,  266,  990,  265,   44,   44,  263,  273,  268,   44,
       44,   44,   44,  267,  271,  270,  272,   44,   44,   44,
       44,  269,  274,   44,   44,   44,   44,  990,   44,   44,
      990,  275,  990,  280,  273,  990,   44,   44,   44,   44,
      278,  271,  270,  272,  276,  277,   44,   44,  990,  274,
      283,   44,   44,  284,  295,   44,   44,  279,  275,  990,
      280,   44,   44,   44,   44,   44,   44,  278,   44,   44,
      990,  276,  277,   44,   44,  990,  299,  283,  285,  300,
      284,  295,  288,  990,  279,   44,   44,  298,  281,  282,
      281,  281,  281,  281,  281,  281,  281,  281,  297,  334,

      296,   44,   44,  299,  990,  285,  300,   44,   44,  288,
       44,   44,   44,   44,  298,   44,   44,  990,   44,   44,
       44,   44,  990,  289,  290,  297,  334,  296,  291,  307,
      990,  301,  309,  990,  306,  990,  305,  292,   44,   44,
      293,  990,  294,  990,  308,  302,   44,   44,   44,   44,
      289,  290,  303,  304,  990,  291,  307,  990,  301,  309,
      990,  306,  990,  305,  292,   44,   44,  293,  310,  294,
      990,  308,  302,  312,   44,   44,   44,   44,  322,  303,
      304,  313,  314,  315,   44,   44,  311,  990,   44,   44,
       44,   44,   44,   44,  990,  310,   44,   44,  316,  990,

      312,  318,  990,  320,  319,  322,  321,   44,   44,  990,
      317,   44,   44,  311,  990,   44,   44,  324,   44,   44,
       44,   44,   44,   44,  323,  316,   44,   44,  318,  990,
      320,  319,  990,  321,  990,  335,  336,  317,  990,  337,
       44,   44,   44,   44,  324,  990,   44,   44,  338,  358,
      339,  323,   44,   44,   44,   44,  990,   44,   44,   44,
       44,  990,  335,  336,  340,  325,  337,  351,  326,  327,
      328,   44,   44,  329,  341,  338,  358,  339,   44,   44,
      330,  343,  331,  332,  333,  342,  990,   44,   44,  990,
      344,  340,  325,  347,  351,  326,  327,  328,   44,   44,

      329,  341,  345,   44,   44,   44,   44,  330,  343,  331,
      332,  333,  342,   44,   44,  990,  348,  344,  346,  990,
      347,  990,  350,   44,   44,   44,   44,   44,   44,  345,
      990,   44,   44,   44,   44,  349,   44,   44,   44,   44,
       44,   44,  354,  348,  352,  346,  990,  353,  355,  350,
       44,   44,   44,   44,  356,   44,   44,  357,  360,   44,
       44,  990,  349,  361,   44,   44,   44,   44,  359,  354,
      990,  352,   44,   44,  353,  355,  990,   44,   44,  380,
      362,  356,  990,  364,  357,  360,  990,  363,  990,  365,
      361,   44,   44,   44,   44,  359,  281,  281,  281,  281,

      281,  281,   44,   44,   44,   44,  380,  362,  368,  990,
      364,   44,   44,  990,  363,  990,  365,   44,   44,   44,
       44,  369,   44,   44,   44,   44,  370,   44,   44,   44,
       44,   44,   44,  990,  373,  368,  374,  371,  990,  372,
       44,   44,  377,   44,   44,   44,   44,  990,  369,  990,
       44,   44,  376,  370,  375,  379,   44,   44,   44,   44,
      990,  373,  383,  374,  371,  378,  372,   44,   44,  377,
      381,  382,  990,  385,  386,  990,   44,   44,  990,  376,
      384,  375,  379,   44,   44,   44,   44,  990,  387,  383,
       44,   44,  378,  388,   44,   44,  990,  381,  382,  990,

      385,  386,  389,   44,   44,  990,  392,  384,   44,   44,
      990,  390,   44,   44,  990,  387,  990,  391,   44,   44,
      388,   44,   44,   44,   44,   44,   44,   44,   44,  389,
       44,   44,  990,  392,   44,   44,  990,  395,  390,   44,
       44,   44,   44,  990,  391,  393,   44,   44,   44,   44,
       44,   44,  394,  990,  397,  399,  990,  396,   44,   44,
       44,   44,   44,   44,  395,  990,  398,   44,   44,  403,
      990,  401,  393,  405,   44,   44,  404,  400,  402,  394,
      990,  397,  399,  990,  396,  990,  410,  407,  406,   44,
       44,   44,   44,  398,  408,  413,  403,  990,  401,  990,

      405,  990,  409,  404,  400,  402,  990,   44,   44,   44,
       44,  411,  990,  410,  407,  406,  990,   44,   44,   44,
       44,  408,  413,  990,   44,   44,   44,   44,  412,  409,
      415,   44,   44,   44,   44,   44,   44,  990,  411,  414,
      416,   44,   44,  417,  421,   44,   44,  990,   44,   44,
       44,   44,   44,   44,  422,  412,  418,  415,  419,  420,
      990,  424,  423,  425,   44,   44,  414,  416,  990,  426,
      417,  421,   44,   44,   44,   44,  427,  430,  990,  429,
      990,  422,  428,  418,  990,  419,  420,  990,  424,  423,
      425,  990,   44,   44,   44,   44,  426,   44,   44,   44,

       44,  432,  431,  427,  430,  990,  429,  433,  990,  428,
      434,  990,   44,   44,   44,   44,   44,   44,   44,   44,
      435,   44,   44,   44,   44,   44,   44,  990,  432,  431,
      990,  441,   44,   44,  433,  436,  437,  434,  440,  442,
       44,   44,  990,  438,  990,  444,  439,  435,   44,   44,
       44,   44,  990,  445,   44,   44,  443,  446,  441,   44,
       44,  990,  436,  437,  990,  440,  442,  447,   44,   44,
      438,  990,  444,  439,  455,   44,   44,  990,  453,  990,
      445,   44,   44,  443,  446,  454,  990,  450,  451,  452,
       44,   44,   44,   44,  447,   44,   44,   44,   44,  456,

      990,  455,  990,   44,   44,  453,   44,   44,   44,   44,
       44,   44,  454,  990,  450,  451,  452,  458,   44,   44,
      990,  457,   44,   44,  459,  462,  456,  460,  461,  464,
       44,   44,   44,   44,  463,  990,   44,   44,   44,   44,
       44,   44,  990,  466,  458,   44,   44,  990,  457,   44,
       44,  459,  462,  467,  460,  461,  464,  990,  468,  990,
      465,  463,   44,   44,  469,  470,   44,   44,   44,   44,
      466,  990,   44,   44,  990,  471,   44,   44,  990,  472,
      467,   44,   44,  473,  990,  468,  990,  465,   44,   44,
      990,  469,  470,  475,   44,   44,   44,   44,  474,  990,

      476,  990,  471,   44,   44,  478,  472,   44,   44,  990,
      473,  479,  990,  477,   44,   44,  990,  482,   44,   44,
      475,   44,   44,  990,  481,  474,  990,  476,   44,   44,
      480,  990,  478,  990,  486,  990,  484,  990,  479,  990,
      477,   44,   44,  990,  482,  990,  483,  990,  485,   44,
       44,  481,  487,   44,   44,   44,   44,  480,   44,   44,
      488,  486,  990,  484,  990,   44,   44,  990,   44,   44,
      489,   44,   44,  483,  990,  485,   44,   44,  990,  487,
      990,  491,  492,  990,  490,  493,  494,  488,  495,  990,
       44,   44,  990,  496,   44,   44,  990,  489,  990,   44,

       44,   44,   44,   44,   44,   44,   44,  990,  491,  492,
      990,  490,  493,  494,  497,  495,  499,  990,  500,  990,
      496,  498,  501,   44,   44,   44,   44,   44,   44,  990,
      502,   44,   44,  990,   44,   44,  990,   44,   44,   44,
       44,  497,  990,  499,  506,  500,  505,  507,  498,  501,
      503,   44,   44,   44,   44,   44,   44,  502,  990,   44,
       44,  504,  990,   44,   44,   44,   44,   44,   44,  509,
      990,  506,  510,  505,  507,  508,  990,  503,  511,  513,
      514,   44,   44,  512,   44,   44,   44,   44,  504,   44,
       44,  990,   44,   44,  990,  515,  509,  516,  990,  510,

       44,   44,  508,   44,   44,  511,  513,  514,  526,  990,
      512,   44,   44,  530,  990,  529,  517,   44,   44,  525,
       44,   44,  515,  531,  516,   44,   44,   44,   44,  990,
      533,   44,   44,   44,   44,  526,  990,  532,   44,   44,
      530,  990,  529,  517,   44,   44,  525,   44,   44,  527,
      531,  534,   44,   44,  990,   44,   44,  533,  372,  372,
      372,  518,  519,  528,  532,   44,   44,  538,  990,  520,
       44,   44,  521,  537,  522,  990,  527,  990,  534,  523,
       44,   44,  524,   44,   44,   44,   44,  990,  518,  519,
      528,   44,   44,  540,  538,  990,  520,   44,   44,  521,

      537,  522,  539,  990,  544,  990,  523,  541,  990,  524,
       44,   44,  542,  990,   44,   44,  543,  372,  372,  372,
      540,   44,   44,   44,   44,   44,   44,  545,  990,  539,
      990,  544,   44,   44,  541,   44,   44,   44,   44,  542,
       44,   44,  990,  543,   44,   44,   44,   44,   44,   44,
      550,  549,  990,  546,  545,  547,  990,  551,  990,   44,
       44,   44,   44,  548,  990,  552,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,  990,  550,  549,  990,
      546,  990,  547,  554,  551,  990,   44,   44,  990,  557,
      548,  553,  552,  555,   44,   44,   44,   44,  558,  990,

       44,   44,   44,   44,   44,   44,  556,  559,   44,   44,
      554,  560,   44,   44,  561,  990,  557,  562,  553,  990,
      555,  990,  563,   44,   44,  558,  564,   44,   44,  990,
       44,   44,  990,  556,  559,   44,   44,  990,  560,   44,
       44,  561,  566,  990,  562,  567,   44,   44,  565,  563,
       44,   44,  990,  564,   44,   44,  569,   44,   44,   44,
       44,  990,   44,   44,  990,   44,   44,  568,  990,  566,
       44,   44,  567,   44,   44,  565,  990,   44,   44,  990,
      571,  570,  990,  569,   44,   44,  577,  583,  990,  579,
      584,  578,  580,  581,  568,   44,   44,   44,   44,  990,

      585,  582,   44,   44,   44,   44,  990,  571,  570,   44,
       44,  990,  587,  577,  583,  990,  579,  584,  578,  580,
      581,  586,  572,  588,  990,  573,  574,  585,  582,   44,
       44,  589,   44,   44,   44,   44,  990,  575,  990,  587,
      576,  990,   44,   44,   44,   44,  590,  990,  586,  572,
      588,  591,  573,  574,   44,   44,   44,   44,  589,  592,
      990,   44,   44,  990,  575,   44,   44,  576,  593,   44,
       44,  594,  990,  590,  990,   44,   44,  990,  591,  595,
       44,   44,  598,   44,   44,  990,  592,  597,  600,  596,
      990,   44,   44,  601,  990,  593,   44,   44,  594,  990,

      602,  990,  599,  990,   44,   44,  595,   44,   44,  598,
       44,   44,  990,  605,  597,  600,  596,   44,   44,  990,
      601,  603,  604,  607,   44,   44,  990,  602,  606,  599,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
      605,   44,   44,  611,   44,   44,  990,  608,  603,  604,
      607,  610,   44,   44,  614,  606,  609,   44,   44,  990,
      617,  990,  613,  612,  990,   44,   44,   44,   44,  618,
      611,   44,   44,  990,  608,   44,   44,  990,  610,   44,
       44,  614,  990,  609,  620,  621,  622,  617,  990,  613,
      612,   44,   44,   44,   44,  990,  618,  619,   44,   44,

       44,   44,   44,   44,   44,   44,  990,  623,  624,  990,
      625,  620,  621,  622,  990,  626,  628,  629,   44,   44,
       44,   44,   44,   44,  619,   44,   44,   44,   44,   44,
       44,  990,  627,  990,  623,  624,  990,  625,  990,   44,
       44,  990,  626,  628,  629,   44,   44,   44,   44,  631,
      632,   44,   44,   44,   44,  630,  634,  633,  990,  627,
      990,   44,   44,   44,   44,  990,  637,   44,   44,  990,
      641,  635,   44,   44,   44,   44,  631,  632,   44,   44,
      636,  990,  630,  634,  633,  638,  990,  643,   44,   44,
      639,   44,   44,  637,   44,   44,  990,  641,  635,  640,

       44,   44,   44,   44,  990,  642,  990,  636,  644,   44,
       44,  990,  638,  990,  643,   44,   44,  639,  990,  645,
      990,  646,   44,   44,   44,   44,  640,  647,   44,   44,
       44,   44,  642,   44,   44,  644,  648,   44,   44,   44,
       44,  651,  990,  649,   44,   44,  645,  652,  646,   44,
       44,  990,  650,  990,  647,   44,   44,  990,   44,   44,
      990,  653,  990,  648,  990,  654,  655,  990,  651,  990,
      649,  990,  656,  990,  652,  657,   44,   44,  990,  650,
       44,   44,  990,  658,   44,   44,   44,   44,  653,   44,
       44,  990,  654,  655,   44,   44,   44,   44,  990,  656,

       44,   44,  657,  990,   44,   44,  660,  990,  659,  990,
      661,  662,  990,  664,   44,   44,   44,   44,   44,   44,
       44,   44,  663,  990,   44,   44,  990,  666,   44,   44,
      990,   44,   44,  660,  665,  659,  990,  661,  662,  667,
      664,  990,  668,   44,   44,  990,  671,   44,   44,  663,
      990,  669,  672,  990,  666,  670,  673,  990,   44,   44,
      990,  665,   44,   44,   44,   44,  667,   44,   44,  668,
       44,   44,  990,  671,   44,   44,  990,  675,  669,  672,
      676,  990,  670,  673,  674,   44,   44,  990,   44,   44,
      679,  677,   44,   44,   44,   44,  678,   44,   44,   44,

       44,   44,   44,  680,  675,  990,  682,  676,   44,   44,
      990,  674,   44,   44,  685,  990,  687,  679,  677,  681,
      686,   44,   44,  678,  990,  690,  689,  990,   44,   44,
      680,  688,  990,  682,   44,   44,  990,  691,  692,   44,
       44,  685,  990,  687,   44,   44,  681,  686,   44,   44,
       44,   44,  690,  689,  693,  990,  695,  694,  688,   44,
       44,  696,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  697,   44,   44,   44,   44,  990,  699,   44,
       44,  693,  698,  695,  694,   44,   44,  990,  696,   44,
       44,  700,   44,   44,  702,  990,  706,  990,  701,  697,

       44,   44,  990,  703,  704,  699,  708,  705,  990,  698,
      707,   44,   44,   44,   44,   44,   44,  990,  700,   44,
       44,  702,  990,  706,  709,  701,   44,   44,  990,  711,
      703,  704,  990,  708,  705,   44,   44,  707,   44,   44,
      713,   44,   44,  710,  712,   44,   44,   44,   44,   44,
       44,  709,  715,   44,   44,  990,  711,   44,   44,   44,
       44,   44,   44,  990,  719,   44,   44,  713,  716,  717,
      710,  712,  990,  714,  718,  990,  720,   44,   44,  715,
       44,   44,  723,  721,   44,   44,  725,   44,   44,  722,
      990,  719,   44,   44,  726,  716,  717,  728,   44,   44,

      714,  718,  990,  720,  724,   44,   44,  990,  729,  723,
      721,  730,  727,  725,   44,   44,  722,   44,   44,  731,
      990,  726,  732,  990,  728,   44,   44,  990,  733,   44,
       44,   44,   44,   44,   44,  729,   44,   44,  730,  727,
      735,  734,   44,   44,   44,   44,  731,   44,   44,  732,
       44,   44,  736,   44,   44,  733,  990,  739,   44,   44,
      740,  990,  737,  990,   44,   44,  990,  735,  734,   44,
       44,   44,   44,  742,  738,  745,   44,   44,  990,  736,
      744,  990,  741,  743,  739,   44,   44,  740,  990,  737,
       44,   44,   44,   44,  747,  748,  746,   44,   44,  990,

      742,  738,  745,  752,   44,   44,  990,  744,  990,  741,
      743,  751,   44,   44,   44,   44,  990,  372,  372,   44,
       44,  747,  748,  746,  990,   44,   44,  753,  372,  372,
      752,  990,  756,   44,   44,  754,  755,  990,  751,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,  990,  753,   44,   44,   44,   44,  756,
      759,  762,  754,  755,  760,  757,  761,  990,  763,   44,
       44,  758,  766,   44,   44,   44,   44,  990,   44,   44,
       44,   44,  765,  990,   44,   44,  990,  759,  762,  764,
      990,  760,  757,  761,  767,  763,  768,  770,  758,  766,

       44,   44,   44,   44,   44,   44,  990,  769,  990,  765,
       44,   44,   44,   44,   44,   44,  764,   44,   44,  990,
      772,  767,  990,  768,  770,  771,   44,   44,  990,  774,
       44,   44,  775,  990,  769,   44,   44,   44,   44,   44,
       44,  773,  776,  777,   44,   44,  990,  772,  778,   44,
       44,  990,  771,   44,   44,  990,  774,  787,  990,  775,
      779,   44,   44,  990,  782,  788,  990,  780,  773,  776,
      777,  781,   44,   44,  990,  778,   44,   44,  789,  783,
       44,   44,   44,   44,  787,   44,   44,  779,   44,   44,
      791,  782,  788,  990,  780,  784,  785,  786,  781,   44,

       44,  990,  790,   44,   44,  789,  783,   44,   44,  795,
       44,   44,   44,   44,   44,   44,  792,  791,   44,   44,
      794,  793,  784,  785,  786,   44,   44,   44,   44,  790,
       44,   44,   44,   44,  990,  796,  795,   44,   44,   44,
       44,   44,   44,  792,  798,   44,   44,  794,  793,  797,
       44,   44,   44,   44,   44,   44,  990,  799,   44,   44,
       44,   44,  796,  800,  990,   44,   44,  807,  803,  804,
      990,  798,  808,   44,   44,  801,  797,   44,   44,  990,
      802,  809,  810,  990,  799,  990,   44,   44,   44,   44,
      800,  812,   44,   44,  807,  803,  804,   44,   44,  808,

      990,  813,  801,  811,   44,   44,  990,  802,  809,  810,
       44,   44,  990,  814,   44,   44,   44,   44,  812,   44,
       44,   44,   44,   44,   44,   44,   44,  815,  813,  990,
      811,  816,  990,   44,   44,   44,   44,  990,   44,   44,
      814,   44,   44,  990,   44,   44,  817,   44,   44,  990,
      819,  818,   44,   44,  815,  822,   44,   44,  816,  820,
       44,   44,   44,   44,  990,  821,   44,   44,   44,   44,
       44,   44,  990,  817,  823,  824,  990,  819,  818,  830,
      826,  990,  822,   44,   44,  990,  820,  828,  829,  827,
      825,  990,  821,  831,   44,   44,  834,  833,   44,   44,

      990,  823,  824,   44,   44,  990,  830,  826,   44,   44,
       44,   44,   44,   44,  828,  829,  827,  825,   44,   44,
      831,   44,   44,  834,  833,  832,   44,   44,   44,   44,
       44,   44,   44,   44,  838,  990,   44,   44,  836,   44,
       44,   44,   44,  990,  837,  990,  835,  990,   44,   44,
      839,  990,  832,  843,  841,  990,  840,   44,   44,   44,
       44,  838,  842,  990,  844,  836,  990,   44,   44,   44,
       44,  837,  990,  835,  848,   44,   44,  839,   44,   44,
      843,  841,  990,  840,  845,  847,  990,  846,  990,  842,
      990,  844,   44,   44,  849,   44,   44,   44,   44,   44,

       44,  848,   44,   44,  990,  850,  853,  990,   44,   44,
      855,  845,  847,  990,  846,   44,   44,   44,   44,  854,
      990,  849,  858,   44,   44,   44,   44,   44,   44,  990,
      859,  856,  850,  853,   44,   44,  990,  855,  990,  857,
      990,  861,   44,   44,  860,  990,  854,   44,   44,  858,
       44,   44,   44,   44,  990,  862,  990,  859,  856,   44,
       44,  990,   44,   44,   44,   44,  857,  990,  861,   44,
       44,  860,  990,  863,   44,   44,   44,   44,  864,   44,
       44,  990,  862,  866,   44,   44,   44,   44,   44,   44,
      865,   44,   44,  867,  990,   44,   44,   44,   44,  870,

      863,  990,   44,   44,  990,  864,   44,   44,   44,   44,
      866,  868,   44,   44,  990,  869,  872,  865,  990,  873,
      867,  871,   44,   44,   44,   44,  870,   44,   44,  875,
       44,   44,   44,   44,  874,   44,   44,  990,  868,   44,
       44,  877,  869,  872,  990,  879,  873,  990,  871,   44,
       44,  878,   44,   44,  876,  990,  875,   44,   44,   44,
       44,  874,   44,   44,  990,   44,   44,  990,  877,   44,
       44,  990,  879,   44,   44,  990,  880,  990,  878,  881,
      990,  876,  886,  990,  882,  990,  885,   44,   44,  990,
       44,   44,  990,  887,   44,   44,  990,   44,   44,   44,

       44,   44,   44,  880,  888,  990,  881,   44,   44,  886,
      891,  882,  990,  885,  889,   44,   44,  990,  890,  990,
      887,   44,   44,  892,   44,   44,   44,   44,  893,   44,
       44,  888,   44,   44,  990,   44,   44,  891,  895,  897,
      990,  889,   44,   44,  990,  890,  990,  894,   44,   44,
      892,  990,  899,  898,  990,  893,   44,   44,  896,  900,
       44,   44,   44,   44,  990,  895,  897,   44,   44,  990,
      903,  990,  902,  901,  894,   44,   44,   44,   44,  899,
      898,   44,   44,   44,   44,  896,  900,  905,   44,   44,
      906,  904,  990,   44,   44,   44,   44,  903,  990,  902,

      901,   44,   44,   44,   44,   44,   44,   44,   44,  990,
       44,   44,  907,  908,  905,   44,   44,  906,  904,  909,
      281,   44,   44,  990,  912,   44,   44,   44,   44,   44,
       44,  990,  911,   44,   44,   44,   44,   44,   44,  907,
      908,  913,  915,   44,   44,  914,  909,  281,   44,   44,
      917,  912,  990,  916,   44,   44,  919,   44,   44,  911,
       44,   44,  990,   44,   44,  918,   44,   44,  913,  915,
       44,   44,  914,  990,  922,   44,   44,  917,  990,  920,
      916,  924,  990,  919,  923,  990,  921,   44,   44,  925,
      926,  990,  918,  927,   44,   44,   44,   44,   44,   44,

      990,  922,   44,   44,   44,   44,  920,  990,  924,   44,
       44,  923,  928,  921,   44,   44,  925,  926,   44,   44,
      927,   44,   44,  930,  990,  929,  990,   44,   44,  931,
      764,  764,  764,   44,   44,  932,   44,   44,  990,  928,
      933,   44,   44,   44,   44,  934,   44,   44,  990,  935,
      930,  990,  929,   44,   44,  990,  931,   44,   44,  990,
      936,  990,  932,   44,   44,   44,   44,  933,   44,   44,
       44,   44,  934,  937,  938,  990,  935,  990,   44,   44,
       44,   44,  990,  940,  990,   44,   44,  936,  939,   44,
       44,   44,   44,   44,   44,  944,   44,   44,   44,   44,

      937,  938,  941,   44,   44,  945,  946,   44,   44,  990,
      940,  942,  990,  943,  990,  939,  949,  947,   44,   44,
       44,   44,  944,   44,   44,  950,  948,   44,   44,  941,
      990,  951,  945,  946,   44,   44,  952,  990,  942,  990,
      943,   44,   44,  949,  947,   44,   44,  990,  953,  990,
      954,  956,  950,  948,  957,  990,   44,   44,  951,  990,
      955,   44,   44,  952,  990,   44,   44,   44,   44,  990,
      959,   44,   44,   44,   44,  953,  990,  954,  956,  990,
      962,  957,   44,   44,   44,   44,  964,  955,  958,   44,
       44,  990,  960,   44,   44,   44,   44,  959,  961,  963,

       44,   44,   44,   44,  965,   44,   44,  962,   44,   44,
      967,  990,  966,  964,  990,  958,   44,   44,  990,  960,
      990,  974,   44,   44,  968,  961,  963,   44,   44,   44,
       44,  965,  990,  976,  990,  973,  990,  967,  990,  966,
      975,  990,  979,  990,  977,  990,   44,   44,  974,   44,
       44,  968,   44,   44,   44,   44,  969,  969,  969,  969,
      976,  978,  973,   44,   44,  990,  970,  975,  990,  979,
      971,  977,  990,  972,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  978,   44,
       44,  980,  990,  970,  990,   44,   44,  971,   44,   44,

      972,  985,  990,  986,   44,   44,   44,   44,  990,  981,
       44,   44,  987,   44,   44,  990,   44,   44,  980,   44,
       44,  990,  990,  990,  990,  990,  990,  990,  985,  990,
      986,   44,   44,  990,  990,  990,  981,   44,   44,  987,
      988,  969,  969,  969,  969,  990,  990,  990,  989,  990,
      990,  982,  990,  990,  990,  983,  990,  990,  984,  990,
      990,  990,  990,  990,  990,  990,  990,  988,  990,  990,
      990,  990,  990,  990,  990,  989,  990,  990,  982,  990,
      990,  990,  983,  990,  990,  984,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   42,   42,  990,  990,   42,

       45,   45,   45,   45,   45,   45,   45,   92,   92,   92,
       92,   92,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   97,  990,   97,   97,   97,   97,   97,   97,   97,
       98,  990,   98,  100,  100,  100,   44,   44,   44,   44,
       44,   44,   44,    5,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990
    } ;

static const flex_int16_t yy_chk[4617] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    4,    4,    4,    4,
        7,    9,    7,   10,   11,   12,   10,   13,   13,   14,
       14,   15,   15,   16,   16,  683,   17,   17,   19,   19,

       20,   20,   36,   13,   18,   18,   28,   28,    9,   38,
       16,   13,   13,   14,   16,   15,   14,   18,   15,   11,
       12,   17,   14,   28,   15,   18,   20,   28,   18,   36,
       13,   18,   45,   45,   23,   23,   38,   16,   13,   13,
       14,   16,   15,   14,   18,   15,   11,   12,   17,   14,
       28,   15,   18,   20,   28,   18,   21,   21,   18,   22,
       22,   23,   41,   24,   24,   25,   25,   48,   48,   21,
       29,   29,   22,   37,  616,   37,   24,   21,   25,   93,
       22,   48,   25,   21,   24,   46,   46,   94,   23,   41,
       24,   98,   22,   24,  196,  196,   21,   29,   96,   22,

       29,   46,   95,   24,   21,   25,   93,   22,   48,   25,
       21,   24,   27,   27,   94,   30,   30,   24,   98,   22,
       24,   26,   26,   39,   29,   50,   50,   29,   46,   27,
       47,   47,   30,   30,   26,   49,   49,   51,   51,   54,
       54,   26,   27,   52,   52,   26,  156,   27,  157,   26,
       30,   26,   49,   26,  222,   50,   27,    5,   47,   30,
       30,   26,   51,   54,   52,   55,   55,    0,   26,   27,
       53,   53,   26,  156,   27,  157,   26,   30,   26,   49,
       26,  222,   50,   56,   56,   47,   57,   57,    0,   51,
       54,   52,  223,   55,   53,   53,   55,   60,   60,   61,

       61,   56,   58,   58,    0,   59,   59,   57,    0,   62,
       62,    0,   63,   63,    0,   56,   64,   64,   61,  223,
       55,   53,   53,   55,   60,   62,   58,  286,   56,   59,
        0,   65,   65,    0,   57,   64,   66,   66,   67,   67,
       71,   71,   56,   63,    0,   61,   65,   68,   68,   69,
       69,   60,   62,   58,  286,   66,   59,   70,   70,   72,
       72,    0,   64,  287,   67,  366,   67,  367,   66,    0,
       63,   68,   66,   65,   73,   73,   71,   75,   75,   69,
       72,    0,   66,   74,   74,   76,   76,  448,   70,   70,
      287,   67,  366,   67,  367,   66,   78,   78,   68,   66,

        0,   73,    0,   71,   77,   77,   69,   72,   75,   74,
       76,    0,   79,   79,  448,   70,   70,   77,    0,   80,
       80,   83,   83,   78,   81,   81,   84,   84,   73,   79,
       82,   82,   85,   85,   80,   75,   74,   76,   80,   87,
       87,   81,    0,   84,   77,   82,   86,   86,   89,   89,
       78,   88,   88,    0,   83,    0,   79,   91,   91,   90,
       90,   80,   85,   86,   88,   80,   82,    0,   81,   87,
       84,    0,   82,    0,   89,  101,  101,  102,  102,  103,
      103,   83,  104,  104,  106,  106,  449,   91,  535,   85,
       86,   88,   90,   82,  105,  105,   87,  102,  107,  107,

      103,   89,  108,  108,    0,  101,  109,  109,  104,  536,
      105,  615,  106,  449,   91,  535,  110,  110,    0,   90,
      111,  111,  112,  112,  102,    0,  107,  103,  684,  108,
      113,  113,  101,  749,  109,  104,  536,  105,  615,  106,
      110,    0,  114,  114,    0,  115,  115,  750,  113,  116,
      116,  805,  111,  107,  112,  684,  108,    0,  117,  117,
      749,  109,  114,    0,  118,  118,    0,  110,  120,  120,
      121,  121,  122,  122,  750,  113,  115,  118,  805,  111,
      116,  112,  117,  123,  123,  120,    0,  124,  124,  114,
      127,  127,  122,  126,  126,    0,  123,  130,  130,  125,

      125,  806,  121,  115,  118,  124,  126,  116,  127,  117,
      119,  119,  120,  128,  128,    0,  125,    0,  126,  122,
      136,  136,  130,  123,    0,  119,  119,  119,  806,  121,
      851,  128,  124,  126,    0,  127,  131,  131,  128,  136,
        0,  119,  119,  125,  119,  126,  129,  129,  852,  130,
      135,  135,  119,  119,  119,  132,  132,  851,  128,  133,
      133,  134,  134,  137,  137,  128,  136,  131,  119,  119,
      132,  119,  135,  138,  138,  852,  133,    0,  129,  139,
      139,  140,  140,  141,  141,  144,  144,  134,  142,  142,
      143,  143,  145,  145,  131,  139,  137,  132,  141,  135,

        0,  138,  142,  133,  143,  129,    0,  147,  147,  140,
      884,  144,  145,    0,  134,  146,  146,  148,  148,    0,
      149,  149,  139,  137,  147,  141,  151,  151,  138,  142,
      146,  143,  150,  150,  148,    0,  140,  884,  144,  145,
      152,  152,  153,  153,  154,  154,    0,  146,  155,  155,
      151,  147,  149,  160,  160,  153,    0,  146,  159,  159,
        0,  148,    0,  161,  161,    0,  160,  150,  152,  155,
      154,  162,  162,    0,  146,  159,    0,  151,    0,  149,
      161,    0,  153,  163,  163,  165,  165,  162,  164,  164,
      166,  166,    0,  160,  150,  152,  155,  154,  167,  167,

      163,    0,  159,  168,  168,  164,    0,  161,    0,  169,
      169,  170,  170,  165,  162,  171,  171,  172,  172,  167,
      166,    0,  173,  173,    0,  170,    0,  163,  168,  169,
      176,  176,  164,    0,  172,  175,  175,  174,  174,    0,
      165,  177,  177,  179,  179,    0,  167,  166,  171,  178,
      178,    0,  170,  173,  174,  168,  169,    0,  180,  180,
      175,  172,  176,  181,  181,    0,  178,    0,  177,  179,
        0,  182,  182,  183,  183,  171,  181,  184,  184,    0,
      173,  174,  185,  185,  186,  186,    0,  175,  182,  176,
      180,  187,  187,  178,    0,  177,  179,  188,  188,  189,

      189,  190,  190,  181,    0,  184,  197,  197,  186,  183,
      191,  191,  187,    0,  185,  182,    0,  180,    0,  192,
      192,    0,  190,  194,  194,  189,  197,  188,    0,  193,
      193,  191,  184,  195,  195,  186,  183,  198,  198,  187,
      192,  185,  193,    0,  194,    0,  195,  199,  199,  190,
      202,  202,  189,  197,  188,  200,  200,    0,  191,  201,
      201,  198,  203,  203,  204,  204,    0,  192,    0,  193,
        0,  194,  200,  195,  202,    0,  201,  205,  205,  199,
        0,  204,  206,  206,  208,  208,  203,    0,  198,    0,
      207,  207,  209,  209,  205,    0,  210,  210,    0,  200,

        0,  202,    0,  201,  211,  211,  199,  209,  204,  213,
      213,  212,  212,  203,  207,  206,  208,  217,  217,  214,
      214,  205,  210,  215,  215,  216,  216,    0,  226,  226,
        0,  211,    0,  217,  209,    0,  219,  219,  220,  220,
      215,  207,  206,  208,  212,  214,  221,  221,    0,  210,
      219,  224,  224,  220,  226,  230,  230,  216,  211,    0,
      217,  229,  229,  239,  239,  251,  251,  215,  228,  228,
        0,  212,  214,  227,  227,    0,  230,  219,  221,  230,
      220,  226,  224,    0,  216,  218,  218,  229,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  228,  251,

      227,  236,  236,  230,    0,  221,  230,  233,  233,  224,
      225,  225,  232,  232,  229,  234,  234,    0,  231,  231,
      235,  235,    0,  225,  225,  228,  251,  227,  225,  234,
        0,  231,  236,    0,  233,    0,  232,  225,  237,  237,
      225,    0,  225,    0,  235,  231,  240,  240,  247,  247,
      225,  225,  231,  231,    0,  225,  234,    0,  231,  236,
        0,  233,    0,  232,  225,  238,  238,  225,  237,  225,
        0,  235,  231,  240,  242,  242,  241,  241,  247,  231,
      231,  241,  241,  241,  243,  243,  238,    0,  244,  244,
      245,  245,  246,  246,    0,  237,  249,  249,  242,    0,

      240,  244,    0,  245,  244,  247,  246,  248,  248,    0,
      243,  252,  252,  238,    0,  253,  253,  249,  254,  254,
      255,  255,  275,  275,  248,  242,  256,  256,  244,    0,
      245,  244,    0,  246,    0,  252,  253,  243,    0,  254,
      257,  257,  268,  268,  249,    0,  258,  258,  255,  275,
      256,  248,  250,  250,  259,  259,    0,  260,  260,  261,
      261,    0,  252,  253,  257,  250,  254,  268,  250,  250,
      250,  262,  262,  250,  258,  255,  275,  256,  264,  264,
      250,  260,  250,  250,  250,  259,    0,  263,  263,    0,
      261,  257,  250,  264,  268,  250,  250,  250,  265,  265,

      250,  258,  262,  266,  266,  267,  267,  250,  260,  250,
      250,  250,  259,  269,  269,    0,  265,  261,  263,    0,
      264,    0,  267,  270,  270,  271,  271,  278,  278,  262,
        0,  272,  272,  273,  273,  266,  274,  274,  276,  276,
      277,  277,  271,  265,  269,  263,    0,  270,  272,  267,
      279,  279,  281,  281,  273,  280,  280,  274,  277,  283,
      283,    0,  266,  278,  284,  284,  300,  300,  276,  271,
        0,  269,  285,  285,  270,  272,    0,  288,  288,  300,
      279,  273,    0,  283,  274,  277,    0,  280,    0,  285,
      278,  289,  289,  282,  282,  276,  282,  282,  282,  282,

      282,  282,  290,  290,  291,  291,  300,  279,  288,    0,
      283,  292,  292,    0,  280,    0,  285,  293,  293,  294,
      294,  289,  295,  295,  296,  296,  290,  297,  297,  299,
      299,  298,  298,    0,  293,  288,  294,  291,    0,  292,
      301,  301,  297,  302,  302,  303,  303,    0,  289,    0,
      304,  304,  296,  290,  295,  299,  305,  305,  306,  306,
        0,  293,  303,  294,  291,  298,  292,  307,  307,  297,
      301,  302,    0,  305,  306,    0,  308,  308,    0,  296,
      304,  295,  299,  311,  311,  309,  309,    0,  307,  303,
      312,  312,  298,  308,  310,  310,    0,  301,  302,    0,

      305,  306,  309,  313,  313,    0,  312,  304,  314,  314,
        0,  310,  315,  315,    0,  307,    0,  311,  316,  316,
      308,  317,  317,  318,  318,  319,  319,  320,  320,  309,
      321,  321,    0,  312,  322,  322,    0,  318,  310,  323,
      323,  324,  324,    0,  311,  316,  325,  325,  326,  326,
      327,  327,  317,    0,  321,  323,    0,  320,  332,  332,
      328,  328,  329,  329,  318,    0,  322,  330,  330,  326,
        0,  325,  316,  328,  334,  334,  327,  324,  325,  317,
        0,  321,  323,    0,  320,    0,  332,  330,  329,  331,
      331,  333,  333,  322,  330,  334,  326,    0,  325,    0,

      328,    0,  331,  327,  324,  325,    0,  335,  335,  337,
      337,  333,    0,  332,  330,  329,    0,  336,  336,  338,
      338,  330,  334,    0,  339,  339,  340,  340,  333,  331,
      336,  342,  342,  343,  343,  341,  341,    0,  333,  335,
      337,  345,  345,  338,  342,  344,  344,    0,  346,  346,
      347,  347,  348,  348,  343,  333,  339,  336,  340,  341,
        0,  345,  344,  346,  349,  349,  335,  337,    0,  346,
      338,  342,  350,  350,  351,  351,  346,  349,    0,  348,
        0,  343,  347,  339,    0,  340,  341,    0,  345,  344,
      346,    0,  352,  352,  354,  354,  346,  353,  353,  355,

      355,  351,  350,  346,  349,    0,  348,  352,    0,  347,
      353,    0,  356,  356,  357,  357,  358,  358,  360,  360,
      354,  359,  359,  363,  363,  361,  361,    0,  351,  350,
        0,  360,  362,  362,  352,  355,  356,  353,  359,  361,
      364,  364,    0,  357,    0,  362,  358,  354,  371,  371,
      365,  365,    0,  363,  368,  368,  361,  364,  360,  369,
      369,    0,  355,  356,    0,  359,  361,  365,  370,  370,
      357,    0,  362,  358,  371,  372,  372,    0,  369,    0,
      363,  373,  373,  361,  364,  370,    0,  368,  368,  368,
      374,  374,  375,  375,  365,  376,  376,  377,  377,  373,

        0,  371,    0,  378,  378,  369,  379,  379,  380,  380,
      381,  381,  370,    0,  368,  368,  368,  375,  382,  382,
        0,  374,  384,  384,  377,  379,  373,  378,  378,  381,
      383,  383,  385,  385,  380,    0,  386,  386,  388,  388,
      389,  389,    0,  384,  375,  387,  387,    0,  374,  390,
      390,  377,  379,  386,  378,  378,  381,    0,  387,    0,
      383,  380,  391,  391,  388,  389,  392,  392,  393,  393,
      384,    0,  394,  394,    0,  390,  395,  395,    0,  391,
      386,  396,  396,  392,    0,  387,    0,  383,  397,  397,
        0,  388,  389,  394,  398,  398,  399,  399,  393,    0,

      395,    0,  390,  401,  401,  397,  391,  400,  400,    0,
      392,  398,    0,  396,  402,  402,    0,  401,  403,  403,
      394,  404,  404,    0,  400,  393,    0,  395,  405,  405,
      399,    0,  397,    0,  404,    0,  403,    0,  398,    0,
      396,  406,  406,    0,  401,    0,  402,    0,  403,  407,
      407,  400,  405,  408,  408,  409,  409,  399,  412,  412,
      406,  404,    0,  403,    0,  410,  410,    0,  411,  411,
      407,  413,  413,  402,    0,  403,  414,  414,    0,  405,
        0,  409,  410,    0,  408,  411,  412,  406,  413,    0,
      415,  415,    0,  414,  416,  416,    0,  407,    0,  417,

      417,  418,  418,  420,  420,  419,  419,    0,  409,  410,
        0,  408,  411,  412,  415,  413,  417,    0,  418,    0,
      414,  416,  419,  422,  422,  421,  421,  423,  423,    0,
      420,  424,  424,    0,  425,  425,    0,  426,  426,  427,
      427,  415,    0,  417,  424,  418,  423,  425,  416,  419,
      421,  428,  428,  430,  430,  431,  431,  420,    0,  429,
      429,  422,    0,  432,  432,  434,  434,  433,  433,  427,
        0,  424,  428,  423,  425,  426,    0,  421,  429,  432,
      433,  435,  435,  430,  436,  436,  438,  438,  422,  442,
      442,    0,  439,  439,    0,  434,  427,  435,    0,  428,

      441,  441,  426,  443,  443,  429,  432,  433,  439,    0,
      430,  444,  444,  442,    0,  441,  436,  445,  445,  438,
      446,  446,  434,  443,  435,  447,  447,  450,  450,    0,
      445,  440,  440,  451,  451,  439,    0,  444,  452,  452,
      442,    0,  441,  436,  437,  437,  438,  454,  454,  440,
      443,  447,  455,  455,    0,  453,  453,  445,  453,  453,
      453,  437,  437,  440,  444,  456,  456,  455,    0,  437,
      457,  457,  437,  454,  437,    0,  440,    0,  447,  437,
      458,  458,  437,  459,  459,  460,  460,    0,  437,  437,
      440,  461,  461,  458,  455,    0,  437,  462,  462,  437,

      454,  437,  457,    0,  461,    0,  437,  459,    0,  437,
      463,  463,  460,    0,  464,  464,  460,  464,  464,  464,
      458,  465,  465,  466,  466,  467,  467,  463,    0,  457,
        0,  461,  468,  468,  459,  469,  469,  470,  470,  460,
      472,  472,    0,  460,  471,  471,  473,  473,  474,  474,
      470,  469,    0,  465,  463,  466,    0,  471,    0,  475,
      475,  477,  477,  468,    0,  472,  476,  476,  478,  478,
      479,  479,  480,  480,  481,  481,    0,  470,  469,    0,
      465,    0,  466,  476,  471,    0,  482,  482,    0,  480,
      468,  475,  472,  478,  483,  483,  484,  484,  481,    0,

      485,  485,  487,  487,  488,  488,  479,  482,  486,  486,
      476,  483,  489,  489,  484,    0,  480,  485,  475,    0,
      478,    0,  486,  491,  491,  481,  487,  490,  490,    0,
      492,  492,    0,  479,  482,  493,  493,    0,  483,  494,
      494,  484,  491,    0,  485,  492,  495,  495,  490,  486,
      496,  496,    0,  487,  498,  498,  494,  499,  499,  500,
      500,    0,  501,  501,    0,  505,  505,  493,    0,  491,
      504,  504,  492,  503,  503,  490,    0,  502,  502,    0,
      496,  495,    0,  494,  506,  506,  498,  504,    0,  500,
      505,  499,  501,  502,  493,  508,  508,  507,  507,    0,

      506,  503,  509,  509,  510,  510,    0,  496,  495,  497,
      497,    0,  508,  498,  504,    0,  500,  505,  499,  501,
      502,  507,  497,  509,    0,  497,  497,  506,  503,  511,
      511,  510,  512,  512,  516,  516,    0,  497,    0,  508,
      497,    0,  513,  513,  514,  514,  511,    0,  507,  497,
      509,  512,  497,  497,  515,  515,  517,  517,  510,  513,
        0,  518,  518,    0,  497,  538,  538,  497,  514,  519,
      519,  515,    0,  511,    0,  520,  520,    0,  512,  515,
      521,  521,  519,  522,  522,    0,  513,  518,  520,  517,
        0,  523,  523,  521,    0,  514,  525,  525,  515,    0,

      522,    0,  519,    0,  524,  524,  515,  526,  526,  519,
      527,  527,    0,  525,  518,  520,  517,  528,  528,    0,
      521,  523,  524,  527,  529,  529,    0,  522,  526,  519,
      531,  531,  532,  532,  530,  530,  533,  533,  548,  548,
      525,  534,  534,  531,  537,  537,    0,  528,  523,  524,
      527,  530,  539,  539,  534,  526,  529,  541,  541,    0,
      537,    0,  533,  532,    0,  540,  540,  542,  542,  539,
      531,  543,  543,    0,  528,  544,  544,    0,  530,  549,
      549,  534,    0,  529,  541,  542,  543,  537,    0,  533,
      532,  545,  545,  546,  546,    0,  539,  540,  547,  547,

      550,  550,  551,  551,  552,  552,    0,  544,  545,    0,
      546,  541,  542,  543,    0,  547,  551,  552,  553,  553,
      554,  554,  555,  555,  540,  556,  556,  557,  557,  558,
      558,    0,  550,    0,  544,  545,    0,  546,    0,  559,
      559,    0,  547,  551,  552,  560,  560,  561,  561,  555,
      556,  562,  562,  566,  566,  553,  559,  557,    0,  550,
        0,  563,  563,  564,  564,    0,  562,  565,  565,    0,
      566,  560,  567,  567,  568,  568,  555,  556,  569,  569,
      561,    0,  553,  559,  557,  563,    0,  568,  571,  571,
      564,  570,  570,  562,  572,  572,    0,  566,  560,  565,

      573,  573,  574,  574,    0,  567,    0,  561,  570,  575,
      575,    0,  563,    0,  568,  576,  576,  564,    0,  572,
        0,  573,  577,  577,  578,  578,  565,  574,  579,  579,
      580,  580,  567,  581,  581,  570,  575,  582,  582,  583,
      583,  578,    0,  576,  587,  587,  572,  581,  573,  584,
      584,    0,  577,    0,  574,  585,  585,    0,  586,  586,
        0,  582,    0,  575,    0,  583,  584,    0,  578,    0,
      576,    0,  585,    0,  581,  586,  588,  588,    0,  577,
      589,  589,    0,  587,  590,  590,  591,  591,  582,  592,
      592,    0,  583,  584,  593,  593,  594,  594,    0,  585,

      595,  595,  586,    0,  596,  596,  589,    0,  588,    0,
      590,  593,    0,  595,  597,  597,  599,  599,  598,  598,
      600,  600,  594,    0,  601,  601,    0,  597,  602,  602,
        0,  603,  603,  589,  596,  588,    0,  590,  593,  598,
      595,    0,  599,  604,  604,    0,  602,  605,  605,  594,
        0,  600,  603,    0,  597,  601,  604,    0,  606,  606,
        0,  596,  607,  607,  609,  609,  598,  608,  608,  599,
      610,  610,    0,  602,  611,  611,    0,  607,  600,  603,
      608,    0,  601,  604,  606,  612,  612,    0,  613,  613,
      611,  609,  614,  614,  618,  618,  610,  617,  617,  619,

      619,  620,  620,  612,  607,    0,  614,  608,  621,  621,
        0,  606,  622,  622,  617,    0,  619,  611,  609,  613,
      618,  625,  625,  610,    0,  622,  621,    0,  624,  624,
      612,  620,    0,  614,  623,  623,    0,  623,  623,  626,
      626,  617,    0,  619,  627,  627,  613,  618,  628,  628,
      629,  629,  622,  621,  624,    0,  626,  625,  620,  630,
      630,  627,  631,  631,  632,  632,  633,  633,  634,  634,
      635,  635,  628,  636,  636,  637,  637,    0,  631,  638,
      638,  624,  629,  626,  625,  640,  640,    0,  627,  641,
      641,  632,  639,  639,  634,    0,  638,    0,  633,  628,

      642,  642,    0,  635,  636,  631,  640,  637,    0,  629,
      639,  643,  643,  644,  644,  645,  645,    0,  632,  647,
      647,  634,    0,  638,  642,  633,  646,  646,    0,  645,
      635,  636,    0,  640,  637,  649,  649,  639,  648,  648,
      647,  650,  650,  644,  646,  651,  651,  653,  653,  654,
      654,  642,  649,  652,  652,    0,  645,  655,  655,  656,
      656,  658,  658,    0,  653,  657,  657,  647,  650,  651,
      644,  646,    0,  648,  652,    0,  654,  659,  659,  649,
      660,  660,  657,  655,  661,  661,  658,  664,  664,  656,
        0,  653,  662,  662,  659,  650,  651,  661,  663,  663,

      648,  652,    0,  654,  657,  665,  665,    0,  662,  657,
      655,  663,  660,  658,  666,  666,  656,  667,  667,  664,
        0,  659,  665,    0,  661,  668,  668,    0,  666,  669,
      669,  670,  670,  671,  671,  662,  673,  673,  663,  660,
      668,  667,  672,  672,  674,  674,  664,  676,  676,  665,
      675,  675,  669,  677,  677,  666,    0,  673,  679,  679,
      674,    0,  670,    0,  678,  678,    0,  668,  667,  680,
      680,  682,  682,  676,  672,  679,  681,  681,    0,  669,
      678,    0,  675,  677,  673,  685,  685,  674,    0,  670,
      686,  686,  688,  688,  681,  682,  680,  687,  687,    0,

      676,  672,  679,  686,  689,  689,    0,  678,    0,  675,
      677,  685,  690,  690,  691,  691,    0,  691,  691,  693,
      693,  681,  682,  680,    0,  692,  692,  687,  692,  692,
      686,    0,  693,  694,  694,  689,  690,    0,  685,  695,
      695,  696,  696,  697,  697,  700,  700,  698,  698,  699,
      699,  701,  701,    0,  687,  704,  704,  702,  702,  693,
      697,  700,  689,  690,  698,  695,  699,    0,  701,  703,
      703,  696,  704,  705,  705,  706,  706,    0,  707,  707,
      708,  708,  703,    0,  709,  709,    0,  697,  700,  702,
        0,  698,  695,  699,  705,  701,  707,  709,  696,  704,

      710,  710,  712,  712,  711,  711,    0,  708,    0,  703,
      713,  713,  714,  714,  716,  716,  702,  715,  715,    0,
      712,  705,    0,  707,  709,  711,  717,  717,    0,  714,
      718,  718,  715,    0,  708,  719,  719,  720,  720,  721,
      721,  713,  716,  718,  725,  725,    0,  712,  719,  722,
      722,    0,  711,  723,  723,    0,  714,  725,    0,  715,
      719,  726,  726,    0,  722,  725,    0,  720,  713,  716,
      718,  721,  727,  727,    0,  719,  728,  728,  726,  723,
      732,  732,  724,  724,  725,  733,  733,  719,  734,  734,
      728,  722,  725,    0,  720,  724,  724,  724,  721,  729,

      729,    0,  727,  731,  731,  726,  723,  730,  730,  733,
      735,  735,  736,  736,  737,  737,  729,  728,  738,  738,
      731,  730,  724,  724,  724,  739,  739,  740,  740,  727,
      741,  741,  742,  742,    0,  738,  733,  743,  743,  744,
      744,  747,  747,  729,  740,  745,  745,  731,  730,  739,
      746,  746,  748,  748,  751,  751,    0,  741,  752,  752,
      753,  753,  738,  742,    0,  754,  754,  751,  747,  748,
        0,  740,  752,  759,  759,  745,  739,  756,  756,    0,
      746,  753,  754,    0,  741,    0,  755,  755,  757,  757,
      742,  756,  758,  758,  751,  747,  748,  760,  760,  752,

        0,  757,  745,  755,  761,  761,    0,  746,  753,  754,
      763,  763,    0,  758,  762,  762,  764,  764,  756,  765,
      765,  766,  766,  767,  767,  768,  768,  760,  757,    0,
      755,  762,    0,  769,  769,  770,  770,    0,  771,  771,
      758,  772,  772,    0,  773,  773,  763,  775,  775,    0,
      767,  765,  776,  776,  760,  771,  777,  777,  762,  769,
      774,  774,  778,  778,    0,  770,  779,  779,  780,  780,
      782,  782,    0,  763,  772,  773,    0,  767,  765,  779,
      775,    0,  771,  783,  783,    0,  769,  777,  778,  776,
      774,    0,  770,  780,  781,  781,  783,  782,  784,  784,

        0,  772,  773,  785,  785,    0,  779,  775,  786,  786,
      787,  787,  788,  788,  777,  778,  776,  774,  789,  789,
      780,  790,  790,  783,  782,  781,  791,  791,  792,  792,
      793,  793,  794,  794,  790,    0,  795,  795,  788,  796,
      796,  797,  797,    0,  789,    0,  787,    0,  798,  798,
      791,    0,  781,  795,  793,    0,  792,  799,  799,  801,
      801,  790,  794,    0,  796,  788,    0,  800,  800,  802,
      802,  789,    0,  787,  801,  803,  803,  791,  804,  804,
      795,  793,    0,  792,  798,  800,    0,  799,    0,  794,
        0,  796,  807,  807,  802,  808,  808,  809,  809,  810,

      810,  801,  811,  811,    0,  803,  807,    0,  813,  813,
      809,  798,  800,    0,  799,  812,  812,  814,  814,  808,
        0,  802,  813,  815,  815,  816,  816,  817,  817,    0,
      814,  810,  803,  807,  818,  818,    0,  809,    0,  812,
        0,  817,  820,  820,  815,    0,  808,  819,  819,  813,
      821,  821,  822,  822,    0,  818,    0,  814,  810,  823,
      823,    0,  824,  824,  825,  825,  812,    0,  817,  826,
      826,  815,    0,  819,  827,  827,  828,  828,  822,  829,
      829,    0,  818,  824,  830,  830,  831,  831,  832,  832,
      823,  835,  835,  826,    0,  833,  833,  836,  836,  831,

      819,    0,  834,  834,    0,  822,  837,  837,  838,  838,
      824,  829,  839,  839,    0,  830,  834,  823,    0,  837,
      826,  833,  840,  840,  841,  841,  831,  843,  843,  839,
      842,  842,  844,  844,  838,  845,  845,    0,  829,  846,
      846,  841,  830,  834,    0,  844,  837,    0,  833,  847,
      847,  842,  848,  848,  840,    0,  839,  849,  849,  850,
      850,  838,  853,  853,    0,  854,  854,    0,  841,  855,
      855,    0,  844,  856,  856,    0,  847,    0,  842,  848,
        0,  840,  854,    0,  850,    0,  853,  857,  857,    0,
      858,  858,    0,  855,  859,  859,    0,  860,  860,  861,

      861,  862,  862,  847,  857,    0,  848,  863,  863,  854,
      860,  850,    0,  853,  858,  864,  864,    0,  859,    0,
      855,  865,  865,  861,  866,  866,  867,  867,  862,  869,
      869,  857,  868,  868,    0,  870,  870,  860,  865,  867,
        0,  858,  871,  871,    0,  859,    0,  864,  872,  872,
      861,    0,  869,  868,    0,  862,  873,  873,  866,  870,
      874,  874,  875,  875,    0,  865,  867,  876,  876,    0,
      873,    0,  872,  871,  864,  877,  877,  878,  878,  869,
      868,  879,  879,  880,  880,  866,  870,  876,  882,  882,
      878,  874,    0,  881,  881,  886,  886,  873,    0,  872,

      871,  887,  887,  885,  885,  888,  888,  889,  889,    0,
      890,  890,  879,  880,  876,  894,  894,  878,  874,  881,
      885,  891,  891,    0,  889,  892,  892,  893,  893,  895,
      895,    0,  887,  896,  896,  897,  897,  899,  899,  879,
      880,  890,  892,  898,  898,  891,  881,  885,  900,  900,
      896,  889,    0,  893,  901,  901,  898,  902,  902,  887,
      903,  903,    0,  904,  904,  897,  906,  906,  890,  892,
      907,  907,  891,    0,  902,  905,  905,  896,    0,  900,
      893,  904,    0,  898,  903,    0,  901,  908,  908,  905,
      906,    0,  897,  907,  909,  909,  911,  911,  912,  912,

        0,  902,  913,  913,  914,  914,  900,    0,  904,  917,
      917,  903,  908,  901,  915,  915,  905,  906,  918,  918,
      907,  919,  919,  911,    0,  909,    0,  916,  916,  913,
      916,  916,  916,  920,  920,  914,  921,  921,    0,  908,
      915,  922,  922,  923,  923,  919,  924,  924,    0,  921,
      911,    0,  909,  925,  925,    0,  913,  926,  926,    0,
      923,    0,  914,  927,  927,  928,  928,  915,  932,  932,
      929,  929,  919,  924,  925,    0,  921,    0,  930,  930,
      931,  931,    0,  928,    0,  934,  934,  923,  926,  933,
      933,  935,  935,  936,  936,  932,  937,  937,  939,  939,

      924,  925,  929,  938,  938,  933,  934,  940,  940,    0,
      928,  930,    0,  931,    0,  926,  938,  935,  942,  942,
      943,  943,  932,  941,  941,  939,  937,  944,  944,  929,
        0,  940,  933,  934,  945,  945,  941,    0,  930,    0,
      931,  946,  946,  938,  935,  948,  948,    0,  942,    0,
      943,  945,  939,  937,  946,    0,  947,  947,  940,    0,
      944,  949,  949,  941,    0,  950,  950,  951,  951,    0,
      948,  953,  953,  952,  952,  942,    0,  943,  945,    0,
      951,  946,  955,  955,  956,  956,  953,  944,  947,  954,
      954,    0,  949,  957,  957,  959,  959,  948,  950,  952,

      960,  960,  962,  962,  954,  961,  961,  951,  963,  963,
      956,    0,  955,  953,    0,  947,  964,  964,    0,  949,
        0,  962,  968,  968,  957,  950,  952,  965,  965,  967,
      967,  954,    0,  964,    0,  961,    0,  956,    0,  955,
      963,    0,  967,    0,  965,    0,  966,  966,  962,  969,
      969,  957,  958,  958,  970,  970,  958,  958,  958,  958,
      964,  966,  961,  971,  971,    0,  958,  963,    0,  967,
      958,  965,    0,  958,  972,  972,  973,  973,  974,  974,
      976,  976,  977,  977,  978,  978,  981,  981,  966,  979,
      979,  973,    0,  958,    0,  980,  980,  958,  982,  982,

      958,  978,    0,  979,  983,  983,  984,  984,    0,  974,
      985,  985,  980,  987,  987,    0,  986,  986,  973,  989,
      989,    0,    0,    0,    0,    0,    0,    0,  978,    0,
      979,  988,  988,    0,    0,    0,  974,  975,  975,  980,
      986,  975,  975,  975,  975,    0,    0,    0,  988,    0,
        0,  975,    0,    0,    0,  975,    0,    0,  975,    0,
        0,    0,    0,    0,    0,    0,    0,  986,    0,    0,
        0,    0,    0,    0,    0,  988,    0,    0,  975,    0,
        0,    0,  975,    0,    0,  975,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  992,  992,    0,    0,  992,

      993,  993,  993,  993,  993,  993,  993,  994,  994,  994,
      994,  994,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  996,    0,  996,  996,  996,  996,  996,  996,  996,
      997,    0,  997,  998,  998,  998,  999,  999,  999,  999,
      999,  999,  999,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990
    } ;

static const flex_int16_t yy_rule_linenum[24] =
    {   0,
       91,   96,  103,  106,  111,  117,  118,  119,  120,  121,
      122,  123,  124,  126,  131,  132,  134,  139,  145,  151,
      158,  160,  161
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/glEffects/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/glEffects/src/scanner.l"

#include <string>
#include <sstream>
#include "scanner.h"


/* HLSL Code Block */

std::stringstream code_block;

/* import the parser's token type into a local typedef */
typedef GLEFFECTS::Parser::token token;
typedef GLEFFECTS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1845 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "E:/Source/GitRepos/glEffects/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1859 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1861 "scanner.cc"

#define INITIAL 0
#define PARSE_STATE_CODEBLOCK 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 80 "E:/Source/GitRepos/glEffects/src/scanner.l"


#line 83 "E:/Source/GitRepos/glEffects/src/scanner.l"
 /* code to place at the beginning of yylex() */

    BEGIN(INITIAL);
    // reset location
    yylloc->step();



#line 2066 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 991 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 990 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 24 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 24 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 25 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
        BEGIN(PARSE_STATE_CODEBLOCK);
        code_block.clear();
        code_block.str("");
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 96 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    yylval->stringVal = new std::string(code_block.str());
    code_block.clear();
    code_block.str("");
    BEGIN(INITIAL);
    return token::CODE_BLOCK;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 103 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 106 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    code_block<<std::endl;
    yylloc->lines(yyleng);yylloc->step();
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 111 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 117 "E:/Source/GitRepos/glEffects/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 118 "E:/Source/GitRepos/glEffects/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 119 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 120 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 121 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 126 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 131 "E:/Source/GitRepos/glEffects/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 132 "E:/Source/GitRepos/glEffects/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 145 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "E:/Source/GitRepos/glEffects/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 158 "E:/Source/GitRepos/glEffects/src/scanner.l"
{yylloc->step();}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 160 "E:/Source/GitRepos/glEffects/src/scanner.l"
{yylloc->lines(yyleng); yylloc->step();}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "E:/Source/GitRepos/glEffects/src/scanner.l"
{return static_cast<token_type>(*yytext);}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 24:
YY_RULE_SETUP
#line 166 "E:/Source/GitRepos/glEffects/src/scanner.l"
ECHO;
	YY_BREAK
#line 2297 "scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSE_STATE_CODEBLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	GLEFFECTSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	GLEFFECTSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					GLEFFECTSrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) GLEFFECTSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 991 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 991 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 990);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) GLEFFECTSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) GLEFFECTSalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		GLEFFECTSfree((void *) b->yy_ch_buf  );

	GLEFFECTSfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)GLEFFECTSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)GLEFFECTSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) GLEFFECTSalloc(new_size  );

		else
			(yy_start_stack) = (int *) GLEFFECTSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *GLEFFECTSalloc (yy_size_t  size )
{
			return malloc(size);
}

void *GLEFFECTSrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void GLEFFECTSfree (void * ptr )
{
			free( (char *) ptr );	/* see GLEFFECTSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 166 "E:/Source/GitRepos/glEffects/src/scanner.l"


namespace GLEFFECTS {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : GLEFFECTSFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int GLEFFECTSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int GLEFFECTSFlexLexer::yywrap()
{
    return 1;
}

