#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer GLEFFECTSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define GLEFFECTSalloc_ALREADY_DEFINED
#else
#define yyalloc GLEFFECTSalloc
#endif

#ifdef yyrealloc
#define GLEFFECTSrealloc_ALREADY_DEFINED
#else
#define yyrealloc GLEFFECTSrealloc
#endif

#ifdef yyfree
#define GLEFFECTSfree_ALREADY_DEFINED
#else
#define yyfree GLEFFECTSfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[999] =
    {   0,
        0,    0,    0,    0,   26,   24,   22,   23,   24,   24,
       18,   18,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    4,    4,    5,    4,    4,   22,    0,    0,
        8,   19,   18,    0,   21,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,    0,    0,    0,    0,    8,   19,

       19,   21,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    0,    0,
        7,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   10,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   16,   20,   20,   20,   20,
       20,   20,   20,   20,   20,    0,    0,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   17,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   15,   15,   20,   15,   20,
        0,    0,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   12,   13,   14,
       20,   20,   20,   15,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,    0,    0,   20,   20,   20,   20,   15,   20,   20,
       15,   15,   20,   20,   20,   20,   20,   15,   20,   20,
       11,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   15,   20,   20,   20,
       20,   20,   20,   20,   20,   15,   20,   20,   20,   20,
       20,   20,   15,   20,    0,    0,   15,   15,   15,   20,
       20,   20,   15,   20,   20,   20,   20,   20,   15,   20,
       20,   20,   20,   15,   20,   20,   20,   20,   20,   15,
       15,   20,   20,   15,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   15,   15,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   15,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,    1,   20,   20,   20,
       20,   20,    0,    0,   20,   15,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   15,   15,   20,   20,   20,
       20,   15,   20,   20,   20,   15,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   15,   20,   15,   20,
       20,   20,   20,   20,   20,   20,   15,   15,   20,   20,
       20,   20,   20,   20,   15,   20,   20,   20,   15,   15,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    9,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    0,    0,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   15,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   15,   20,
       15,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   15,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        0,    0,   20,   20,   20,   15,   20,   20,   20,   20,

       20,   15,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   15,   20,   20,   20,   15,   20,   20,
       20,   20,   20,   20,   15,   20,   20,   20,   20,   15,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   15,
       20,   15,   15,   15,   15,   20,   20,   20,   20,   20,
       15,   15,   20,   20,   20,   20,    0,    0,   20,   20,
       20,   20,   20,   20,   20,   20,   15,   20,   15,   20,
       20,   15,   20,   15,   20,   15,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   15,   15,   15,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   15,   20,   20,   20,   15,   20,
       20,   15,    0,    0,   20,   20,   20,   20,   15,   20,
       20,   20,   20,   15,   20,   20,   20,   15,   15,   20,
       20,   20,   15,   20,   15,   15,   20,   20,   20,   15,
       20,   20,   15,   15,   20,   20,   20,   20,   20,   20,
       15,   20,   15,   15,   20,   20,   15,   20,    0,    0,
       20,   20,   20,   15,   20,   20,   20,   20,   20,   20,
       15,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   15,   20,   15,   20,   20,   20,   20,   15,
        3,    0,   20,   15,   20,   15,   20,   20,   20,   20,

       20,   15,   15,   20,   20,   20,   15,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,    2,   20,   15,
       20,   20,   20,   20,   15,   15,   20,   15,   20,   15,
       20,   20,   20,   20,   15,   15,   20,   20,   20,   20,
       20,   20,   20,   15,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   15,   15,   15,   20,   20,
       20,   20,   20,   20,   20,   15,   15,   15,   15,   15,
       20,   20,   15,   15,   15,   20,   20,   20,   15,   15,
       15,   15,   15,   20,   15,   20,   15,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    6,    1,    7,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    1,    1,    1,
        1,    1,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
        1,    1,    1,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    4,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    8,    6,    6,    9,    6,    6,    6,    6,
        6,    7,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        6,    6
    } ;

static const flex_int16_t yy_base[1008] =
    {   0,
        0,    0,   71,   75,  227, 4614,   79, 4614,   60,   78,
       77,   78,   81,   83,   85,   87,   90,   98,   92,   94,
      150,  153,  128,  157,  159,  215,  206,  168,  100,  195,
      209,    0, 4614, 4614, 4614, 4614,   81,  167,   76,  176,
        0,  138,    0,    0,    0,  126,  217,  191,  188,  231,
      237,  256,  258,  264,  276,  282,  285,  290,  295,  297,
      301,  304,  325,  331,  333,  342,  335,  292,  358,  360,
      364,  369,  372,  374,  376,  385,  387,  391,  399,  407,
      418,  410,  434,  413,  440,  444,  447,  455,  458,  461,
      467,  478,  480,    0,  146,  165,  168,  163,    0,  167,

     4614,    0,  482,  485,  495,  502,  490,  507,  513,  517,
      521,  523,  525,  529,  545,  550,  552,  558,  572,  564,
      624,  578,  585,  580,  592,  601,  598,  608,  612,  634,
      606,  566,  649,  628,  661,  663,  653,  671,  636,  673,
      676,  687,  693,  697,  699,  703,  721,  730,  709,  732,
      736,  723,  743,  746,  751,  758,  760,  763,  208,  217,
     4614,  766,  774,  790,  792,  795,  799,  801,  803,  817,
      819,  821,  823,  825,  830,  845,  849,  827,  854,  861,
      872,  869,  877,  881,  883,  890,  896,  898,  901,  907,
      904,  911,  917,  919,  941,  931,  945,  947,  179,  949,

      958,  972,  974,  977,  979,  983,  985,  997,  999, 1011,
     1005, 1023, 1016, 1019, 1025, 1027, 1044, 1047, 1039, 1049,
     1051, 1109, 1054, 1060, 1071,  225,  266, 1091, 1150, 1079,
     1098, 1126, 1128, 1123, 1135, 1087, 1106, 1145, 1141, 1100,
     1172, 1166, 1089, 1178, 1193, 1184, 1210, 1212, 1217, 1219,
     1215, 1221, 1223, 1273, 1241, 1226, 1247, 1258, 1253, 1261,
     1269, 1282, 1266, 1287, 1298, 1314, 1322, 1325, 1333, 1341,
     1335, 1343, 1346, 1357, 1348, 1354, 1361, 1363, 1359, 1369,
     1375, 1387, 1389, 1401, 1396, 1139, 1429, 1415, 1239, 1405,
      273,  288, 1417, 1423, 1443, 1445, 1456, 1459, 1462, 1450,

     1464, 1468, 1470, 1472, 1486, 1488, 1495, 1490, 1500, 1512,
     1516, 1514, 1520, 1527, 1538, 1540, 1542, 1546, 1548, 1551,
     1553, 1560, 1565, 1567, 1569, 1572, 1576, 1586, 1583, 1588,
     1593, 1604, 1597, 1616, 1611, 1621, 1624, 1643, 1627, 1632,
     1649, 1653, 1659, 1655, 1666, 1670, 1672, 1676, 1692, 1681,
     1702, 1695, 1699, 1705, 1719, 1715, 1731, 1734, 1737, 1739,
     1755, 1751, 1758, 1760, 1765, 1767, 1770, 1781, 1786, 1795,
     1797,  298,  297, 1799, 1808, 1823, 1825, 1817, 1829, 1835,
     1837, 1844, 1848, 1852, 1863, 1855, 1868, 1857, 1870, 1884,
     1872, 1879, 1894, 1890, 1897, 1910, 1912, 1918, 1920, 1924,

     1930, 1937, 1940, 1947, 1951, 1958, 1960, 1965, 1970, 1967,
     1982, 1986, 1978, 1989, 1992, 1994, 2008, 2003, 2013, 2022,
     2016, 2028, 2034, 2036, 2042, 2048, 2060, 2062, 2064, 2068,
     2071, 2076, 2073, 2088, 2094, 2090, 2092, 2105, 2115, 2096,
     2117, 2122, 2182, 2098, 2134, 2143, 2124, 2137, 2145, 2151,
     2163, 2173, 2156, 2178,  302,  338, 2184, 2190, 2192, 2218,
     2214, 2228, 2205, 2224, 2232, 2235, 2248, 2241, 2208, 2251,
     2257, 2264, 2273, 2276, 2284, 2287, 2291, 2297, 2289, 2293,
     2299, 2307, 2311, 2316, 2318, 2320, 2333, 2324, 2326, 2335,
     2344, 2359, 2353, 2357, 2363, 2368, 2371, 2385, 2387, 2390,

     2395, 2397, 2400, 2460, 2405, 2409, 2414, 2417, 2420, 2423,
     2425, 2427, 2440, 2434, 2445, 2454, 2465, 2467, 2480, 2493,
     2496, 2505, 2486, 2507, 2512, 2523, 2528, 2531, 2516, 2534,
     2551, 2542, 2545, 2561, 2554, 2572, 2575, 2577, 2579, 2581,
     2587, 2589,  388,  392, 2598, 2605, 2607, 2615, 2609, 2617,
     2622, 2625, 2627, 2632, 2642, 2645, 2652, 2655, 2665, 2660,
     2667, 2669, 2680, 2677, 2682, 2688, 2691, 2693, 2695, 2698,
     2709, 2715, 2717, 2720, 2723, 2725, 2743, 2750, 2747, 2752,
     2757, 2761, 2770, 2772, 2779, 2774, 2781, 2784, 2787, 2792,
     2789, 2795, 2802, 2806, 2798, 2820, 2825, 2829, 2810, 2831,

     2840, 2833, 2847, 2844, 2853, 2862, 2864, 2867, 2869, 2871,
     2875, 2891, 2880, 2894, 2906, 2902, 2908, 2911, 2913, 2918,
     2938, 2932,  402,  122, 2940, 2944, 2949, 2951, 2953, 2959,
     2974, 2979, 2967, 2985, 2987, 2982, 2989, 2991, 2994, 3000,
     3011, 3013, 3016, 3019, 3023, 3025, 3034, 3040, 3044, 3056,
     3046, 3059, 3064, 3067, 3062, 3071, 3073, 3086, 3091, 3093,
     3101, 3095, 3097, 3099, 3108, 3103, 3119, 3126, 3130, 3137,
     3159, 3134, 3161, 3167, 3164, 3174, 3183, 3176, 3186, 3190,
     3196, 3194, 3200, 3202, 3211, 3213, 3218, 3220, 3224, 3226,
       50,  422, 3238, 3230, 3245, 3251, 3253, 3257, 3279, 3285,

     3260, 3265, 3271, 3292, 3295, 3298, 3303, 3305, 3309, 3313,
     3316, 3318, 3330, 3327, 3332, 3336, 3354, 3340, 3343, 3357,
     3365, 3359, 3368, 3370, 3373, 3379, 3384, 3381, 3386, 3399,
     3404, 3407, 3416, 3426, 3412, 3432, 3434, 3439, 3454, 3388,
     3458, 3460, 3462, 3465, 3467, 3474, 3476, 3484, 3486, 3488,
     3492, 3494, 3496, 3502, 3504, 3506,  454,  483, 3511, 3515,
     3520, 3535, 3537, 3533, 3542, 3544, 3548, 3560, 3562, 3566,
     3569, 3571, 3575, 3577, 3584, 3586, 3588, 3593, 3595, 3597,
     3600, 3603, 3615, 3608, 3618, 3620, 3624, 3626, 3628, 3635,
     3642, 3652, 3665, 3667, 3669, 3680, 3683, 3687, 3690, 3692,

     3694, 3696, 3698, 3703, 3701, 3707, 3710, 3712, 3716, 3721,
     3724, 3734,  483,  523, 3737, 3748, 3761, 3759, 3763, 3765,
     3768, 3775, 3779, 3783, 3792, 3786, 3794, 3796, 3802, 3804,
     3810, 3821, 3812, 3824, 3828, 3831, 3835, 3839, 3837, 3843,
     3845, 3851, 3853, 3855, 3859, 3861, 3863, 3873, 3878, 3881,
     3883, 3888, 3885, 3890, 3903, 3908, 3910, 3912,  532,  539,
     3915, 3917, 3919, 3923, 3925, 3944, 3947, 3940, 3949, 3951,
     3954, 3958, 3974, 3976, 3981, 3983, 3985, 3987, 3992, 3996,
     4001, 4012, 4006, 4024, 4026, 4028, 4032, 4039, 4048, 4045,
     4614,  594, 4055, 4051, 4053, 4057, 4059, 4061, 4064, 4066,

     4078, 4080, 4085, 4097, 4093, 4105, 4107, 4112, 4116, 4120,
     4125, 4128, 4133, 4135, 4138, 4152, 4154, 4614, 4156, 4162,
     4165, 4167, 4171, 4190, 4178, 4180, 4199, 4201, 4205, 4207,
     4213, 4215, 4220, 4227, 4231, 4233, 4235, 4237, 4239, 4246,
     4243, 4253, 4255, 4248, 4260, 4262, 4264, 4279, 4276, 4282,
     4292, 4287, 4304, 4306, 4295, 4309, 4313, 4323, 4325, 4331,
     4328, 4335, 4351, 4340, 4358, 4417, 4362, 4367, 4372, 4379,
     4374, 4386, 4390, 4394, 4399, 4396, 4404, 4410, 4413, 4419,
     4426, 4442, 4501, 4444, 4446, 4449, 4453, 4455, 4451, 4459,
     4463, 4469, 4474, 4479, 4476, 4481, 4483, 4614, 4556, 4562,

     4568, 4573, 4582, 4591, 4596, 4598, 4604
    } ;

static const flex_int16_t yy_def[1008] =
    {   0,
      998,    1,  999,  999,  998,  998,  998,  998,  998,  998,
     1000, 1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1002,  998,  998,  998,  998,  998,  998,  998, 1003,
     1004, 1005,   12, 1006, 1007, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1002,  998,  998, 1003, 1003, 1004, 1005,

      998, 1007, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,  998,  998,
      998, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001,  998,  998, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
      998,  998, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001,  998,  998, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001,  998,  998, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001,  998,  998, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001,  998,  998, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
      998,  998, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001,  998,  998, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001,  998,  998, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,  998,  998,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
      998,  998, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001,  998, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001,    0,  998,  998,

      998,  998,  998,  998,  998,  998,  998
    } ;

static const flex_int16_t yy_nxt[4687] =
    {   0,
        6,    7,    8,    7,    9,    6,    6,    6,   10,   11,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   19,   19,
       21,   22,   23,   19,   24,   19,   25,   26,   27,   28,
       29,   30,   19,   19,   31,   32,   13,   14,   15,   16,
       17,   18,   19,   19,   20,   19,   19,   21,   22,   23,
       19,   24,   19,   25,   26,   27,   28,   29,   30,   19,
       19,   31,   34,   35,   36,   37,   34,   35,   36,   37,
       38,   39,   38,   40,   42,   42,   41,   45,   45,   45,
       45,   45,   45,   45,   45,  757,   45,   45,   45,   45,

       45,   45,   95,   47,   45,   45,   45,   45,   39,   96,
       56,   48,   49,   50,   57,   53,   51,   59,   54,   44,
      998,   58,   52,   87,   55,   60,   63,   88,   61,   95,
       47,   62,   45,   45,   45,   45,   96,   56,   48,   49,
       50,   57,   53,   51,   59,   54,   44,  998,   58,   52,
       87,   55,   60,   63,   88,   61,   45,   45,   62,   45,
       45,   70,  101,   45,   45,   45,   45,  692,   38,   64,
       38,  161,   67,   98,   45,   45,   71,   65,   75,  159,
       68,   98,   76,   66,   72,   45,   45,  160,   70,  101,
       73,  101,   69,   74,   45,   45,   64,   45,   45,   67,

       86,   45,   45,   71,   65,   75,  159,   68,  105,   76,
       66,   72,   45,   45,  160,   45,   45,   73,  101,   69,
       74,   45,   45,   45,   45,  104,  998,   86,   89,   83,
      226,   90,   91,   92,   77,  105,  998,   45,   45,  103,
      227,   78,   84,   45,   45,   79,  998,   85,  291,   80,
       93,   81,  104,   82,  106,   89,   83,  226,   90,   91,
       92,   77,   45,   45,   45,   45,  103,  227,   78,   84,
       45,   45,   79,  107,   85,  291,   80,   93,   81,  998,
       82,  106,   45,   45,  998,  109,  292,  108,   45,   45,
      998,   45,   45,  372,  110,  111,   45,   45,   45,   45,

      107,   45,   45,   45,   45,  998,  112,   45,   45,  115,
       45,   45,  109,  292,  108,  998,  113,  117,  373,  114,
      372,  110,  111,  116,  129,  118,  130,  119,  455,  121,
      456,   45,   45,  112,  120,  543,  115,   45,   45,   45,
       45,   45,   45,  113,  117,  373,  114,  122,   45,   45,
      116,  129,  118,  130,  119,  455,  121,  456,  124,  544,
      126,  120,  543,  125,   45,   45,   45,   45,  123,  998,
       45,   45,  998,  127,  122,   45,   45,  128,   45,   45,
       45,   45,   45,   45,  998,  124,  544,  126,  131,  998,
      125,   45,   45,   45,   45,  123,  132,   45,   45,  136,

      127,  133,  134,  998,  128,   45,   45,  137,  138,  623,
      141,  135,  998,   45,   45,  131,   45,   45,  140,   45,
       45,  624,  139,  132,   45,   45,  136,  998,  133,  134,
      143,  691,  142,  146,  137,  138,  623,  141,  135,  144,
       45,   45,  758,  145,  998,  140,   45,   45,  624,  139,
       45,   45,  149,   45,   45,  147,  998,  143,  691,  142,
      146,   45,   45,  150,   45,   45,  144,   45,   45,  758,
      145,  151,  998,   45,   45,  998,  148,  813,  153,  149,
      155,  998,  147,  152,   45,   45,   45,   45,   45,   45,
      150,   45,   45,  998,  154,  998,   45,   45,  151,  156,

      998,   45,   45,  148,  813,  153,  814,  155,   45,   45,
      152,  163,  166,   45,   45,  859,  158,  157,  162,   45,
       45,  154,  164,   45,   45,  998,  156,   45,   45,   45,
       45,   45,   45,  814,  165,   45,   45,  998,  163,  166,
      998,  167,  859,  158,  157,  162,  998,  168,  860,  164,
      169,   45,   45,  171,  891,  170,   45,   45,   45,   45,
      998,  165,  998,  172,   45,   45,  892,  173,  167,  174,
       45,   45,   45,   45,  168,  860,  175,  169,   45,   45,
      171,  891,  170,  179,   45,   45,   45,   45,  998,  176,
      172,   45,   45,  892,  173,  177,  174,  198,   45,   45,

      998,  186,  178,  175,   45,   45,  188,   45,   45,  998,
      179,  189,   45,   45,   45,   45,  176,  998,   45,   45,
      998,  191,  177,  187,  198,  190,  918,  192,  186,  178,
       45,   45,  998,  188,   45,   45,  194,  998,  189,  193,
       45,   45,   45,   45,  197,  180,  181,  182,  191,  200,
      187,  998,  190,  918,  192,   45,   45,  998,  195,   45,
       45,  183,  184,  194,  185,  196,  193,   45,   45,   45,
       45,  197,  180,  181,  182,  205,  200,   45,   45,   45,
       45,  203,   45,   45,  201,  195,  199,  998,  183,  184,
      998,  185,  196,   45,   45,  202,  204,  998,  207,   45,

       45,  998,  205,   45,   45,   45,   45,  206,  203,   45,
       45,  201,  998,  199,  209,   45,   45,  210,  998,  211,
      998,  208,  202,  204,  998,  207,  998,   45,   45,   45,
       45,  998,  216,  998,  206,  212,   45,   45,   45,   45,
      998,  209,   45,   45,  210,  998,  211,  213,  208,   45,
       45,  214,   45,   45,  998,  217,  998,   45,   45,  216,
      218,  219,  212,  998,   45,   45,   45,   45,  215,   45,
       45,  998,   45,   45,  213,  998,  221,  223,  214,  998,
       45,   45,  217,  998,  220,  222,  998,  218,  219,  228,
      225,  998,  224,  229,  998,  215,   45,   45,   45,   45,

      998,   45,   45,  221,  223,   45,   45,   45,   45,   45,
       45,  220,  222,  230,  231,  998,  228,  225,  232,  224,
      229,  998,  233,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,  234,   45,   45,  998,  235,
      230,  231,  998,  239,  236,  232,  998,  238,  998,  233,
      237,   45,   45,  241,  998,   45,   45,  998,  244,  998,
       45,   45,  234,  998,  240,  998,  235,   45,   45,  998,
      239,  236,  243,  998,  238,   45,   45,  237,   45,   45,
      241,  998,  242,   45,   45,  244,  998,   45,   45,   45,
       45,  240,  245,  998,  246,  247,   45,   45,  998,  243,

      250,  248,   45,   45,   45,   45,  251,   45,   45,  242,
       45,   45,  998,   45,   45,  249,  998,   45,   45,  245,
      998,  246,  247,   45,   45,   45,   45,  250,  248,  998,
      253,  255,  252,  251,  256,  998,  254,   45,   45,  998,
      257,  998,  249,  258,  259,  998,  260,   45,   45,  998,
      262,   45,   45,   45,   45,   45,   45,  253,  255,  252,
      998,  256,  998,  254,   45,   45,  264,  257,  261,  998,
      258,  259,  263,  260,  998,  265,  998,  262,   45,   45,
       45,   45,  998,   45,   45,   45,   45,  998,  266,   45,
       45,   45,   45,  264,  998,  261,  998,  268,  998,  263,

      269,  998,  265,   45,   45,   45,   45,  998,  272,  270,
      267,   45,   45,  271,  998,  266,  998,   45,   45,  998,
      273,  998,   45,   45,  268,   45,   45,  269,  998,   45,
       45,   45,   45,   45,   45,  272,  270,  267,  274,  998,
      271,  275,  998,  276,  277,   45,   45,  273,  278,  998,
       45,   45,  279,   45,   45,   45,   45,   45,   45,  998,
       45,   45,  283,  998,  280,  274,   45,   45,  275,  998,
      276,  277,  998,  285,  288,  278,  281,   45,   45,  279,
      998,  289,  998,  282,  998,   45,   45,  284,  998,  283,
      998,  280,  998,   45,   45,   45,   45,   45,   45,  998,

      285,  288,  998,  281,   45,   45,   45,   45,  289,  290,
      282,  300,   45,   45,  284,   45,   45,  310,  286,  287,
      286,  286,  286,  286,  286,  286,  286,  286,  293,   45,
       45,  301,   45,   45,   45,   45,  290,  314,  300,  311,
      998,   45,   45,  998,  310,   45,   45,   45,   45,  998,
      304,   45,   45,  305,  306,  293,   45,   45,  301,  998,
      303,  998,  302,  998,  314,  312,  311,  998,  307,  294,
      295,  313,   45,   45,  296,  308,  309,  304,   45,   45,
      305,  306,  998,  297,   45,   45,  298,  303,  299,  302,
       45,   45,  312,  316,  998,  307,  294,  295,  313,   45,

       45,  296,  308,  309,  318,  319,  320,  998,  315,  998,
      297,  317,  998,  298,  321,  299,   45,   45,   45,   45,
      316,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  323,   45,   45,  324,  315,  325,  998,  317,  326,
      998,  321,  322,  998,  328,   45,   45,   45,   45,  998,
      329,  327,  998,   45,   45,  998,  340,  998,  323,   45,
       45,  324,  998,  325,   45,   45,  326,   45,   45,  322,
      998,  328,   45,   45,  341,   45,   45,  329,  327,   45,
       45,  339,  998,  340,  998,  342,  998,  343,   45,   45,
      998,  344,  330,   45,   45,  331,  332,  333,  998,  345,

      334,  341,  998,  347,   45,   45,  998,  335,  339,  336,
      337,  338,  342,  998,  343,  998,  346,  348,  344,  330,
       45,   45,  331,  332,  333,  998,  345,  334,   45,   45,
      347,   45,   45,  998,  335,  349,  336,  337,  338,   45,
       45,   45,   45,  346,  348,  998,  352,   45,   45,   45,
       45,  350,   45,   45,   45,   45,  998,  353,  355,  351,
       45,   45,  349,   45,   45,   45,   45,   45,   45,   45,
       45,  359,  998,  352,  356,   45,   45,  360,  350,  354,
      998,   45,   45,  357,  353,  355,  351,  358,  361,  998,
      362,  998,  363,   45,   45,   45,   45,  998,  359,  365,

      998,  356,   45,   45,  360,  364,  354,   45,   45,  998,
      357,   45,   45,  998,  358,  361,  998,  362,  998,  363,
      366,   45,   45,   45,   45,  998,  365,  998,  371,   45,
       45,  367,  364,  998,  369,   45,   45,  368,  286,  286,
      286,  286,  286,  286,  998,  370,  998,  366,  998,   45,
       45,   45,   45,  998,  374,  371,   45,   45,  367,  375,
      998,  369,   45,   45,  368,   45,   45,  998,   45,   45,
       45,   45,  370,  376,   45,   45,   45,   45,   45,   45,
      998,  374,  379,  998,  377,  380,  375,  998,  381,  383,
      378,  998,   45,   45,   45,   45,   45,   45,  382,  998,

      376,   45,   45,  998,  385,  386,   45,   45,  998,  379,
      384,  377,  380,  389,  998,  381,  383,  378,   45,   45,
       45,   45,   45,   45,  387,  382,   45,   45,  998,  388,
      998,  385,  386,   45,   45,  391,  390,  384,  392,  998,
      389,  393,  998,  394,   45,   45,   45,   45,   45,   45,
      395,  387,   45,   45,   45,   45,  388,   45,   45,   45,
       45,  396,  391,  390,  398,  392,   45,   45,  393,  998,
      394,   45,   45,   45,   45,   45,   45,  395,   45,   45,
      397,  998,   45,   45,  998,  401,  399,  998,  396,   45,
       45,  398,   45,   45,   45,   45,  998,  400,  998,   45,

       45,  998,  403,   45,   45,  402,  998,  397,  405,  998,
       45,   45,  401,  399,  404,  998,  411,   45,   45,  407,
      409,  998,   45,   45,  400,  406,  408,   45,   45,  403,
       45,   45,  402,   45,   45,  405,  410,  413,   45,   45,
      415,  404,  998,  411,  414,  998,  407,  409,  412,   45,
       45,  998,  406,  408,  419,   45,   45,  998,  416,   45,
       45,   45,   45,  410,  413,   45,   45,  415,  421,  417,
      420,  414,   45,   45,  998,  412,   45,   45,   45,   45,
      998,  419,   45,   45,  998,  416,  418,   45,   45,  423,
      422,  427,  998,  424,  998,  421,  417,  420,   45,   45,

      426,   45,   45,  428,  425,   45,   45,  430,   45,   45,
      998,   45,   45,  418,  998,  429,  423,  422,  427,  998,
      424,   45,   45,  431,  436,   45,   45,  426,  998,  432,
      428,  425,  435,  434,  430,  998,  433,   45,   45,  998,
       45,   45,  429,   45,   45,   45,   45,  998,  438,  998,
      431,  436,  439,  440,  998,  437,  432,   45,   45,  435,
      434,   45,   45,  433,   45,   45,   45,   45,  998,  441,
      998,   45,   45,   45,   45,  438,   45,   45,  998,  439,
      440,  442,  437,  446,  447,  443,  444,   45,   45,  998,
      449,  998,   45,   45,  445,  998,  441,  998,  448,  998,

      451,   45,   45,   45,   45,   45,   45,  450,  442,  998,
      446,  447,  443,  444,   45,   45,  998,  449,  453,  998,
      454,  445,  452,   45,   45,  448,  998,  451,  998,   45,
       45,   45,   45,  460,  450,   45,   45,  998,  457,  458,
      459,   45,   45,   45,   45,  453,  461,  454,  998,  452,
       45,   45,  998,  463,   45,   45,  998,  462,   45,   45,
      460,   45,   45,   45,   45,  457,  458,  459,  465,   45,
       45,  998,  464,  461,   45,   45,   45,   45,   45,   45,
      463,  466,  467,  468,  462,   45,   45,  470,  469,  998,
       45,   45,  998,  471,  998,  465,   45,   45,  998,  464,

       45,   45,  474,   45,   45,  998,  472,  998,  466,  467,
      468,  473,  998,  475,  470,  469,   45,   45,   45,   45,
      471,  998,  476,  998,   45,   45,   45,   45,  477,  474,
       45,   45,  998,  472,  998,  479,   45,   45,  473,  998,
      475,  480,  478,   45,   45,  998,   45,   45,  998,  476,
      998,  482,  998,   45,   45,  477,  481,   45,   45,  998,
      483,  998,  479,  485,   45,   45,   45,   45,  480,  478,
      486,   45,   45,   45,   45,  484,   45,   45,  482,  998,
      489,  488,  998,  481,   45,   45,  493,  483,   45,   45,
      485,  487,   45,   45,  491,   45,   45,  486,   45,   45,

       45,   45,  484,  490,  998,  496,  492,  489,  488,   45,
       45,  495,  494,  493,   45,   45,  998,  499,  487,   45,
       45,  491,   45,   45,  498,  998,  497,  998,   45,   45,
      490,  500,  496,  492,   45,   45,  502,  501,  495,  494,
       45,   45,   45,   45,  499,  503,  504,  998,   45,   45,
      998,  498,  998,  497,   45,   45,  998,  506,  500,  507,
      998,  505,  998,  502,  501,  508,   45,   45,   45,   45,
       45,   45,  503,  504,   45,   45,  998,   45,   45,   45,
       45,  509,   45,   45,  506,  998,  507,  513,  505,  512,
      514,  510,  508,  998,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,  511,  998,  509,  516,
      998,   45,   45,  998,  513,  517,  512,  514,  510,  518,
      515,   45,   45,   45,   45,  998,  519,  520,   45,   45,
       45,   45,  522,  511,  521,  998,  516,  532,  998,  523,
       45,   45,  517,   45,   45,  536,  518,  515,  998,   45,
       45,   45,   45,  519,  520,  998,  533,   45,   45,  522,
      524,  521,   45,   45,  532,  998,  523,  534,  998,   45,
       45,  998,  536,  998,  537,  538,  998,  539,  998,   45,
       45,  535,  998,  533,   45,   45,  998,  524,   45,   45,
       45,   45,  541,  998,  534,  540,   45,   45,   45,   45,

      998,  537,  538,  998,  539,  525,  526,  998,  535,  998,
      542,   45,   45,  527,   45,   45,  528,  998,  529,  541,
       45,   45,  540,  530,   45,   45,  531,  378,  378,  378,
       45,   45,  525,  526,   45,   45,  998,  542,   45,   45,
      527,   45,   45,  528,  998,  529,  545,   45,   45,  546,
      530,  548,  998,  531,   45,   45,  998,   45,   45,  998,
      552,  998,  547,   45,   45,  549,  378,  378,  378,  998,
       45,   45,  998,  545,  553,  998,  546,  998,  548,   45,
       45,  550,   45,   45,  998,  551,  998,  552,  998,  547,
       45,   45,  549,   45,   45,   45,   45,   45,   45,   45,

       45,  553,  554,   45,   45,   45,   45,  998,  550,  557,
      558,  555,  551,   45,   45,  998,  559,   45,   45,  998,
      560,  556,   45,   45,   45,   45,   45,   45,  998,  554,
       45,   45,   45,   45,  562,  998,  557,  558,  555,   45,
       45,   45,   45,  559,  998,  561,  998,  560,  556,  563,
       45,   45,  998,  567,  566,  998,  565,  998,  568,   45,
       45,  562,  564,   45,   45,   45,   45,  998,  569,   45,
       45,  998,  561,  571,   45,   45,  563,   45,   45,  998,
      567,  566,  570,  565,  998,  568,  998,  572,  998,  564,
      998,   45,   45,   45,   45,  569,   45,   45,  573,  998,

      571,   45,   45,   45,   45,  998,   45,   45,  575,  570,
      574,   45,   45,  998,  572,   45,   45,  998,  577,  998,
       45,   45,  998,   45,   45,  573,   45,   45,  576,   45,
       45,   45,   45,   45,   45,  575,  579,  574,  578,  998,
       45,   45,  589,  585,  998,  577,   45,   45,  591,  586,
      587,   45,   45,  588,  998,  576,  998,  590,  592,  998,
       45,   45,  593,  579,  594,  578,   45,   45,  595,  589,
      585,   45,   45,   45,   45,  591,  586,  587,  998,  580,
      588,  596,  581,  582,  590,  592,   45,   45,  998,  593,
      598,  594,   45,   45,  583,  595,  998,  584,  597,   45,

       45,  998,   45,   45,  998,  599,  580,  998,  596,  581,
      582,   45,   45,   45,   45,  998,  600,  598,   45,   45,
      998,  583,   45,   45,  584,  597,  601,  998,  602,   45,
       45,  998,  599,  998,   45,   45,  603,   45,   45,  610,
       45,   45,  606,  600,  605,  998,  604,  608,   45,   45,
      609,   45,   45,  601,  998,  602,  998,   45,   45,  998,
       45,   45,  607,  603,  998,  613,  610,   45,   45,  606,
      611,  605,  614,  604,  608,  612,  998,  609,   45,   45,
      615,   45,   45,   45,   45,   45,   45,   45,   45,  607,
      616,  998,  613,   45,   45,   45,   45,  611,  619,  614,

      618,  998,  612,  998,   45,   45,  998,  615,  622,  998,
      617,   45,   45,   45,   45,   45,   45,  616,  620,  621,
      625,   45,   45,   45,   45,  619,  998,  618,   45,   45,
      626,   45,   45,   45,   45,  622,  998,  617,   45,   45,
      998,  629,  628,  630,  998,  620,  621,  625,   45,   45,
      632,   45,   45,  627,  998,  633,  998,  626,   45,   45,
      998,   45,   45,  631,  998,  634,   45,   45,  629,  628,
      630,   45,   45,   45,   45,   45,   45,  632,  998,  637,
      627,  998,  633,   45,   45,  636,   45,   45,   45,   45,
      631,  998,  634,  635,   45,   45,  998,   45,   45,   45,

       45,   45,   45,  998,   45,   45,  637,  998,  640,  998,
      638,  998,  636,  639,  642,   45,   45,  998,  641,  645,
      635,   45,   45,   45,   45,  643,   45,   45,  998,   45,
       45,   45,   45,  998,  644,  640,  998,  638,  998,  646,
      639,  642,  998,  649,  651,  641,  645,  998,  647,   45,
       45,  998,  643,   45,   45,  648,   45,   45,   45,   45,
      998,  644,  650,   45,   45,  998,  646,   45,   45,  998,
      649,  651,  998,  652,  998,  647,   45,   45,   45,   45,
       45,   45,  648,  653,  654,   45,   45,   45,   45,  650,
       45,   45,  655,   45,   45,   45,   45,  659,   45,   45,

      652,   45,   45,  656,   45,   45,  657,  660,   45,   45,
      653,  654,   45,   45,  998,  658,   45,   45,  663,  655,
      998,  662,  661,  998,  659,  664,   45,   45,  998,  665,
      656,   45,   45,  657,  660,   45,   45,   45,   45,   45,
       45,  998,  658,  666,  998,  663,   45,   45,  662,  661,
       45,   45,  664,   45,   45,  998,  665,  668,  667,   45,
       45,  669,  998,  670,  998,  671,  672,  998,   45,   45,
       45,   45,  674,   45,   45,   45,   45,   45,   45,  998,
      673,   45,   45,  998,  668,  667,   45,   45,  669,  675,
      670,  998,  671,  672,  998,  679,  676,   45,   45,  674,

       45,   45,  680,  998,  677,  998,  678,  673,   45,   45,
      681,  998,   45,   45,   45,   45,  675,   45,   45,   45,
       45,  684,  679,  676,   45,   45,  682,  683,  998,  680,
      998,  677,  998,  678,  998,  687,  998,  681,   45,   45,
      998,  685,  688,  686,   45,   45,   45,   45,  684,  998,
       45,   45,  690,  682,  683,   45,   45,   45,   45,   45,
       45,  998,  687,  693,  998,   45,   45,  998,  685,  688,
      686,  998,  695,   45,   45,  689,  694,  697,  698,  690,
       45,   45,  998,  699,  700,   45,   45,  696,   45,   45,
      693,   45,   45,   45,   45,   45,   45,   45,   45,  695,

       45,   45,  689,  694,  697,  698,   45,   45,  703,  702,
      704,  701,  705,  998,  696,  998,  707,   45,   45,   45,
       45,  998,   45,   45,  998,   45,   45,  706,  998,   45,
       45,   45,   45,  708,  998,  703,  702,  704,  701,  705,
       45,   45,  998,  707,  998,  710,   45,   45,  714,  709,
       45,   45,   45,   45,  706,  711,  712,  998,  715,  998,
      708,  713,   45,   45,  998,   45,   45,  716,   45,   45,
       45,   45,  710,   45,   45,  714,  709,   45,   45,   45,
       45,  998,  711,  712,  719,  715,  717,  998,  713,  721,
      998,  720,   45,   45,  716,  718,  723,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  719,  722,  717,   45,   45,  721,  998,  720,  724,
      726,  725,  718,  723,  727,   45,   45,  998,  728,  729,
      998,  731,   45,   45,  733,  730,   45,   45,  998,  722,
       45,   45,  734,   45,   45,  998,  724,  726,  725,  736,
      998,  727,  998,  732,  998,  728,  729,  998,  731,  737,
      998,  733,  730,  998,  735,   45,   45,   45,   45,  734,
       45,   45,  739,   45,   45,  998,  736,  998,  738,  998,
       45,   45,   45,   45,  740,  998,  737,  741,  998,   45,
       45,  735,   45,   45,  742,  743,   45,   45,  998,  739,

       45,   45,   45,   45,  998,  738,   45,   45,   45,   45,
      998,  740,  744,  745,  741,  998,  748,   45,   45,   45,
       45,  742,  743,  747,   45,   45,   45,   45,  746,  998,
       45,   45,   45,   45,  750,  752,   45,   45,  749,  744,
      745,  753,  998,  748,   45,   45,  998,  751,  755,  760,
      747,   45,   45,  754,  998,  746,  756,   45,   45,   45,
       45,  750,  752,   45,   45,  749,   45,   45,  753,  998,
      759,   45,   45,  998,  751,  755,  760,   45,   45,  764,
      754,  761,  998,  756,  998,   45,   45,  763,  378,  378,
      762,   45,   45,  998,  378,  378,  998,  759,   45,   45,

      998,   45,   45,  765,   45,   45,  764,  998,  761,   45,
       45,   45,   45,  998,  763,   45,   45,  762,  767,   45,
       45,  768,   45,   45,   45,   45,  769,  770,  766,  998,
      765,  998,  771,   45,   45,  773,   45,   45,   45,   45,
      998,  774,   45,   45,  998,  767,   45,   45,  768,   45,
       45,  772,  998,  769,  770,  766,  776,  775,  998,  771,
       45,   45,  773,   45,   45,   45,   45,  998,  774,  777,
      779,   45,   45,  778,   45,   45,   45,   45,  772,   45,
       45,  780,  782,  776,  775,   45,   45,   45,   45,  783,
       45,   45,   45,   45,   45,   45,  777,  779,  785,  998,

      778,  998,  781,  786,  784,   45,   45,  998,  780,  782,
       45,   45,  998,   45,   45,  787,  783,  788,   45,   45,
      790,  998,   45,   45,  789,  785,  792,  793,  794,  781,
      786,  784,   45,   45,  998,  795,  791,  998,   45,   45,
       45,   45,  787,  796,  788,   45,   45,  790,  798,  797,
      998,  789,  799,  792,  793,  794,  998,  800,  998,  801,
       45,   45,  795,  791,   45,   45,   45,   45,   45,   45,
      796,   45,   45,   45,   45,  798,  797,  802,  998,  799,
       45,   45,   45,   45,  800,  998,  801,  998,  803,  998,
       45,   45,   45,   45,   45,   45,  998,  804,   45,   45,

       45,   45,   45,   45,  802,  998,  805,  806,   45,   45,
       45,   45,   45,   45,  998,  803,  998,   45,   45,  807,
      998,   45,   45,  998,  804,  808,   45,   45,  998,  812,
      815,  998,  809,  805,  806,  816,  998,  811,  810,   45,
       45,   45,   45,   45,   45,  998,  807,  817,   45,   45,
       45,   45,  808,  820,   45,   45,  812,  815,  818,  809,
      819,  821,  816,  998,  811,  810,   45,   45,   45,   45,
      998,  822,   45,   45,  817,   45,   45,   45,   45,  998,
      820,   45,   45,   45,   45,  818,  998,  819,  821,  824,
       45,   45,   45,   45,   45,   45,  823,  998,  822,   45,

       45,   45,   45,   45,   45,  998,   45,   45,  998,   45,
       45,  825,  998,  826,   45,   45,  824,  827,  830,  998,
      828,   45,   45,  823,   45,   45,   45,   45,  998,  829,
       45,   45,   45,   45,   45,   45,  831,  832,  825,  833,
      826,   45,   45,  838,  827,  830,  998,  828,   45,   45,
      998,  835,  837,  998,  834,  836,  829,  839,   45,   45,
      998,  842,  998,  831,  832,  840,  833,  998,  841,  998,
      838,   45,   45,   45,   45,   45,   45,  998,  835,  837,
      998,  834,  836,  998,  839,  998,   45,   45,  842,   45,
       45,  998,  840,   45,   45,  841,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,  846,   45,   45,   45,
       45,  843,  844,   45,   45,  845,   45,   45,   45,   45,
      847,  851,   45,   45,  849,  998,  848,   45,   45,  998,
       45,   45,  850,  846,  852,  998,  855,  856,  843,  844,
       45,   45,  845,   45,   45,  998,  854,  847,  851,  853,
      998,  849,  857,  848,   45,   45,  998,  861,  998,  850,
      858,  852,  998,  855,  856,   45,   45,   45,   45,   45,
       45,   45,   45,  854,   45,   45,  853,  998,  862,  857,
      863,   45,   45,  998,  861,   45,   45,  858,  866,   45,
       45,  998,   45,   45,  867,  865,  998,  864,   45,   45,

       45,   45,   45,   45,  998,  862,  868,  863,   45,   45,
       45,   45,  869,  870,  998,  866,   45,   45,   45,   45,
      998,  867,  865,  998,  864,  998,  871,   45,   45,  998,
       45,   45,  998,  868,   45,   45,  872,   45,   45,  869,
      870,   45,   45,   45,   45,   45,   45,  873,  874,   45,
       45,   45,   45,  871,  875,  998,  878,   45,   45,   45,
       45,   45,   45,  872,  998,   45,   45,   45,   45,   45,
       45,  880,  998,  876,  873,  874,  877,  879,  881,   45,
       45,  875,  998,  878,   45,   45,  883,   45,   45,   45,
       45,   45,   45,  882,   45,   45,   45,   45,  880,  998,

      876,  885,  998,  877,  879,  881,  998,  887,  886,   45,
       45,  884,  998,  883,   45,   45,   45,   45,   45,   45,
      882,   45,   45,   45,   45,   45,   45,  998,  885,   45,
       45,   45,   45,  998,  887,  886,  888,  998,  884,  998,
      894,  889,  998,  890,  998,  893,   45,   45,  896,  895,
       45,   45,  998,   45,   45,   45,   45,   45,   45,  899,
       45,   45,  998,  888,   45,   45,  998,  894,  889,  998,
      890,  998,  893,  998,  897,  896,  895,  898,  998,  900,
       45,   45,   45,   45,  901,  998,  899,   45,   45,   45,
       45,   45,   45,   45,   45,  998,  902,  903,   45,   45,

      905,  897,   45,   45,  898,  998,  900,   45,   45,  998,
      906,  901,   45,   45,  907,  998,  904,  908,   45,   45,
      998,  911,  998,  902,  903,  998,  910,  905,  998,  909,
       45,   45,   45,   45,   45,   45,  998,  906,   45,   45,
      998,  907,  998,  904,  908,   45,   45,  914,  911,  912,
      913,   45,   45,  910,   45,   45,  909,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  915,
       45,   45,   45,   45,  914,  916,  912,  913,  286,  998,
      917,  998,  920,  998,   45,   45,   45,   45,  998,  923,
      919,   45,   45,  998,  922,  998,  915,  998,  921,   45,

       45,  998,  916,   45,   45,  286,  998,  917,  998,  920,
      924,   45,   45,   45,   45,  998,  923,  919,   45,   45,
      925,  922,   45,   45,  927,  921,   45,   45,  998,  926,
      998,   45,   45,  998,   45,   45,  998,  924,  998,   45,
       45,   45,   45,  930,   45,   45,  998,  925,  998,  928,
      998,  927,  932,  933,  929,  931,  926,  998,   45,   45,
       45,   45,   45,   45,  998,  934,  998,  935,   45,   45,
      930,   45,   45,   45,   45,  998,  928,   45,   45,  932,
      933,  929,  931,  936,   45,   45,   45,   45,  998,  938,
      998,  937,  934,  998,  935,  998,   45,   45,  939,  772,

      772,  772,  998,  941,  940,   45,   45,   45,   45,  998,
      936,   45,   45,   45,   45,  998,  938,  998,  937,   45,
       45,   45,   45,  998,  943,  939,   45,   45,  998,  942,
      941,  940,  998,   45,   45,  998,  944,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,  946,  945,   45,
       45,  943,   45,   45,   45,   45,  942,  948,  998,   45,
       45,   45,   45,  944,  947,  953,   45,   45,   45,   45,
       45,   45,  998,  949,  946,  945,  950,  998,  951,  952,
      954,  957,   45,   45,  948,   45,   45,  955,   45,   45,
      998,  947,  953,   45,   45,  960,  956,  958,   45,   45,

      949,   45,   45,  950,  998,  951,  952,  954,  957,  959,
       45,   45,   45,   45,  955,   45,   45,  998,  961,   45,
       45,  998,  960,  956,  958,  965,  963,  964,  962,   45,
       45,   45,   45,  966,   45,   45,  959,   45,   45,  998,
      967,   45,   45,  998,  970,  961,   45,   45,  998,  972,
      968,  998,  965,  963,  964,  962,  973,   45,   45,  998,
      966,  998,  969,  971,   45,   45,  998,  967,   45,   45,
      998,  970,  975,   45,   45,  998,  972,  968,   45,   45,
       45,   45,  998,  973,  998,   45,   45,  974,  998,  969,
      971,  998,   45,   45,  998,  976,   45,   45,  998,  975,

       45,   45,   45,   45,  982,   45,   45,  998,  981,  984,
       45,   45,  983,  985,  974,  986,   45,   45,  987,   45,
       45,  998,  976,   45,   45,   45,   45,  977,  977,  977,
      977,  982,   45,   45,  998,  981,  984,  978,  998,  983,
      985,  979,  986,  998,  980,  987,  998,  988,   45,   45,
       45,   45,   45,   45,  998,   45,   45,   45,   45,   45,
       45,   45,   45,  998,  978,   45,   45,  998,  979,   45,
       45,  980,  993,  994,  988,   45,   45,  998,  995,  989,
       45,   45,   45,   45,  998,   45,   45,   45,   45,   45,
       45,  998,  998,  998,  998,  998,  998,  998,  998,  993,

      994,  998,  998,  998,  997,  995,  989,   45,   45,  996,
      998,  977,  977,  977,  977,  998,  998,  998,  998,  998,
      998,  990,  998,  998,  998,  991,  998,  998,  992,  998,
      998,  997,  998,  998,  998,  998,  996,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  990,  998,
      998,  998,  991,  998,  998,  992,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   43,   43,  998,  998,   43,
       46,   46,   46,   46,   46,   46,   46,   94,   94,   94,
       94,   94,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   99,  998,   99,   99,   99,   99,   99,   99,   99,

      100,  998,  100,  102,  102,  102,   45,   45,   45,   45,
       45,   45,   45,    5,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998
    } ;

static const flex_int16_t yy_chk[4687] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    4,    4,    4,    4,
        7,    9,    7,   10,   11,   12,   10,   13,   13,   14,
       14,   15,   15,   16,   16,  691,   17,   17,   19,   19,

       20,   20,   37,   13,   18,   18,   29,   29,    9,   39,
       16,   13,   13,   14,   16,   15,   14,   18,   15,   11,
       12,   17,   14,   29,   15,   18,   20,   29,   18,   37,
       13,   18,   46,   46,   23,   23,   39,   16,   13,   13,
       14,   16,   15,   14,   18,   15,   11,   12,   17,   14,
       29,   15,   18,   20,   29,   18,   21,   21,   18,   22,
       22,   23,   42,   24,   24,   25,   25,  624,   38,   21,
       38,   98,   22,   97,   28,   28,   24,   21,   25,   95,
       22,   40,   25,   21,   24,  199,  199,   96,   23,   42,
       24,  100,   22,   24,   49,   49,   21,   48,   48,   22,

       28,   30,   30,   24,   21,   25,   95,   22,   49,   25,
       21,   24,   27,   27,   96,   31,   31,   24,  100,   22,
       24,   26,   26,   47,   47,   48,    5,   28,   30,   27,
      159,   30,   31,   31,   26,   49,    0,   50,   50,   47,
      160,   26,   27,   51,   51,   26,    0,   27,  226,   26,
       31,   26,   48,   26,   50,   30,   27,  159,   30,   31,
       31,   26,   52,   52,   53,   53,   47,  160,   26,   27,
       54,   54,   26,   51,   27,  226,   26,   31,   26,    0,
       26,   50,   55,   55,    0,   53,  227,   52,   56,   56,
        0,   57,   57,  291,   54,   54,   58,   58,   68,   68,

       51,   59,   59,   60,   60,    0,   55,   61,   61,   57,
       62,   62,   53,  227,   52,    0,   56,   58,  292,   56,
      291,   54,   54,   57,   68,   59,   68,   60,  372,   62,
      373,   63,   63,   55,   61,  455,   57,   64,   64,   65,
       65,   67,   67,   56,   58,  292,   56,   63,   66,   66,
       57,   68,   59,   68,   60,  372,   62,  373,   65,  456,
       67,   61,  455,   66,   69,   69,   70,   70,   64,    0,
       71,   71,    0,   67,   63,   72,   72,   67,   73,   73,
       74,   74,   75,   75,    0,   65,  456,   67,   69,    0,
       66,   76,   76,   77,   77,   64,   70,   78,   78,   73,

       67,   71,   71,    0,   67,   79,   79,   74,   75,  543,
       78,   72,    0,   80,   80,   69,   82,   82,   77,   84,
       84,  544,   76,   70,   81,   81,   73,    0,   71,   71,
       80,  623,   79,   82,   74,   75,  543,   78,   72,   81,
       83,   83,  692,   81,    0,   77,   85,   85,  544,   76,
       86,   86,   84,   87,   87,   83,    0,   80,  623,   79,
       82,   88,   88,   85,   89,   89,   81,   90,   90,  692,
       81,   86,    0,   91,   91,    0,   83,  757,   88,   84,
       90,    0,   83,   87,   92,   92,   93,   93,  103,  103,
       85,  104,  104,    0,   89,    0,  107,  107,   86,   91,

        0,  105,  105,   83,  757,   88,  758,   90,  106,  106,
       87,  104,  107,  108,  108,  813,   93,   92,  103,  109,
      109,   89,  105,  110,  110,    0,   91,  111,  111,  112,
      112,  113,  113,  758,  106,  114,  114,    0,  104,  107,
        0,  108,  813,   93,   92,  103,    0,  109,  814,  105,
      110,  115,  115,  112,  859,  111,  116,  116,  117,  117,
        0,  106,    0,  113,  118,  118,  860,  114,  108,  115,
      120,  120,  132,  132,  109,  814,  116,  110,  119,  119,
      112,  859,  111,  120,  122,  122,  124,  124,    0,  117,
      113,  123,  123,  860,  114,  118,  115,  132,  125,  125,

        0,  122,  119,  116,  127,  127,  124,  126,  126,    0,
      120,  125,  131,  131,  128,  128,  117,    0,  129,  129,
        0,  127,  118,  123,  132,  126,  892,  128,  122,  119,
      121,  121,    0,  124,  134,  134,  129,    0,  125,  128,
      130,  130,  139,  139,  131,  121,  121,  121,  127,  134,
      123,    0,  126,  892,  128,  133,  133,    0,  130,  137,
      137,  121,  121,  129,  121,  130,  128,  135,  135,  136,
      136,  131,  121,  121,  121,  139,  134,  138,  138,  140,
      140,  137,  141,  141,  135,  130,  133,    0,  121,  121,
        0,  121,  130,  142,  142,  136,  138,    0,  141,  143,

      143,    0,  139,  144,  144,  145,  145,  140,  137,  146,
      146,  135,    0,  133,  143,  149,  149,  144,    0,  145,
        0,  142,  136,  138,    0,  141,    0,  147,  147,  152,
      152,    0,  149,    0,  140,  146,  148,  148,  150,  150,
        0,  143,  151,  151,  144,    0,  145,  147,  142,  153,
      153,  148,  154,  154,    0,  150,    0,  155,  155,  149,
      151,  152,  146,    0,  156,  156,  157,  157,  148,  158,
      158,    0,  162,  162,  147,    0,  154,  156,  148,    0,
      163,  163,  150,    0,  153,  155,    0,  151,  152,  162,
      158,    0,  157,  163,    0,  148,  164,  164,  165,  165,

        0,  166,  166,  154,  156,  167,  167,  168,  168,  169,
      169,  153,  155,  164,  165,    0,  162,  158,  166,  157,
      163,    0,  167,  170,  170,  171,  171,  172,  172,  173,
      173,  174,  174,  178,  178,  168,  175,  175,    0,  169,
      164,  165,    0,  173,  170,  166,    0,  172,    0,  167,
      171,  176,  176,  175,    0,  177,  177,    0,  178,    0,
      179,  179,  168,    0,  174,    0,  169,  180,  180,    0,
      173,  170,  177,    0,  172,  182,  182,  171,  181,  181,
      175,    0,  176,  183,  183,  178,    0,  184,  184,  185,
      185,  174,  179,    0,  180,  181,  186,  186,    0,  177,

      184,  182,  187,  187,  188,  188,  185,  189,  189,  176,
      191,  191,    0,  190,  190,  183,    0,  192,  192,  179,
        0,  180,  181,  193,  193,  194,  194,  184,  182,    0,
      187,  189,  186,  185,  190,    0,  188,  196,  196,    0,
      191,    0,  183,  192,  193,    0,  194,  195,  195,    0,
      196,  197,  197,  198,  198,  200,  200,  187,  189,  186,
        0,  190,    0,  188,  201,  201,  198,  191,  195,    0,
      192,  193,  197,  194,    0,  200,    0,  196,  202,  202,
      203,  203,    0,  204,  204,  205,  205,    0,  201,  206,
      206,  207,  207,  198,    0,  195,    0,  203,    0,  197,

      204,    0,  200,  208,  208,  209,  209,    0,  207,  205,
      202,  211,  211,  206,    0,  201,    0,  210,  210,    0,
      208,    0,  213,  213,  203,  214,  214,  204,    0,  212,
      212,  215,  215,  216,  216,  207,  205,  202,  209,    0,
      206,  210,    0,  211,  212,  219,  219,  208,  213,    0,
      217,  217,  214,  218,  218,  220,  220,  221,  221,    0,
      223,  223,  219,    0,  215,  209,  224,  224,  210,    0,
      211,  212,    0,  221,  223,  213,  217,  225,  225,  214,
        0,  224,    0,  218,    0,  230,  230,  220,    0,  219,
        0,  215,    0,  236,  236,  243,  243,  228,  228,    0,

      221,  223,    0,  217,  231,  231,  240,  240,  224,  225,
      218,  230,  237,  237,  220,  222,  222,  236,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  228,  234,
      234,  231,  232,  232,  233,  233,  225,  240,  230,  237,
        0,  235,  235,    0,  236,  286,  286,  239,  239,    0,
      234,  238,  238,  234,  235,  228,  229,  229,  231,    0,
      233,    0,  232,    0,  240,  238,  237,    0,  235,  229,
      229,  239,  242,  242,  229,  235,  235,  234,  241,  241,
      234,  235,    0,  229,  244,  244,  229,  233,  229,  232,
      246,  246,  238,  242,    0,  235,  229,  229,  239,  245,

      245,  229,  235,  235,  245,  245,  245,    0,  241,    0,
      229,  244,    0,  229,  246,  229,  247,  247,  248,  248,
      242,  251,  251,  249,  249,  250,  250,  252,  252,  253,
      253,  248,  256,  256,  248,  241,  249,    0,  244,  250,
        0,  246,  247,    0,  252,  289,  289,  255,  255,    0,
      253,  251,    0,  257,  257,    0,  256,    0,  248,  259,
      259,  248,    0,  249,  258,  258,  250,  260,  260,  247,
        0,  252,  263,  263,  257,  261,  261,  253,  251,  254,
      254,  255,    0,  256,    0,  258,    0,  259,  262,  262,
        0,  260,  254,  264,  264,  254,  254,  254,    0,  261,

      254,  257,    0,  263,  265,  265,    0,  254,  255,  254,
      254,  254,  258,    0,  259,    0,  262,  264,  260,  254,
      266,  266,  254,  254,  254,    0,  261,  254,  267,  267,
      263,  268,  268,    0,  254,  265,  254,  254,  254,  269,
      269,  271,  271,  262,  264,    0,  268,  270,  270,  272,
      272,  266,  273,  273,  275,  275,    0,  269,  271,  267,
      276,  276,  265,  274,  274,  279,  279,  277,  277,  278,
      278,  275,    0,  268,  272,  280,  280,  276,  266,  270,
        0,  281,  281,  273,  269,  271,  267,  274,  277,    0,
      278,    0,  279,  282,  282,  283,  283,    0,  275,  281,

        0,  272,  285,  285,  276,  280,  270,  284,  284,    0,
      273,  290,  290,    0,  274,  277,    0,  278,    0,  279,
      282,  288,  288,  293,  293,    0,  281,    0,  290,  294,
      294,  283,  280,    0,  285,  287,  287,  284,  287,  287,
      287,  287,  287,  287,    0,  288,    0,  282,    0,  295,
      295,  296,  296,    0,  293,  290,  300,  300,  283,  294,
        0,  285,  297,  297,  284,  298,  298,    0,  299,  299,
      301,  301,  288,  295,  302,  302,  303,  303,  304,  304,
        0,  293,  298,    0,  296,  299,  294,    0,  300,  302,
      297,    0,  305,  305,  306,  306,  308,  308,  301,    0,

      295,  307,  307,    0,  304,  305,  309,  309,    0,  298,
      303,  296,  299,  308,    0,  300,  302,  297,  310,  310,
      312,  312,  311,  311,  306,  301,  313,  313,    0,  307,
        0,  304,  305,  314,  314,  310,  309,  303,  311,    0,
      308,  312,    0,  313,  315,  315,  316,  316,  317,  317,
      314,  306,  318,  318,  319,  319,  307,  320,  320,  321,
      321,  315,  310,  309,  317,  311,  322,  322,  312,    0,
      313,  323,  323,  324,  324,  325,  325,  314,  326,  326,
      316,    0,  327,  327,    0,  323,  321,    0,  315,  329,
      329,  317,  328,  328,  330,  330,    0,  322,    0,  331,

      331,    0,  326,  333,  333,  325,    0,  316,  328,    0,
      332,  332,  323,  321,  327,    0,  333,  335,  335,  330,
      331,    0,  334,  334,  322,  329,  330,  336,  336,  326,
      337,  337,  325,  339,  339,  328,  332,  335,  340,  340,
      336,  327,    0,  333,  335,    0,  330,  331,  334,  338,
      338,    0,  329,  330,  339,  341,  341,    0,  337,  342,
      342,  344,  344,  332,  335,  343,  343,  336,  341,  338,
      340,  335,  345,  345,    0,  334,  346,  346,  347,  347,
        0,  339,  348,  348,    0,  337,  338,  350,  350,  343,
      342,  347,    0,  344,    0,  341,  338,  340,  349,  349,

      346,  352,  352,  348,  345,  353,  353,  350,  351,  351,
        0,  354,  354,  338,    0,  349,  343,  342,  347,    0,
      344,  356,  356,  351,  354,  355,  355,  346,    0,  351,
      348,  345,  353,  352,  350,    0,  351,  357,  357,    0,
      358,  358,  349,  359,  359,  360,  360,    0,  356,    0,
      351,  354,  357,  358,    0,  355,  351,  362,  362,  353,
      352,  361,  361,  351,  363,  363,  364,  364,    0,  359,
        0,  365,  365,  366,  366,  356,  367,  367,    0,  357,
      358,  360,  355,  364,  365,  361,  362,  368,  368,    0,
      367,    0,  369,  369,  363,    0,  359,    0,  366,    0,

      368,  370,  370,  371,  371,  374,  374,  367,  360,    0,
      364,  365,  361,  362,  375,  375,    0,  367,  370,    0,
      371,  363,  369,  378,  378,  366,    0,  368,    0,  376,
      376,  377,  377,  375,  367,  379,  379,    0,  374,  374,
      374,  380,  380,  381,  381,  370,  376,  371,    0,  369,
      382,  382,    0,  379,  383,  383,    0,  377,  384,  384,
      375,  386,  386,  388,  388,  374,  374,  374,  381,  385,
      385,    0,  380,  376,  387,  387,  389,  389,  391,  391,
      379,  383,  384,  384,  377,  392,  392,  386,  385,    0,
      390,  390,    0,  387,    0,  381,  394,  394,    0,  380,

      393,  393,  392,  395,  395,    0,  389,    0,  383,  384,
      384,  390,    0,  393,  386,  385,  396,  396,  397,  397,
      387,    0,  394,    0,  398,  398,  399,  399,  395,  392,
      400,  400,    0,  389,    0,  397,  401,  401,  390,    0,
      393,  398,  396,  402,  402,    0,  403,  403,    0,  394,
        0,  400,    0,  404,  404,  395,  399,  405,  405,    0,
      401,    0,  397,  403,  406,  406,  407,  407,  398,  396,
      404,  408,  408,  410,  410,  402,  409,  409,  400,    0,
      407,  406,    0,  399,  413,  413,  410,  401,  411,  411,
      403,  405,  412,  412,  409,  414,  414,  404,  415,  415,

      416,  416,  402,  408,    0,  413,  409,  407,  406,  418,
      418,  412,  411,  410,  417,  417,    0,  416,  405,  419,
      419,  409,  421,  421,  415,    0,  414,    0,  420,  420,
      408,  417,  413,  409,  422,  422,  419,  418,  412,  411,
      423,  423,  424,  424,  416,  420,  421,    0,  425,  425,
        0,  415,    0,  414,  426,  426,    0,  423,  417,  424,
        0,  422,    0,  419,  418,  425,  427,  427,  428,  428,
      429,  429,  420,  421,  430,  430,    0,  431,  431,  433,
      433,  426,  432,  432,  423,    0,  424,  430,  422,  429,
      431,  427,  425,    0,  434,  434,  436,  436,  437,  437,

      435,  435,  440,  440,  444,  444,  428,    0,  426,  433,
        0,  438,  438,    0,  430,  434,  429,  431,  427,  435,
      432,  439,  439,  441,  441,    0,  436,  438,  442,  442,
      447,  447,  440,  428,  439,    0,  433,  444,    0,  441,
      445,  445,  434,  448,  448,  447,  435,  432,    0,  446,
      446,  449,  449,  436,  438,    0,  445,  450,  450,  440,
      442,  439,  453,  453,  444,    0,  441,  446,    0,  451,
      451,    0,  447,    0,  448,  449,    0,  450,    0,  452,
      452,  446,    0,  445,  454,  454,    0,  442,  443,  443,
      457,  457,  452,    0,  446,  451,  458,  458,  459,  459,

        0,  448,  449,    0,  450,  443,  443,    0,  446,    0,
      454,  463,  463,  443,  469,  469,  443,    0,  443,  452,
      461,  461,  451,  443,  460,  460,  443,  460,  460,  460,
      464,  464,  443,  443,  462,  462,    0,  454,  465,  465,
      443,  466,  466,  443,    0,  443,  461,  468,  468,  462,
      443,  465,    0,  443,  467,  467,    0,  470,  470,    0,
      468,    0,  464,  471,  471,  466,  471,  471,  471,    0,
      472,  472,    0,  461,  470,    0,  462,    0,  465,  473,
      473,  467,  474,  474,    0,  467,    0,  468,    0,  464,
      475,  475,  466,  476,  476,  479,  479,  477,  477,  480,

      480,  470,  472,  478,  478,  481,  481,    0,  467,  476,
      477,  473,  467,  482,  482,    0,  478,  483,  483,    0,
      479,  475,  484,  484,  485,  485,  486,  486,    0,  472,
      488,  488,  489,  489,  483,    0,  476,  477,  473,  487,
      487,  490,  490,  478,    0,  482,    0,  479,  475,  485,
      491,  491,    0,  489,  488,    0,  487,    0,  490,  493,
      493,  483,  486,  494,  494,  492,  492,    0,  491,  495,
      495,    0,  482,  493,  496,  496,  485,  497,  497,    0,
      489,  488,  492,  487,    0,  490,    0,  494,    0,  486,
        0,  498,  498,  499,  499,  491,  500,  500,  497,    0,

      493,  501,  501,  502,  502,    0,  503,  503,  499,  492,
      498,  505,  505,    0,  494,  506,  506,    0,  501,    0,
      507,  507,    0,  508,  508,  497,  509,  509,  500,  510,
      510,  511,  511,  512,  512,  499,  503,  498,  502,    0,
      514,  514,  509,  505,    0,  501,  513,  513,  511,  506,
      507,  515,  515,  508,    0,  500,    0,  510,  512,    0,
      516,  516,  513,  503,  514,  502,  504,  504,  515,  509,
      505,  517,  517,  518,  518,  511,  506,  507,    0,  504,
      508,  516,  504,  504,  510,  512,  519,  519,    0,  513,
      518,  514,  523,  523,  504,  515,    0,  504,  517,  520,

      520,    0,  521,  521,    0,  519,  504,    0,  516,  504,
      504,  522,  522,  524,  524,    0,  520,  518,  525,  525,
        0,  504,  529,  529,  504,  517,  521,    0,  522,  526,
      526,    0,  519,    0,  527,  527,  522,  528,  528,  529,
      530,  530,  526,  520,  525,    0,  524,  527,  532,  532,
      528,  533,  533,  521,    0,  522,    0,  531,  531,    0,
      535,  535,  526,  522,    0,  532,  529,  534,  534,  526,
      530,  525,  533,  524,  527,  531,    0,  528,  536,  536,
      534,  537,  537,  538,  538,  539,  539,  540,  540,  526,
      535,    0,  532,  541,  541,  542,  542,  530,  539,  533,

      538,    0,  531,    0,  545,  545,    0,  534,  542,    0,
      536,  546,  546,  547,  547,  549,  549,  535,  540,  541,
      545,  548,  548,  550,  550,  539,    0,  538,  551,  551,
      547,  552,  552,  553,  553,  542,    0,  536,  554,  554,
        0,  550,  549,  551,    0,  540,  541,  545,  555,  555,
      553,  556,  556,  548,    0,  554,    0,  547,  557,  557,
        0,  558,  558,  552,    0,  555,  560,  560,  550,  549,
      551,  559,  559,  561,  561,  562,  562,  553,    0,  560,
      548,    0,  554,  564,  564,  559,  563,  563,  565,  565,
      552,    0,  555,  558,  566,  566,    0,  567,  567,  568,

      568,  569,  569,    0,  570,  570,  560,    0,  564,    0,
      561,    0,  559,  563,  567,  571,  571,    0,  565,  570,
      558,  572,  572,  573,  573,  568,  574,  574,    0,  575,
      575,  576,  576,    0,  569,  564,    0,  561,    0,  571,
      563,  567,    0,  574,  576,  565,  570,    0,  572,  577,
      577,    0,  568,  579,  579,  573,  578,  578,  580,  580,
        0,  569,  575,  581,  581,    0,  571,  582,  582,    0,
      574,  576,    0,  578,    0,  572,  583,  583,  584,  584,
      586,  586,  573,  580,  581,  585,  585,  587,  587,  575,
      588,  588,  582,  589,  589,  591,  591,  586,  590,  590,

      578,  592,  592,  583,  595,  595,  584,  589,  593,  593,
      580,  581,  594,  594,    0,  585,  599,  599,  592,  582,
        0,  591,  590,    0,  586,  593,  596,  596,    0,  594,
      583,  597,  597,  584,  589,  598,  598,  600,  600,  602,
      602,    0,  585,  595,    0,  592,  601,  601,  591,  590,
      604,  604,  593,  603,  603,    0,  594,  597,  596,  605,
      605,  598,    0,  601,    0,  602,  603,    0,  606,  606,
      607,  607,  605,  608,  608,  609,  609,  610,  610,    0,
      604,  611,  611,    0,  597,  596,  613,  613,  598,  606,
      601,    0,  602,  603,    0,  610,  607,  612,  612,  605,

      614,  614,  611,    0,  608,    0,  609,  604,  616,  616,
      612,    0,  615,  615,  617,  617,  606,  618,  618,  619,
      619,  616,  610,  607,  620,  620,  614,  615,    0,  611,
        0,  608,    0,  609,    0,  619,    0,  612,  622,  622,
        0,  617,  620,  618,  621,  621,  625,  625,  616,    0,
      626,  626,  622,  614,  615,  627,  627,  628,  628,  629,
      629,    0,  619,  625,    0,  630,  630,    0,  617,  620,
      618,    0,  627,  633,  633,  621,  626,  629,  630,  622,
      631,  631,    0,  631,  631,  632,  632,  628,  636,  636,
      625,  634,  634,  635,  635,  637,  637,  638,  638,  627,

      639,  639,  621,  626,  629,  630,  640,  640,  634,  633,
      635,  632,  636,    0,  628,    0,  639,  641,  641,  642,
      642,    0,  643,  643,    0,  644,  644,  637,    0,  645,
      645,  646,  646,  640,    0,  634,  633,  635,  632,  636,
      647,  647,    0,  639,    0,  642,  648,  648,  646,  641,
      649,  649,  651,  651,  637,  643,  644,    0,  647,    0,
      640,  645,  650,  650,    0,  652,  652,  648,  655,  655,
      653,  653,  642,  654,  654,  646,  641,  656,  656,  657,
      657,    0,  643,  644,  653,  647,  650,    0,  645,  655,
        0,  654,  658,  658,  648,  652,  657,  659,  659,  660,

      660,  662,  662,  663,  663,  664,  664,  661,  661,  666,
      666,  653,  656,  650,  665,  665,  655,    0,  654,  658,
      660,  659,  652,  657,  661,  667,  667,    0,  662,  663,
        0,  665,  668,  668,  666,  664,  669,  669,    0,  656,
      672,  672,  667,  670,  670,    0,  658,  660,  659,  669,
        0,  661,    0,  665,    0,  662,  663,    0,  665,  670,
        0,  666,  664,    0,  668,  671,  671,  673,  673,  667,
      675,  675,  672,  674,  674,    0,  669,    0,  671,    0,
      676,  676,  678,  678,  673,    0,  670,  674,    0,  677,
      677,  668,  679,  679,  675,  676,  680,  680,    0,  672,

      682,  682,  681,  681,    0,  671,  683,  683,  684,  684,
        0,  673,  677,  678,  674,    0,  682,  685,  685,  686,
      686,  675,  676,  681,  687,  687,  688,  688,  680,    0,
      689,  689,  690,  690,  684,  686,  694,  694,  683,  677,
      678,  687,    0,  682,  693,  693,    0,  685,  689,  694,
      681,  695,  695,  688,    0,  680,  690,  696,  696,  697,
      697,  684,  686,  698,  698,  683,  701,  701,  687,    0,
      693,  702,  702,    0,  685,  689,  694,  703,  703,  701,
      688,  695,    0,  690,    0,  699,  699,  698,  699,  699,
      697,  700,  700,    0,  700,  700,    0,  693,  704,  704,

        0,  705,  705,  703,  706,  706,  701,    0,  695,  707,
      707,  708,  708,    0,  698,  709,  709,  697,  705,  710,
      710,  706,  711,  711,  712,  712,  707,  708,  704,    0,
      703,    0,  709,  714,  714,  711,  713,  713,  715,  715,
        0,  712,  716,  716,    0,  705,  718,  718,  706,  719,
      719,  710,    0,  707,  708,  704,  715,  713,    0,  709,
      717,  717,  711,  720,  720,  722,  722,    0,  712,  716,
      719,  721,  721,  717,  723,  723,  724,  724,  710,  725,
      725,  720,  722,  715,  713,  726,  726,  728,  728,  723,
      727,  727,  729,  729,  740,  740,  716,  719,  726,    0,

      717,    0,  721,  727,  724,  730,  730,    0,  720,  722,
      731,  731,    0,  732,  732,  727,  723,  728,  735,  735,
      730,    0,  733,  733,  729,  726,  732,  732,  732,  721,
      727,  724,  734,  734,    0,  733,  731,    0,  736,  736,
      737,  737,  727,  733,  728,  738,  738,  730,  735,  734,
        0,  729,  736,  732,  732,  732,    0,  737,    0,  738,
      739,  739,  733,  731,  741,  741,  742,  742,  743,  743,
      733,  744,  744,  745,  745,  735,  734,  739,    0,  736,
      746,  746,  747,  747,  737,    0,  738,    0,  741,    0,
      748,  748,  749,  749,  750,  750,    0,  746,  751,  751,

      752,  752,  753,  753,  739,    0,  747,  748,  754,  754,
      755,  755,  756,  756,    0,  741,    0,  759,  759,  749,
        0,  760,  760,    0,  746,  750,  761,  761,    0,  756,
      759,    0,  753,  747,  748,  760,    0,  755,  754,  764,
      764,  762,  762,  763,  763,    0,  749,  761,  765,  765,
      766,  766,  750,  764,  767,  767,  756,  759,  762,  753,
      763,  765,  760,    0,  755,  754,  768,  768,  769,  769,
        0,  766,  770,  770,  761,  771,  771,  772,  772,    0,
      764,  773,  773,  774,  774,  762,    0,  763,  765,  770,
      775,  775,  776,  776,  777,  777,  768,    0,  766,  778,

      778,  779,  779,  780,  780,    0,  781,  781,    0,  782,
      782,  771,    0,  773,  784,  784,  770,  775,  779,    0,
      777,  783,  783,  768,  785,  785,  786,  786,    0,  778,
      787,  787,  788,  788,  789,  789,  780,  781,  771,  782,
      773,  790,  790,  787,  775,  779,    0,  777,  791,  791,
        0,  784,  786,    0,  783,  785,  778,  788,  792,  792,
        0,  791,    0,  780,  781,  789,  782,    0,  790,    0,
      787,  793,  793,  794,  794,  795,  795,    0,  784,  786,
        0,  783,  785,    0,  788,    0,  796,  796,  791,  797,
      797,    0,  789,  798,  798,  790,  799,  799,  800,  800,

      801,  801,  802,  802,  803,  803,  798,  805,  805,  804,
      804,  795,  796,  806,  806,  797,  807,  807,  808,  808,
      799,  803,  809,  809,  801,    0,  800,  810,  810,    0,
      811,  811,  802,  798,  804,    0,  808,  809,  795,  796,
      812,  812,  797,  815,  815,    0,  807,  799,  803,  806,
        0,  801,  810,  800,  816,  816,    0,  815,    0,  802,
      811,  804,    0,  808,  809,  818,  818,  817,  817,  819,
      819,  820,  820,  807,  821,  821,  806,    0,  816,  810,
      817,  822,  822,    0,  815,  823,  823,  811,  821,  824,
      824,    0,  826,  826,  822,  820,    0,  818,  825,  825,

      827,  827,  828,  828,    0,  816,  823,  817,  829,  829,
      830,  830,  825,  826,    0,  821,  831,  831,  833,  833,
        0,  822,  820,    0,  818,    0,  827,  832,  832,    0,
      834,  834,    0,  823,  835,  835,  830,  836,  836,  825,
      826,  837,  837,  839,  839,  838,  838,  831,  832,  840,
      840,  841,  841,  827,  834,    0,  839,  842,  842,  843,
      843,  844,  844,  830,    0,  845,  845,  846,  846,  847,
      847,  842,    0,  837,  831,  832,  838,  841,  845,  848,
      848,  834,    0,  839,  849,  849,  847,  850,  850,  851,
      851,  853,  853,  846,  852,  852,  854,  854,  842,    0,

      837,  849,    0,  838,  841,  845,    0,  852,  850,  855,
      855,  848,    0,  847,  856,  856,  857,  857,  858,  858,
      846,  861,  861,  862,  862,  863,  863,    0,  849,  864,
      864,  865,  865,    0,  852,  850,  855,    0,  848,    0,
      862,  856,    0,  858,    0,  861,  868,  868,  865,  863,
      866,  866,    0,  867,  867,  869,  869,  870,  870,  868,
      871,  871,    0,  855,  872,  872,    0,  862,  856,    0,
      858,    0,  861,    0,  866,  865,  863,  867,    0,  869,
      873,  873,  874,  874,  870,    0,  868,  875,  875,  876,
      876,  877,  877,  878,  878,    0,  872,  873,  879,  879,

      875,  866,  880,  880,  867,    0,  869,  881,  881,    0,
      876,  870,  883,  883,  877,    0,  874,  878,  882,  882,
        0,  881,    0,  872,  873,    0,  880,  875,    0,  879,
      884,  884,  885,  885,  886,  886,    0,  876,  887,  887,
        0,  877,    0,  874,  878,  888,  888,  886,  881,  882,
      884,  890,  890,  880,  889,  889,  879,  894,  894,  895,
      895,  893,  893,  896,  896,  897,  897,  898,  898,  887,
      899,  899,  900,  900,  886,  888,  882,  884,  893,    0,
      889,    0,  897,    0,  901,  901,  902,  902,    0,  900,
      895,  903,  903,    0,  899,    0,  887,    0,  898,  905,

      905,    0,  888,  904,  904,  893,    0,  889,    0,  897,
      901,  906,  906,  907,  907,    0,  900,  895,  908,  908,
      904,  899,  909,  909,  906,  898,  910,  910,    0,  905,
        0,  911,  911,    0,  912,  912,    0,  901,    0,  913,
      913,  914,  914,  910,  915,  915,    0,  904,    0,  908,
        0,  906,  912,  913,  909,  911,  905,    0,  916,  916,
      917,  917,  919,  919,    0,  914,    0,  915,  920,  920,
      910,  921,  921,  922,  922,    0,  908,  923,  923,  912,
      913,  909,  911,  916,  925,  925,  926,  926,    0,  919,
        0,  917,  914,    0,  915,    0,  924,  924,  921,  924,

      924,  924,    0,  923,  922,  927,  927,  928,  928,    0,
      916,  929,  929,  930,  930,    0,  919,    0,  917,  931,
      931,  932,  932,    0,  929,  921,  933,  933,    0,  927,
      923,  922,    0,  934,  934,    0,  931,  935,  935,  936,
      936,  937,  937,  938,  938,  939,  939,  933,  932,  941,
      941,  929,  940,  940,  944,  944,  927,  936,    0,  942,
      942,  943,  943,  931,  934,  941,  945,  945,  946,  946,
      947,  947,    0,  937,  933,  932,  938,    0,  939,  940,
      942,  946,  949,  949,  936,  948,  948,  943,  950,  950,
        0,  934,  941,  952,  952,  949,  945,  947,  951,  951,

      937,  955,  955,  938,    0,  939,  940,  942,  946,  948,
      953,  953,  954,  954,  943,  956,  956,    0,  950,  957,
      957,    0,  949,  945,  947,  954,  952,  953,  951,  958,
      958,  959,  959,  955,  961,  961,  948,  960,  960,    0,
      956,  962,  962,    0,  959,  950,  964,  964,    0,  961,
      957,    0,  954,  952,  953,  951,  962,  963,  963,    0,
      955,    0,  958,  960,  965,  965,    0,  956,  967,  967,
        0,  959,  964,  968,  968,    0,  961,  957,  969,  969,
      971,  971,    0,  962,    0,  970,  970,  963,    0,  958,
      960,    0,  972,  972,    0,  965,  973,  973,    0,  964,

      974,  974,  976,  976,  970,  975,  975,    0,  969,  972,
      977,  977,  971,  973,  963,  974,  978,  978,  975,  979,
      979,    0,  965,  966,  966,  980,  980,  966,  966,  966,
      966,  970,  981,  981,    0,  969,  972,  966,    0,  971,
      973,  966,  974,    0,  966,  975,    0,  981,  982,  982,
      984,  984,  985,  985,    0,  986,  986,  989,  989,  987,
      987,  988,  988,    0,  966,  990,  990,    0,  966,  991,
      991,  966,  986,  987,  981,  992,  992,    0,  988,  982,
      993,  993,  995,  995,    0,  994,  994,  996,  996,  997,
      997,    0,    0,    0,    0,    0,    0,    0,    0,  986,

      987,    0,    0,    0,  996,  988,  982,  983,  983,  994,
        0,  983,  983,  983,  983,    0,    0,    0,    0,    0,
        0,  983,    0,    0,    0,  983,    0,    0,  983,    0,
        0,  996,    0,    0,    0,    0,  994,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  983,    0,
        0,    0,  983,    0,    0,  983,  999,  999,  999,  999,
      999,  999,  999,  999,  999, 1000, 1000,    0,    0, 1000,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002,
     1002, 1002, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1004,    0, 1004, 1004, 1004, 1004, 1004, 1004, 1004,

     1005,    0, 1005, 1006, 1006, 1006, 1007, 1007, 1007, 1007,
     1007, 1007, 1007,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998
    } ;

static const flex_int16_t yy_rule_linenum[25] =
    {   0,
       90,   92,   97,  104,  107,  112,  118,  119,  120,  121,
      122,  123,  124,  125,  127,  132,  133,  135,  140,  146,
      152,  159,  161,  162
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "scanner.l"

#include <string>
#include <sstream>
#include "scanner.h"


/* HLSL Code Block */

std::stringstream code_block;

/* import the parser's token type into a local typedef */
typedef GLEFFECTS::Parser::token token;
typedef GLEFFECTS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1879 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1893 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1895 "scanner.cc"

#define INITIAL 0
#define PARSE_STATE_CODEBLOCK 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 80 "scanner.l"


#line 83 "scanner.l"
 /* code to place at the beginning of yylex() */

    BEGIN(INITIAL);
    // reset location
    yylloc->step();


#line 2099 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 999 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 998 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 25 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 25 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 26 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 90 "scanner.l"
{return token::UNIFORMS;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "scanner.l"
{
        BEGIN(PARSE_STATE_CODEBLOCK);
        code_block.clear();
        code_block.str("");
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 97 "scanner.l"
{
    yylval->stringVal = new std::string(code_block.str());
    code_block.clear();
    code_block.str("");
    BEGIN(INITIAL);
    return token::CODE_BLOCK;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 104 "scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 107 "scanner.l"
{
    code_block<<std::endl;
    yylloc->lines(yyleng);yylloc->step();
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 112 "scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 118 "scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 119 "scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 120 "scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 121 "scanner.l"
{return token::PASS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 125 "scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 127 "scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 132 "scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 133 "scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 135 "scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 146 "scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "scanner.l"
{yylloc->step();}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 161 "scanner.l"
{yylloc->lines(yyleng); yylloc->step();}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "scanner.l"
{return static_cast<token_type>(*yytext);}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 25:
YY_RULE_SETUP
#line 167 "scanner.l"
ECHO;
	YY_BREAK
#line 2335 "scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSE_STATE_CODEBLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 999 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 999 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 998);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 167 "scanner.l"


namespace GLEFFECTS {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : GLEFFECTSFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int GLEFFECTSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int GLEFFECTSFlexLexer::yywrap()
{
    return 1;
}

