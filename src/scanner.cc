#line 1 "scanner.cc"

#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ExampleFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

    #define yyalloc Examplealloc

    #define yyrealloc Examplerealloc

    #define yyfree Examplefree

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *Examplealloc ( yy_size_t  );
void *Examplerealloc ( void *, yy_size_t  );
void Examplefree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[990] =
    {   0,
        0,    0,    0,    0,   24,   22,   20,   21,   22,   16,
       16,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        3,    4,    3,   20,    0,    6,   17,   16,    0,   19,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,    3,    3,
        0,    0,    6,    6,   17,   17,   19,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    3,    5,    6,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    8,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   14,
       18,   18,   18,   18,   18,   18,   18,   18,    3,    6,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   15,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   13,   13,   18,
       13,   18,    3,    6,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   10,
       11,   12,   18,   18,   18,   13,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,    3,    6,   18,   18,   18,   18,   13,   18,
       18,   13,   13,   18,   18,   18,   18,   18,   13,   18,
       18,    9,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   13,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   18,   18,   18,
       18,   18,   13,   18,    3,    6,   13,   13,   13,   18,
       18,   18,   13,   18,   18,   18,   18,   18,   13,   18,
       18,   18,   18,   13,   18,   18,   18,   18,   18,   13,
       13,   18,   18,   13,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   13,   13,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   13,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,    3,    6,   18,   13,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   13,   13,   18,   18,   18,   18,
       13,   18,   18,   18,   13,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,   13,   18,   18,
       18,   18,   18,   18,   18,   13,   13,   18,   18,   18,
       18,   18,   18,   13,   18,   18,   18,   13,   13,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,    7,   18,   18,   18,   18,   18,   18,   18,   18,
       18,    3,    6,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   13,   18,   13,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   13,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,    3,
        6,   18,   18,   18,   13,   18,   18,   18,   18,   18,
       13,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   13,   18,   18,   18,   13,   18,   18,   18,
       18,   18,   18,   13,   18,   18,   18,   18,   13,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   13,   18,
       13,   13,   13,   13,   18,   18,   18,   18,   18,   13,
       13,   18,   18,   18,   18,    3,    6,   18,   18,   18,
       18,   18,   18,   18,   18,   13,   18,   13,   18,   18,
       13,   18,   13,   18,   13,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       13,   13,   13,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   13,   18,   18,   18,   13,   18,   18,

       13,    3,    6,   18,   18,   18,   18,   13,   18,   18,
       18,   18,   13,   18,   18,   18,   13,   13,   18,   18,
       18,   13,   18,   13,   13,   18,   18,   18,   13,   18,
       18,   13,   13,   18,   18,   18,   18,   18,   18,   13,
       18,   13,   13,   18,   18,   13,   18,    3,    6,   18,
       18,   18,   13,   18,   18,   18,   18,   18,   18,   13,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   13,   18,   13,   18,   18,   18,   18,   13,    3,
        6,   18,   13,   18,   13,   18,   18,   18,   18,   18,
       13,   13,   18,   18,   18,   13,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,    2,    6,   18,   13,
       18,   18,   18,   18,   13,   13,   18,   13,   18,   13,
       18,   18,   18,   18,   13,   13,   18,    1,   18,   18,
       18,   18,   18,   18,   13,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   13,   13,   13,   18,
       18,   18,   18,   18,   18,   18,   13,   13,   13,   13,
       13,   18,   18,   13,   13,   13,   18,   18,   18,   13,
       13,   13,   13,   13,   18,   13,   18,   13,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    8,    6,    6,    9,    6,    6,    6,    6,    6,
        7,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    8,    6,
        6
    } ;

static const flex_int16_t yy_base[1000] =
    {   0,
        0,    0,   69,   71,  292, 4542,   74, 4542,   75,   74,
       75,   78,   80,   82,   84,   87,   95,   89,   91,  147,
      150,   98,  154,  156,  212,  203,  161,  191,  206,    0,
        0, 4542,  279,  122,  232,   77,   82,    0,    0,    0,
      158,  214,  188,  185,  253,  228,  255,  261,  274,  272,
      277,  283,  289,  287,  292,  294,  303,  313,  319,  317,
      234,  333,  340,  330,  344,  357,  346,  359,  370,  361,
      372,  375,  385,  383,  404,  417,  411,  434,  390,  439,
      441,  443,  445,  451,  453,  457,  465,    0,    0,   94,
      228,  220,    0,  102,  127, 4542,    0,  473,  461,  467,

      484,  477,  499,  504,  511,  513,  518,  523,  525,  528,
      533,  535,  539,  543,  547,  598,  561,  549,  563,  576,
      574,  590,  611,  600,  602,  585,  571,  621,  638,  648,
      660,  666,  668,  625,  551,  673,  670,  675,  677,  681,
      683,  699,  696,  693,  703,  701,  705,  707,  723,  726,
      742,  729,  142, 4542,  139,  744,  752,  756,  748,  762,
      769,  771,  774,  780,  782,  789,  784,  796,  793,  802,
      815,  817,  811,  819,  821,  823,  839,  844,  847,  850,
      852,  861,  854,  866,  874,  882,  888,  894,  896,  899,
      901,  910,  164,  918,  924,  926,  928,  940,  932,  946,

      951,  954,  959,  962,  973,  966,  976,  979,  987,  176,
      989,  993,  999, 1011, 1059, 1003, 1034, 1021,  188,  213,
     1024, 1083, 1051, 1045, 1073, 1085, 1088, 1092, 1078, 1090,
     1094, 1121, 1056, 1133, 1147,  179, 1149, 1151, 1159, 1161,
     1164, 1166, 1170, 1185, 1174, 1181, 1243, 1188, 1196, 1192,
     1198, 1200, 1226, 1230, 1208, 1234, 1238, 1251, 1266, 1268,
     1278, 1294, 1284, 1304, 1306, 1310, 1313, 1317, 1327, 1224,
     1232, 1322, 1329, 1332, 1345, 1335, 1351,  419, 1390, 1354,
      734, 1356,  215,  178, 1384, 1369, 1379, 1374, 1388, 1401,
     1411, 1419, 1413, 1421, 1423, 1432, 1437, 1439, 1446, 1448,

     1452, 1459, 1366, 1466, 1471, 1480, 1489, 1461, 1504, 1038,
     1040, 1106, 1498, 1507, 1512, 1216, 1493, 1510, 1516, 1527,
     1518, 1530, 1535, 1540, 1544, 1559, 1567, 1563, 1571, 1578,
     1590, 1573, 1595, 1600, 1606, 1609, 1616, 1619, 1623, 1628,
     1633, 1639, 1645, 1651, 1653, 1661, 1655, 1664, 1681, 1671,
     1678, 1688, 1697, 1705, 1702, 1708, 1713, 1715, 1727, 1719,
     1737, 1741,   84,  264, 1735, 1257, 1743, 1762, 1362, 1764,
     1771, 1774, 1694, 1777, 1783, 1779, 1790, 1792, 1800, 1812,
     1818, 1805, 1820, 1823, 1827, 1832, 1844, 1848, 1850, 1846,
     1840, 1854, 1858, 1872, 1874, 1881, 1885, 1895, 1898, 1907,

     1900, 1910, 1919, 1922, 1927, 1945, 1931, 1949, 1953, 1955,
     1959, 1962, 1967, 1973, 1978, 1983, 1987, 1991, 1996, 2001,
     2005, 2010, 2024, 2028, 2030, 2035, 2037, 2032, 2039, 2052,
     2056, 2048, 2068, 2128, 2070, 2059, 2072, 2083, 2087, 2076,
     2079, 2107, 2109, 2114,  285,  285, 2118, 2121, 2133, 2174,
     2135, 2142, 2148, 2150, 2168, 2170, 2164, 2186, 2154, 2159,
     2197, 2204, 2206, 2210, 2212, 2214, 2216, 2219, 2223, 2227,
     2233, 2239, 2241, 2244, 2249, 2246, 2251, 2253, 2260, 2266,
     2272, 2279, 2286, 2288, 2291, 2293, 2305, 2302, 2313, 2315,
     2318, 2324, 2330, 2388, 2332, 2336, 2341, 2343, 2349, 2351,

     2366, 2356, 2368, 2375, 2377, 2402, 2395, 2412, 2414, 2417,
     2424, 2437, 2345, 2435, 2439, 2444, 2451, 2458, 2466, 2469,
     2472, 2479, 2485, 2487, 2501, 2493, 2507, 2515, 2511, 2513,
     2519,  297,  351, 2521, 2441, 2529, 2535, 2543, 2547, 2553,
     2540, 2560, 2562, 2574, 2549, 2556, 2580, 2582, 2585, 2587,
     2589, 2600, 2607, 2610, 2602, 2613, 2615, 2619, 2621, 2634,
     2628, 2637, 2643, 2645, 2648, 2664, 2672, 2670, 2674, 2676,
     2683, 2680, 2690, 2692, 2694, 2700, 2702, 2709, 2712, 2714,
     2720, 2727, 2729, 2731, 2742, 2751, 2753, 2747, 2755, 2758,
     2760, 2765, 2768, 2780, 2782, 2784, 2787, 2790, 2794, 2796,

     2814, 2799, 2807, 2823, 2828, 2831, 2835, 2846, 2849, 2842,
     2852,  383,  385, 2855, 2869, 2863, 2874, 2878, 2890, 2883,
     2876, 2881, 2897, 2908, 2910, 2905, 2912, 2919, 2915, 2926,
     2939, 2945, 2932, 2947, 2949, 2953, 2955, 2959, 2967, 2972,
     2974, 2980, 2982, 2986, 2988, 2995, 3001, 3008, 3014, 3016,
     3010, 3019, 3024, 3029, 3040, 3052, 3042, 3048, 3066, 3057,
     3075, 3077, 3079, 3084, 3089, 3099, 3086, 3102, 3105, 3111,
     3113, 3115, 3124, 3118, 3126, 3138, 3140, 3145, 3152,  389,
       54, 3157, 3160, 3165, 3170, 3178, 3180, 3184, 3198, 3192,
     3196, 3207, 3211, 3213, 3217, 3220, 3223, 3225, 3215, 3227,

     3245, 3249, 3243, 3253, 3251, 3272, 3255, 3258, 3275, 3280,
     3282, 3286, 3290, 3294, 3302, 3308, 3313, 3322, 3316, 3324,
     3351, 3334, 3329, 3339, 3361, 3336, 3371, 3367, 3356, 3386,
     3378, 3388, 3394, 3397, 3399, 3403, 3405, 3407, 3413, 3417,
     3419, 3423, 3425, 3429, 3431,   47,  455, 3438, 3445, 3441,
     3435, 3457, 3463, 3468, 3466, 3472, 3490, 3484, 3492, 3494,
     3496, 3499, 3502, 3505, 3510, 3512, 3515, 3517, 3521, 3524,
     3526, 3540, 3542, 3549, 3551, 3562, 3566, 3568, 3570, 3585,
     3528, 3587, 3589, 3592, 3594, 3608, 3610, 3612, 3614, 3616,
     3621, 3629, 3631, 3637, 3643, 3652, 3648, 3657, 3659, 3664,

     3670,  463,  465, 3674, 3676, 3685, 3680, 3689, 3695, 3691,
     3701, 3703, 3707, 3716, 3722, 3728, 3733, 3735, 3737, 3744,
     3747, 3749, 3752, 3755, 3758, 3760, 3765, 3771, 3773, 3778,
     3785, 3782, 3787, 3793, 3808, 3797, 3800, 3812, 3815, 3817,
     3824, 3820, 3827, 3838, 3842, 3844, 3846,  463,  475, 3848,
     3850, 3852, 3854, 3857, 3878, 3880, 3882, 3884, 3886, 3888,
     3905, 3890, 3909, 3911, 3915, 3918, 3920, 3925, 3938, 3932,
     3927, 3947, 3949, 3952, 3954, 3959, 3965, 3974, 3976,  515,
      583, 3980, 3978, 3987, 3991, 3998, 4001, 4004, 4006, 4008,
     4010, 4012, 4019, 4030, 4025, 4039, 4043, 4046, 4051, 4048,

     4053, 4056, 4066, 4079, 4075, 4081,    0,  602, 4083, 4085,
     4088, 4091, 4093, 4103, 4113, 4120, 4123, 4125, 4130, 4132,
     4134, 4140, 4144, 4152, 4154, 4157, 4159,    0, 4162, 4168,
     4171, 4180, 4176, 4185, 4187, 4189, 4199, 4203, 4205, 4207,
     4213, 4215, 4226, 4231, 4236, 4233, 4241, 4250, 4252, 4254,
     4261, 4263, 4268, 4273, 4289, 4295, 4354, 4279, 4297, 4299,
     4301, 4306, 4318, 4322, 4331, 4324, 4316, 4327, 4333, 4340,
     4343, 4348, 4350, 4409, 4369, 4376, 4384, 4378, 4387, 4382,
     4393, 4396, 4405, 4411, 4417, 4420, 4425, 4432, 4542, 4475,
     4481, 4487, 4492, 4501, 4510, 4519, 4524, 4526, 4532

    } ;

static const flex_int16_t yy_def[1000] =
    {   0,
      989,    1,  990,  990,  989,  989,  989,  989,  989,  991,
      991,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  993,
      994,  989,  994,  989,  995,  996,  997,   11,  998,  999,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  993,  994,  994,
      995,  995,  996,  996,  997,  989,  999,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  994,  989,  996,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  994,  996,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  994,  996,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  994,  996,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  994,  996,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  994,  996,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  994,  996,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  994,
      996,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  994,  996,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  994,  996,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  994,  996,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  994,
      996,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,

      992,  992,  992,  992,  992,  992,  994,  996,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  996,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,    0,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989

    } ;

static const flex_int16_t yy_nxt[4614] =
    {   0,
        6,    7,    8,    7,    6,    6,    6,    9,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   19,   18,   18,   20,
       21,   22,   18,   23,   18,   24,   25,   26,   18,   27,
       28,   18,   18,   29,   30,   12,   13,   14,   15,   16,
       17,   18,   18,   19,   18,   18,   20,   21,   22,   18,
       23,   18,   24,   25,   26,   18,   27,   28,   18,   18,
       29,   32,   32,   32,   32,   34,   33,   34,   33,   35,
       37,   37,   36,   40,   40,   40,   40,   40,   40,   40,
       40,  802,   40,   40,   40,   40,   40,   40,  747,   42,

       40,   40,   94,   40,   40,   96,   51,   43,   44,   45,
       52,   48,   46,   54,   49,   39,  989,   53,   47,  153,
       50,   55,   58,   34,   56,   34,   42,   57,  445,   94,
       65,  155,   96,   51,   43,   44,   45,   52,   48,   46,
       54,   49,   39,  989,   53,   47,  153,   50,   55,   58,
       96,   56,   40,   40,   57,   40,   40,   65,  155,   40,
       40,   40,   40,   40,   40,   59,   40,   40,   62,   40,
       40,  219,   66,   60,   70,  220,   63,   96,   71,   61,
       67,   40,   40,   81,   40,   40,   68,   82,   64,   69,
       40,   40,   59,   40,   40,   62,   40,   40,  219,   66,

       60,   70,  220,   63,  100,   71,   61,   67,   40,   40,
       81,   40,   40,   68,   82,   64,   69,   40,   40,   40,
       40,   99,  364,   83,  283,   78,   84,  154,   85,   86,
       72,  100,   92,   40,   40,   98,   92,   73,   79,   40,
       40,   74,  284,   80,  363,   75,   87,   76,   99,   77,
       83,  283,   78,   84,  120,   85,   86,   72,   40,   40,
       40,   40,   98,  102,   73,   79,   40,   40,   74,  284,
       80,  363,   75,   87,   76,  101,   77,   40,   40,   40,
       40,  120,   40,   40,  446,  103,   90,  104,   40,   40,
      102,  989,   40,   40,   40,   40,  989,   40,   40,   40,

       40,  107,  101,  105,  106,  532,  110,  989,   40,   40,
      108,  446,  103,  109,  104,  112,  113,  533,   40,   40,
      111,  114,   40,   40,   40,   40,  115,  116,  107,  612,
      105,  106,  532,  110,  117,   40,   40,  108,   40,   40,
      109,  119,  112,  113,  533,   40,   40,  111,  114,   40,
       40,   40,   40,  115,  116,  118,  612,  121,  989,  126,
      989,  117,   40,   40,   40,   40,   40,   40,  119,  989,
      122,  124,  613,  125,  123,   40,   40,   40,   40,  127,
       40,   40,  118,  989,  121,  131,  126,  130,   40,   40,
       40,   40,  133,  128,  129,   40,   40,  122,  124,  613,

      125,  123,  132,  136,  680,  135,  127,  681,  134,   40,
       40,  746,  131,  989,  130,  137,   40,   40,  989,  133,
      128,  129,   40,   40,   40,   40,  138,  989,  144,  132,
      136,  680,  135,  141,  681,  134,  989,  139,  746,   40,
       40,  140,  137,  989,   40,   40,   40,   40,   40,   40,
       40,   40,  989,  138,  142,  144,   40,   40,   40,   40,
      141,  145,   40,   40,  139,  147,   40,   40,  140,  149,
       40,   40,   40,   40,  803,  143,  146,  989,   40,   40,
      148,  142,   40,   40,  150,  848,  157,  849,  145,   40,
       40,  989,  147,  158,  880,  151,  149,  989,  160,  881,

      152,  803,  143,  146,   40,   40,  989,  148,  156,   40,
       40,  150,  848,  157,  849,  159,   40,   40,   40,   40,
      158,  880,  151,   40,   40,  160,  881,  152,   40,   40,
       40,   40,  161,   40,   40,  156,  907,  162,   40,   40,
       40,   40,  159,  163,   40,   40,  164,  165,   40,   40,
      989,  168,   40,   40,   40,   40,   40,   40,  169,  161,
      166,  989,  167,  907,  162,  173,   40,   40,   40,   40,
      163,  170,  172,  164,  165,  171,   40,   40,  168,   40,
       40,   40,   40,  180,  200,  169,  181,  166,  182,  167,
       40,   40,  173,  989,  183,   40,   40,  184,  170,  172,

      989,  192,  171,   40,   40,   40,   40,   40,   40,  908,
      180,  200,  185,  181,  989,  182,   40,   40,  174,  175,
      176,  183,  191,  188,  184,  189,   40,   40,  192,  186,
       40,   40,  190,  928,  177,  178,  908,  179,  989,  185,
      989,  187,  989,   40,   40,  174,  175,  176,  989,  191,
      188,  989,  189,   40,   40,  989,  186,  193,  194,  190,
      928,  177,  178,  199,  179,   40,   40,  989,  187,  989,
      195,   40,   40,   40,   40,   40,   40,  989,   40,   40,
       40,   40,   40,   40,  193,  194,   40,   40,   40,   40,
      199,  196,  198,  197,  201,  203,  204,  195,   40,   40,

      205,   40,   40,  202,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,  206,  210,  208,  989,  196,  198,
      197,  201,  203,  204,  207,  211,  989,  205,   40,   40,
      202,   40,   40,  209,   40,   40,  214,  989,  212,   40,
       40,  206,  210,  208,  216,  213,  989,   40,   40,   40,
       40,  207,  211,   40,   40,  218,  215,   40,   40,  989,
      209,   40,   40,  214,  989,  212,  221,   40,   40,  224,
      222,  216,  213,  217,   40,   40,   40,   40,  223,   40,
       40,  989,  218,  215,  225,   40,   40,   40,   40,   40,
       40,  226,  989,  221,   40,   40,  224,  222,   40,   40,

      217,   40,   40,  232,  227,  223,  229,   40,   40,  228,
      989,  225,  230,  989,  231,  234,   40,   40,  226,  989,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
      232,  227,  989,  229,  233,  989,  228,  236,  235,  230,
      989,  231,  234,  240,   40,   40,  989,  237,  238,   40,
       40,  239,   40,   40,  241,   40,   40,   40,   40,   40,
       40,  233,  243,  989,  236,  235,   40,   40,  989,  244,
      240,   40,   40,  989,  237,  238,  242,  989,  239,   40,
       40,  241,  989,  248,  989,  246,  989,   40,   40,  243,
      989,  245,  249,   40,   40,  989,  244,  989,  247,   40,

       40,   40,   40,  242,   40,   40,   40,   40,  989,  250,
      248,  989,  246,  251,  252,   40,   40,  255,  245,  249,
      253,  989,  254,   40,   40,  247,  989,  256,  257,   40,
       40,   40,   40,   40,   40,  989,  250,   40,   40,  989,
      251,  252,  989,  258,  255,   40,   40,  253,  989,  254,
      261,   40,   40,  259,  256,  257,   40,   40,  989,   40,
       40,  263,  262,  260,   40,   40,  989,   40,   40,  989,
      258,   40,   40,  265,  989,  264,  266,  261,   40,   40,
      259,   40,   40,  989,   40,   40,  270,  989,  263,  262,
      260,  268,   40,   40,   40,   40,  989,  267,   40,   40,

      265,  989,  264,  266,   40,   40,  989,  271,   40,   40,
      269,  272,  989,  270,  989,  275,   40,   40,  268,  989,
      274,  989,  280,  989,  267,  273,   40,   40,  989,   40,
       40,  989,  277,  989,  271,  989,  276,  269,  272,   40,
       40,  989,  275,   40,   40,   40,   40,  274,  989,  280,
       40,   40,  273,  989,  281,  989,   40,   40,  282,  277,
      285,   40,   40,  276,   40,   40,  989,  278,  279,  278,
      278,  278,  278,  278,  278,  278,  278,  293,   40,   40,
      989,  281,  292,   40,   40,  282,  989,  285,   40,   40,
       40,   40,  306,   40,   40,   40,   40,   40,   40,   40,

       40,  286,  287,  989,  293,  989,  288,  302,  294,  292,
      298,   40,   40,  304,  296,  289,  295,  297,  290,  306,
      291,  989,  303,  989,  299,  989,   40,   40,  286,  287,
      989,  300,  301,  288,  302,  294,  989,  298,   40,   40,
      304,  296,  289,  295,  297,  290,  989,  291,  989,  303,
      305,  299,   40,   40,   40,   40,   40,   40,  300,  301,
      989,  310,  311,  312,   40,   40,   40,   40,  307,   40,
       40,   40,   40,  308,  989,   40,   40,  305,  989,   40,
       40,  309,  315,  989,  317,  316,   40,   40,  313,  318,
       40,   40,  314,   40,   40,  307,  320,   40,   40,  989,

      308,   40,   40,   40,   40,   40,   40,  321,  309,  315,
      989,  317,  316,   40,   40,  313,  318,  989,  333,  314,
      319,   40,   40,  320,  334,  332,  989,  331,  989,   40,
       40,   40,   40,  335,  321,   40,   40,   40,   40,   40,
       40,  338,  989,   40,   40,  333,  989,  319,   40,   40,
      353,  334,  332,  989,  331,  336,   40,   40,  354,  337,
      335,  322,   40,   40,  323,  324,  325,  340,  338,  326,
      339,   40,   40,   40,   40,  989,  327,  353,  328,  329,
      330,  450,  336,   40,   40,  354,  337,  341,  322,   40,
       40,  323,  324,  325,  340,  989,  326,  339,  344,   40,

       40,  989,  342,  327,  343,  328,  329,  330,  450,   40,
       40,   40,   40,  989,  341,   40,   40,  345,   40,   40,
      989,  346,   40,   40,  989,  344,  347,   40,   40,  342,
      989,  343,   40,   40,   40,   40,  348,   40,   40,  351,
       40,   40,  350,  989,  345,  989,  349,  989,  346,  352,
       40,   40,  989,  347,  355,  357,   40,   40,  989,   40,
       40,   40,   40,  348,  356,  989,  351,   40,   40,  350,
      359,   40,   40,  349,   40,   40,  352,  989,  362,   40,
       40,  355,  357,  361,   40,   40,  358,  383,  360,   40,
       40,  356,  989,   40,   40,   40,   40,  359,  278,  278,

      278,  278,  278,  278,  366,  362,   40,   40,  367,  989,
      361,  989,  368,  358,  383,  360,   40,   40,   40,   40,
      365,  369,  989,  370,   40,   40,   40,   40,   40,   40,
      989,  366,  989,  371,  989,  367,  989,   40,   40,  368,
      989,  374,   40,   40,   40,   40,  373,  365,  369,  989,
      370,   40,   40,   40,   40,  377,  372,   40,   40,  989,
      371,  989,  375,  376,   40,   40,   40,   40,  374,  989,
      380,   40,   40,  373,  378,  989,   40,   40,  989,  379,
      989,  382,  377,  372,  989,   40,   40,  381,  989,  375,
      376,  989,  384,  385,   40,   40,  989,  380,   40,   40,

      388,  378,  386,   40,   40,  989,  379,  989,  382,   40,
       40,  387,   40,   40,  381,   40,   40,   40,   40,  384,
      385,   40,   40,   40,   40,  389,  989,  388,  393,  386,
      390,  392,   40,   40,  989,   40,   40,  989,  387,  394,
       40,   40,  989,  391,  989,   40,   40,  989,  396,   40,
       40,  989,  389,  395,  989,  393,  989,  390,  392,  397,
      398,  400,  402,  989,   40,   40,  394,  399,   40,   40,
      391,  401,   40,   40,  989,  396,   40,   40,   40,   40,
      395,  406,  989,   40,   40,  989,  397,  398,  400,  402,
      403,  989,  404,  989,  399,   40,   40,  989,  401,  405,

       40,   40,  989,  408,  407,   40,   40,  989,  406,  989,
      411,   40,   40,  412,   40,   40,  410,  403,  989,  404,
      409,   40,   40,  989,   40,   40,  405,  989,   40,   40,
      408,  407,  989,   40,   40,  414,  413,  411,   40,   40,
      412,  418,  989,  410,   40,   40,  415,  409,  417,  989,
       40,   40,  989,  416,  419,  420,   40,   40,   40,   40,
       40,   40,  414,  413,  421,  422,   40,   40,  418,   40,
       40,  423,  989,  415,  989,  417,   40,   40,  424,  427,
      416,  419,  420,   40,   40,  426,   40,   40,  425,  431,
      428,  421,  422,   40,   40,  989,  429,  989,  423,   40,

       40,  430,   40,   40,  989,  424,  427,   40,   40,  432,
       40,   40,  426,   40,   40,  425,  431,  428,   40,   40,
       40,   40,  989,  429,   40,   40,  434,  989,  430,  433,
      437,  438,   40,   40,  439,  989,  432,  436,  989,  435,
       40,   40,   40,   40,  989,  441,   40,   40,   40,   40,
      989,  440,  989,  434,  442,  989,  433,  437,  438,  443,
      989,  439,  989,  444,  436,  451,  435,   40,   40,   40,
       40,  989,  441,  447,  448,  449,   40,   40,  440,   40,
       40,  442,   40,   40,   40,   40,  443,  453,   40,   40,
      444,  989,  451,  452,  989,   40,   40,   40,   40,  989,

      447,  448,  449,  459,  455,   40,   40,  454,  989,  456,
       40,   40,  457,  458,  453,  989,  461,   40,   40,  989,
      452,  460,  989,   40,   40,   40,   40,  989,   40,   40,
      459,  455,   40,   40,  454,  989,  456,   40,   40,  457,
      458,  465,  464,  461,  463,   40,   40,  462,  460,   40,
       40,   40,   40,   40,   40,   40,   40,  989,  466,   40,
       40,  989,  467,   40,   40,  989,  472,  989,  465,  464,
      469,  463,  470,  989,  462,  468,  989,   40,   40,   40,
       40,  471,  989,  473,  989,  466,   40,   40,  989,  467,
       40,   40,  989,  472,  475,  474,  476,  469,  989,  470,

       40,   40,  468,   40,   40,   40,   40,  478,  471,  989,
      473,  989,   40,   40,  479,   40,   40,  989,  483,  989,
      477,  475,  474,  476,   40,   40,  989,   40,   40,  989,
      481,  989,   40,   40,  478,  480,   40,   40,  989,  484,
      989,  479,  482,  485,  989,  483,  989,  477,  486,  989,
       40,   40,  989,  489,   40,   40,  989,  481,   40,   40,
       40,   40,  480,  487,   40,   40,  484,   40,   40,  482,
      485,  490,   40,   40,  989,  486,  488,  492,   40,   40,
      489,  493,  989,   40,   40,  989,  491,  989,   40,   40,
      487,  494,   40,   40,  989,  496,   40,   40,  490,  495,

      497,   40,   40,  488,  492,  498,   40,   40,  493,  989,
       40,   40,  989,  491,  989,   40,   40,  989,  494,  499,
      989,  500,  496,  503,  989,  502,  495,  497,  504,   40,
       40,  989,  498,   40,   40,   40,   40,   40,   40,  501,
       40,   40,   40,   40,   40,   40,  499,  989,  500,  989,
      503,  989,  502,   40,   40,  504,  507,   40,   40,  508,
      510,   40,   40,  506,   40,   40,  501,  505,  989,  513,
      511,  989,  509,   40,   40,   40,   40,   40,   40,  989,
      523,   40,   40,  507,   40,   40,  508,  510,   40,   40,
      506,  512,   40,   40,  505,  524,  513,  511,  989,  509,

      989,  528,  989,  526,  989,  514,  989,  523,  522,  525,
      529,  989,   40,   40,   40,   40,  527,  989,  512,   40,
       40,  989,  524,   40,   40,  530,   40,   40,  528,  989,
      526,  989,  514,   40,   40,  522,  525,  529,   40,   40,
       40,   40,  989,  527,  989,  531,  989,   40,   40,  989,
      515,  516,  530,   40,   40,   40,   40,  989,  517,   40,
       40,  518,  535,  519,   40,   40,  534,  989,  520,   40,
       40,  521,  531,   40,   40,   40,   40,  515,  516,   40,
       40,  542,  369,  369,  369,  517,  537,  536,  518,  535,
      519,   40,   40,  534,  989,  520,  539,  989,  521,  538,

      540,  989,   40,   40,  541,  369,  369,  369,  542,   40,
       40,   40,   40,  537,  536,   40,   40,   40,   40,   40,
       40,   40,   40,  539,   40,   40,  538,  540,   40,   40,
      989,  541,   40,   40,  547,  546,  989,  548,   40,   40,
      989,  543,  989,  544,   40,   40,   40,   40,  545,   40,
       40,   40,   40,  549,   40,   40,   40,   40,   40,   40,
      989,  547,  546,  551,  548,   40,   40,  989,  543,  989,
      544,   40,   40,  554,  989,  545,  550,   40,   40,  552,
      549,  989,  555,  989,   40,   40,  556,  553,  557,  989,
      551,   40,   40,   40,   40,  558,   40,   40,   40,   40,

      554,  559,  989,  550,  989,  560,  552,   40,   40,  555,
       40,   40,  989,  556,  553,  557,  989,  561,   40,   40,
       40,   40,  558,   40,   40,  989,  563,  989,  559,   40,
       40,  562,  560,  564,  989,   40,   40,   40,   40,  989,
      566,   40,   40,  989,  561,  989,   40,   40,   40,   40,
       40,   40,  565,  563,   40,   40,   40,   40,  562,  989,
      564,   40,   40,  989,  567,  568,  989,  566,  989,  574,
      578,   40,   40,   40,   40,  575,  576,  989,  577,  565,
       40,   40,   40,   40,  579,  989,  581,  989,  580,  582,
      989,  567,  568,   40,   40,  989,  574,  578,  989,  584,

       40,   40,  575,  576,  583,  577,  569,   40,   40,  570,
      571,  579,  989,  581,  989,  580,  582,   40,   40,   40,
       40,  572,   40,   40,  573,  989,  584,  586,  585,   40,
       40,  583,  989,  569,  587,  989,  570,  571,  588,  589,
       40,   40,   40,   40,   40,   40,   40,   40,  572,   40,
       40,  573,  989,  590,  586,  585,   40,   40,  989,  591,
      989,  587,  595,   40,   40,  588,  589,  592,  989,  597,
      594,   40,   40,  593,   40,   40,  598,   40,   40,  989,
      590,  989,  596,  989,   40,   40,  591,  989,  599,  595,
       40,   40,   40,   40,  592,  601,  597,  594,   40,   40,

      593,  602,  989,  598,  600,  604,   40,   40,  989,  596,
      989,  603,   40,   40,  989,  599,   40,   40,   40,   40,
       40,   40,  601,  989,   40,   40,   40,   40,  602,  607,
      606,  600,  604,  608,   40,   40,  605,  611,  603,  989,
       40,   40,  614,  989,  610,   40,   40,  609,   40,   40,
      989,  615,   40,   40,   40,   40,  607,  606,   40,   40,
      608,   40,   40,  605,  611,   40,   40,   40,   40,  614,
      618,  610,  616,  619,  609,  617,  989,  620,  615,   40,
       40,  989,  621,  989,  622,   40,   40,   40,   40,  989,
       40,   40,   40,   40,   40,   40,  623,  618,  989,  616,

      619,  625,  617,  626,  620,   40,   40,   40,   40,  621,
      989,  622,   40,   40,  989,   40,   40,  624,   40,   40,
       40,   40,  989,  623,   40,   40,   40,   40,  625,  627,
      626,  989,  628,   40,   40,  631,  989,  629,  989,   40,
       40,  634,   40,   40,  624,  630,  632,  989,   40,   40,
       40,   40,  989,   40,   40,  989,  627,  633,  989,  628,
      636,  989,  631,  635,  629,  638,  640,  989,  634,   40,
       40,  989,  630,  632,  637,   40,   40,   40,   40,   40,
       40,   40,   40,  639,  633,   40,   40,  636,   40,   40,
      635,  989,  638,  640,  641,   40,   40,   40,   40,   40,

       40,  637,  643,  989,  642,   40,   40,   40,   40,  989,
      639,  989,  645,  644,   40,   40,  648,   40,   40,   40,
       40,  641,  989,  646,  989,   40,   40,  647,  649,  643,
      989,  642,   40,   40,   40,   40,   40,   40,  989,  645,
      644,  650,  652,  648,  989,  651,  989,   40,   40,  653,
      646,  654,   40,   40,  647,  649,   40,   40,   40,   40,
       40,   40,  989,   40,   40,   40,   40,  989,  650,  652,
       40,   40,  651,   40,   40,  655,  653,  989,  654,  656,
      659,  989,  657,  661,  658,   40,   40,   40,   40,   40,
       40,  660,   40,   40,  989,   40,   40,  989,  663,   40,

       40,   40,   40,  662,   40,   40,  656,  659,  664,  657,
      661,  658,   40,   40,  989,  665,  989,  668,  660,   40,
       40,  989,  669,  666,  989,  663,  667,  989,   40,   40,
      662,  989,  670,   40,   40,  664,   40,   40,  671,  989,
       40,   40,  665,  672,  668,  989,  673,   40,   40,  669,
      666,   40,   40,  667,   40,   40,  989,   40,   40,  670,
       40,   40,  989,  674,  989,  671,  675,  676,   40,   40,
      672,  679,  677,  673,   40,   40,  989,  682,  678,   40,
       40,   40,   40,   40,   40,  684,   40,   40,   40,   40,
      674,  688,  689,  675,  676,   40,   40,  989,  679,  677,

      683,  686,   40,   40,  682,  678,  989,  690,  687,  685,
       40,   40,  684,   40,   40,   40,   40,   40,   40,  692,
       40,   40,  691,  989,   40,   40,  989,  683,  686,  989,
      693,   40,   40,  989,  690,  687,  685,   40,   40,  694,
      696,  989,  695,  989,   40,   40,  692,  697,  989,  691,
       40,   40,   40,   40,   40,   40,  989,  693,   40,   40,
       40,   40,  989,  698,   40,   40,  694,  696,  701,  695,
      699,  703,   40,   40,  697,  989,  704,   40,   40,   40,
       40,  705,  989,  700,  702,   40,   40,   40,   40,  989,
      698,   40,   40,   40,   40,  701,  706,  699,  703,  708,

       40,   40,  989,  704,  989,  709,   40,   40,  705,  707,
      700,  702,  710,   40,   40,   40,   40,  712,  989,   40,
       40,   40,   40,  706,   40,   40,  708,  989,  711,   40,
       40,  989,  709,  713,   40,   40,  707,  714,  716,  710,
      715,  989,  717,  989,  712,   40,   40,   40,   40,  989,
      718,  720,  989,   40,   40,  711,  989,   40,   40,  719,
      713,  989,   40,   40,  714,  716,  725,  715,  989,  717,
      722,   40,   40,  721,  723,  727,  989,  718,  720,  724,
       40,   40,   40,   40,   40,   40,  719,  726,  989,   40,
       40,   40,   40,  725,   40,   40,  989,  722,  730,  729,

      989,  723,  727,  989,   40,   40,  724,   40,   40,  732,
       40,   40,  728,  731,  726,  989,   40,   40,   40,   40,
       40,   40,  734,   40,   40,  730,  729,  733,  989,   40,
       40,   40,   40,  989,  737,  989,  732,  736,  989,  728,
      731,  989,  735,   40,   40,   40,   40,  741,  989,  734,
       40,   40,  738,  740,  733,  739,  989,   40,   40,  989,
      742,  737,   40,   40,  736,   40,   40,  989,  744,  735,
       40,   40,  743,  989,  741,   40,   40,  989,  749,  738,
      740,  745,  739,   40,   40,   40,   40,  742,  748,   40,
       40,  989,  369,  369,  989,  744,  989,   40,   40,  743,

      750,   40,   40,   40,   40,  749,  369,  369,  745,  752,
      753,  989,   40,   40,  751,  748,   40,   40,   40,   40,
       40,   40,   40,   40,  989,   40,   40,  750,   40,   40,
       40,   40,   40,   40,  989,  756,  752,  753,  754,  757,
      989,  751,  758,  989,  759,  762,  755,  760,   40,   40,
       40,   40,  761,  989,   40,   40,   40,   40,   40,   40,
       40,   40,  756,   40,   40,  754,  757,  763,  989,  758,
      989,  759,  762,  755,  760,  764,  765,   40,   40,  761,
       40,   40,  989,  766,  768,   40,   40,   40,   40,  989,
      767,   40,   40,  989,  763,   40,   40,  989,  769,   40,

       40,  989,  764,  765,  771,  989,  772,   40,   40,  989,
      766,  768,  989,   40,   40,  989,  770,  767,   40,   40,
      774,   40,   40,  773,  989,  769,  775,   40,   40,   40,
       40,  771,  989,  772,   40,   40,  779,  989,  776,   40,
       40,   40,   40,  770,   40,   40,  989,  774,  777,  989,
      773,  786,  784,  775,  989,  780,   40,   40,  789,  778,
      785,   40,   40,  779,  989,  776,   40,   40,  989,  781,
      782,  783,   40,   40,  787,  777,   40,   40,  786,  784,
      788,  989,  780,   40,   40,  789,  778,  785,  989,  791,
      790,   40,   40,   40,   40,  989,  781,  782,  783,   40,

       40,  787,   40,   40,   40,   40,  989,  788,   40,   40,
       40,   40,   40,   40,  989,  792,  791,  790,   40,   40,
      989,  793,   40,   40,   40,   40,  989,  795,   40,   40,
       40,   40,  794,  989,   40,   40,   40,   40,  989,  796,
       40,   40,  792,   40,   40,  989,   40,   40,  793,  797,
       40,   40,  989,  801,  795,  989,  804,  807,  798,  794,
      799,  800,   40,   40,  805,  989,  796,  806,   40,   40,
      989,   40,   40,   40,   40,  989,  797,   40,   40,  808,
      801,  989,  809,  804,  807,  798,  810,  799,  800,   40,
       40,  805,  811,  989,  806,   40,   40,   40,   40,   40,

       40,   40,   40,  989,   40,   40,  808,   40,   40,  809,
       40,   40,  989,  810,  813,   40,   40,   40,   40,  811,
       40,   40,   40,   40,  989,  812,   40,   40,  989,   40,
       40,   40,   40,   40,   40,  814,  815,  816,  989,  819,
      989,  813,  989,  817,  989,   40,   40,   40,   40,  989,
      818,  989,  812,  989,   40,   40,   40,   40,  989,  820,
      821,  822,  814,  815,  816,  989,  819,   40,   40,  989,
      817,   40,   40,   40,   40,   40,   40,  818,  823,  989,
      827,  989,  826,  989,  824,  825,  820,  821,  822,  989,
       40,   40,   40,   40,   40,   40,  828,   40,   40,   40,

       40,  989,  830,  831,  829,  823,  989,  827,  989,  826,
      989,  824,  825,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,  828,  989,  833,   40,   40,  835,  830,
      831,  829,  989,  832,   40,   40,   40,   40,  989,  834,
      989,  836,   40,   40,  989,  838,  989,  837,   40,   40,
      989,  840,  833,   40,   40,  835,  839,   40,   40,  989,
      832,  841,   40,   40,   40,   40,  834,  989,  836,   40,
       40,  844,  838,  989,  837,   40,   40,  845,  840,   40,
       40,   40,   40,  839,  842,   40,   40,  843,  841,  846,
       40,   40,  989,  850,   40,   40,   40,   40,  844,  847,

       40,   40,  989,  852,  845,  851,   40,   40,   40,   40,
      855,  842,   40,   40,  843,  989,  846,  853,  989,  856,
      850,   40,   40,  989,  854,  989,  847,   40,   40,  857,
      852,  989,  851,   40,   40,  858,  989,  855,   40,   40,
       40,   40,   40,   40,  853,  989,  856,  989,  859,   40,
       40,  854,   40,   40,   40,   40,  857,   40,   40,  860,
       40,   40,  858,   40,   40,   40,   40,  989,  861,  989,
       40,   40,  989,  863,  989,  859,   40,   40,   40,   40,
      862,  864,  989,   40,   40,  989,  860,   40,   40,  867,
       40,   40,   40,   40,  989,  861,  989,  865,   40,   40,

      863,  866,   40,   40,  869,   40,   40,  862,  864,  868,
      989,  870,  989,   40,   40,  989,  867,   40,   40,  872,
       40,   40,   40,   40,  865,   40,   40,  989,  866,   40,
       40,  869,   40,   40,  874,  989,  868,  873,  870,  871,
      989,  875,  876,   40,   40,  989,  872,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,  874,   40,   40,  873,  989,  871,  989,  875,  876,
      877,  989,  883,  989,  878,  989,  879,  882,  989,  885,
      989,  884,  989,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,  877,  989,  883,

      888,  878,  989,  879,  882,  989,  885,  886,  884,  887,
       40,   40,  892,  889,   40,   40,   40,   40,  890,  989,
       40,   40,  989,   40,   40,   40,   40,  888,  989,  894,
       40,   40,   40,   40,  886,  989,  887,   40,   40,  892,
      889,  895,  891,   40,   40,  890,  896,  989,  893,  897,
      989,  900,   40,   40,   40,   40,  894,   40,   40,   40,
       40,  898,  989,  901,   40,   40,  989,  899,  895,  891,
       40,   40,  903,  896,  902,  893,  897,  989,  900,   40,
       40,   40,   40,   40,   40,   40,   40,  989,  898,  989,
      901,  989,   40,   40,  899,  904,   40,   40,  989,  903,

      905,  902,  278,   40,   40,  906,   40,   40,  989,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,  989,
      910,  989,  904,  909,   40,   40,  989,  905,  913,  278,
       40,   40,  906,  912,  989,   40,   40,  911,  989,  914,
      989,  915,  989,  917,   40,   40,  989,  910,   40,   40,
      909,   40,   40,   40,   40,  913,   40,   40,   40,   40,
      912,   40,   40,  989,  911,  916,  914,  989,  915,  989,
      917,   40,   40,  920,  989,  923,  922,  921,  989,  918,
       40,   40,  989,  919,   40,   40,   40,   40,   40,   40,
       40,   40,  916,   40,   40,  924,   40,   40,   40,   40,

      920,  989,  923,  922,  921,  926,  918,  925,   40,   40,
      919,  761,  761,  761,  989,  929,  989,  927,   40,   40,
      930,  989,  924,  989,  932,   40,   40,  931,   40,   40,
       40,   40,  926,  989,  925,   40,   40,   40,   40,   40,
       40,  989,  929,  989,  927,   40,   40,  930,  934,   40,
       40,  932,  933,  989,  931,  989,  935,   40,   40,   40,
       40,  989,   40,   40,   40,   40,  989,   40,   40,  989,
      937,  989,  936,   40,   40,  934,   40,   40,  989,  933,
      939,   40,   40,  935,  989,   40,   40,  989,  938,  989,
       40,   40,   40,   40,   40,   40,  940,  937,  989,  936,

      941,  944,  945,  943,   40,   40,  942,  939,   40,   40,
       40,   40,   40,   40,  989,  938,  946,  948,   40,   40,
       40,   40,  989,  940,  947,  951,  989,  941,  944,  945,
      943,   40,   40,  942,  950,  949,   40,   40,   40,   40,
      989,   40,   40,  946,  948,  989,   40,   40,  952,  989,
      953,  947,  951,  955,  956,   40,   40,   40,   40,   40,
       40,  950,  949,  989,  954,  989,   40,   40,   40,   40,
      957,  958,  961,   40,   40,  952,  989,  953,   40,   40,
      955,  956,  989,  963,   40,   40,  959,  989,  964,  989,
      960,  954,  962,  989,   40,   40,  989,  957,  958,  961,

       40,   40,   40,   40,   40,   40,   40,   40,  965,  989,
      963,   40,   40,  959,  989,  964,  989,  960,  989,  962,
      966,   40,   40,   40,   40,  973,  989,   40,   40,   40,
       40,  967,   40,   40,  972,  965,   40,   40,   40,   40,
      975,  989,  978,  974,  976,   40,   40,  966,   40,   40,
      989,  977,  973,   40,   40,   40,   40,  989,  967,   40,
       40,  972,  989,  968,  968,  968,  968,  975,  979,  978,
      974,  976,  989,  969,   40,   40,  989,  970,  977,  989,
      971,   40,   40,   40,   40,  989,  980,   40,   40,   40,
       40,  989,   40,   40,  989,  979,  989,  985,   40,   40,

      969,   40,   40,  989,  970,  989,  984,  971,  989,  986,
       40,   40,  989,  980,   40,   40,   40,   40,  968,  968,
      968,  968,   40,   40,  985,   40,   40,  989,  981,  989,
       40,   40,  982,  984,  989,  983,  986,   40,   40,  989,
      989,  989,  989,  989,  989,  989,  987,  988,  989,  989,
      989,  989,  989,  989,  989,  981,  989,  989,  989,  982,
      989,  989,  983,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  987,  988,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   38,   38,  989,  989,   38,   41,
       41,   41,   41,   41,   41,   41,   88,   88,   88,   88,

       88,   89,  989,   89,   89,   89,   89,   89,   89,   89,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   93,
      989,   93,   93,   93,   93,   93,   93,   93,   95,  989,
       95,   97,   97,   97,   40,   40,   40,   40,   40,   40,
       40,    5,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989
    } ;

static const flex_int16_t yy_chk[4614] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    7,    3,    7,    4,    9,
       10,   11,    9,   12,   12,   13,   13,   14,   14,   15,
       15,  746,   16,   16,   18,   18,   19,   19,  681,   12,

       17,   17,   36,   22,   22,   37,   15,   12,   12,   13,
       15,   14,   13,   17,   14,   10,   11,   16,   13,   90,
       14,   17,   19,   34,   17,   34,   12,   17,  363,   36,
       22,   94,   37,   15,   12,   12,   13,   15,   14,   13,
       17,   14,   10,   11,   16,   13,   90,   14,   17,   19,
       95,   17,   20,   20,   17,   21,   21,   22,   94,   23,
       23,   24,   24,   41,   41,   20,   27,   27,   21,  193,
      193,  153,   23,   20,   24,  155,   21,   95,   24,   20,
       23,  210,  210,   27,  236,  236,   23,   27,   21,   23,
       44,   44,   20,   43,   43,   21,   28,   28,  153,   23,

       20,   24,  155,   21,   44,   24,   20,   23,   26,   26,
       27,   29,   29,   23,   27,   21,   23,   25,   25,   42,
       42,   43,  284,   28,  219,   26,   28,   92,   29,   29,
       25,   44,   91,   46,   46,   42,   35,   25,   26,   61,
       61,   25,  220,   26,  283,   25,   29,   25,   43,   25,
       28,  219,   26,   28,   61,   29,   29,   25,   45,   45,
       47,   47,   42,   46,   25,   26,   48,   48,   25,  220,
       26,  283,   25,   29,   25,   45,   25,   50,   50,   49,
       49,   61,   51,   51,  364,   47,   33,   48,   52,   52,
       46,    5,   54,   54,   53,   53,    0,   55,   55,   56,

       56,   50,   45,   49,   49,  445,   52,    0,   57,   57,
       51,  364,   47,   51,   48,   53,   54,  446,   58,   58,
       52,   55,   60,   60,   59,   59,   56,   57,   50,  532,
       49,   49,  445,   52,   58,   64,   64,   51,   62,   62,
       51,   60,   53,   54,  446,   63,   63,   52,   55,   65,
       65,   67,   67,   56,   57,   59,  532,   62,    0,   64,
        0,   58,   66,   66,   68,   68,   70,   70,   60,    0,
       62,   63,  533,   63,   62,   69,   69,   71,   71,   65,
       72,   72,   59,    0,   62,   68,   64,   67,   74,   74,
       73,   73,   70,   66,   66,   79,   79,   62,   63,  533,

       63,   62,   69,   73,  612,   72,   65,  613,   71,   75,
       75,  680,   68,    0,   67,   74,   77,   77,    0,   70,
       66,   66,   76,   76,  278,  278,   75,    0,   79,   69,
       73,  612,   72,   77,  613,   71,    0,   76,  680,   78,
       78,   76,   74,    0,   80,   80,   81,   81,   82,   82,
       83,   83,    0,   75,   78,   79,   84,   84,   85,   85,
       77,   80,   86,   86,   76,   82,   99,   99,   76,   84,
       87,   87,  100,  100,  747,   78,   81,    0,   98,   98,
       83,   78,  102,  102,   85,  802,   99,  803,   80,  101,
      101,    0,   82,  100,  848,   86,   84,    0,  102,  849,

       87,  747,   78,   81,  103,  103,    0,   83,   98,  104,
      104,   85,  802,   99,  803,  101,  105,  105,  106,  106,
      100,  848,   86,  107,  107,  102,  849,   87,  108,  108,
      109,  109,  103,  110,  110,   98,  880,  104,  111,  111,
      112,  112,  101,  105,  113,  113,  106,  107,  114,  114,
        0,  110,  115,  115,  118,  118,  135,  135,  111,  103,
      108,    0,  109,  880,  104,  115,  117,  117,  119,  119,
      105,  112,  114,  106,  107,  113,  127,  127,  110,  121,
      121,  120,  120,  117,  135,  111,  118,  108,  119,  109,
      126,  126,  115,    0,  120,  122,  122,  121,  112,  114,

        0,  127,  113,  116,  116,  124,  124,  125,  125,  881,
      117,  135,  122,  118,    0,  119,  123,  123,  116,  116,
      116,  120,  126,  124,  121,  125,  128,  128,  127,  123,
      134,  134,  125,  908,  116,  116,  881,  116,    0,  122,
        0,  123,    0,  129,  129,  116,  116,  116,    0,  126,
      124,    0,  125,  130,  130,    0,  123,  128,  129,  125,
      908,  116,  116,  134,  116,  131,  131,    0,  123,    0,
      130,  132,  132,  133,  133,  137,  137,    0,  136,  136,
      138,  138,  139,  139,  128,  129,  140,  140,  141,  141,
      134,  131,  133,  132,  136,  138,  139,  130,  144,  144,

      140,  143,  143,  137,  142,  142,  146,  146,  145,  145,
      147,  147,  148,  148,  141,  144,  143,    0,  131,  133,
      132,  136,  138,  139,  142,  145,    0,  140,  149,  149,
      137,  150,  150,  143,  152,  152,  148,    0,  146,  281,
      281,  141,  144,  143,  150,  147,    0,  151,  151,  156,
      156,  142,  145,  159,  159,  152,  149,  157,  157,    0,
      143,  158,  158,  148,    0,  146,  156,  160,  160,  159,
      157,  150,  147,  151,  161,  161,  162,  162,  158,  163,
      163,    0,  152,  149,  160,  164,  164,  165,  165,  167,
      167,  161,    0,  156,  166,  166,  159,  157,  169,  169,

      151,  168,  168,  167,  162,  158,  164,  170,  170,  163,
        0,  160,  165,    0,  166,  169,  173,  173,  161,    0,
      171,  171,  172,  172,  174,  174,  175,  175,  176,  176,
      167,  162,    0,  164,  168,    0,  163,  171,  170,  165,
        0,  166,  169,  175,  177,  177,    0,  172,  173,  178,
      178,  174,  179,  179,  176,  180,  180,  181,  181,  183,
      183,  168,  178,    0,  171,  170,  182,  182,    0,  179,
      175,  184,  184,    0,  172,  173,  177,    0,  174,  185,
      185,  176,    0,  183,    0,  181,    0,  186,  186,  178,
        0,  180,  184,  187,  187,    0,  179,    0,  182,  188,

      188,  189,  189,  177,  190,  190,  191,  191,    0,  185,
      183,    0,  181,  186,  187,  192,  192,  190,  180,  184,
      188,    0,  189,  194,  194,  182,    0,  191,  192,  195,
      195,  196,  196,  197,  197,    0,  185,  199,  199,    0,
      186,  187,    0,  194,  190,  198,  198,  188,    0,  189,
      197,  200,  200,  195,  191,  192,  201,  201,    0,  202,
      202,  199,  198,  196,  203,  203,    0,  204,  204,    0,
      194,  206,  206,  201,    0,  200,  202,  197,  205,  205,
      195,  207,  207,    0,  208,  208,  206,    0,  199,  198,
      196,  204,  209,  209,  211,  211,    0,  203,  212,  212,

      201,    0,  200,  202,  213,  213,    0,  207,  216,  216,
      205,  208,    0,  206,    0,  212,  214,  214,  204,    0,
      211,    0,  216,    0,  203,  209,  218,  218,    0,  221,
      221,    0,  214,    0,  207,    0,  213,  205,  208,  217,
      217,    0,  212,  310,  310,  311,  311,  211,    0,  216,
      224,  224,  209,    0,  217,    0,  223,  223,  218,  214,
      221,  233,  233,  213,  215,  215,    0,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  224,  225,  225,
        0,  217,  223,  229,  229,  218,    0,  221,  222,  222,
      226,  226,  233,  227,  227,  230,  230,  228,  228,  231,

      231,  222,  222,    0,  224,    0,  222,  229,  225,  223,
      228,  312,  312,  231,  227,  222,  226,  227,  222,  233,
      222,    0,  230,    0,  228,    0,  232,  232,  222,  222,
        0,  228,  228,  222,  229,  225,    0,  228,  234,  234,
      231,  227,  222,  226,  227,  222,    0,  222,    0,  230,
      232,  228,  235,  235,  237,  237,  238,  238,  228,  228,
        0,  238,  238,  238,  239,  239,  240,  240,  234,  241,
      241,  242,  242,  235,    0,  243,  243,  232,    0,  245,
      245,  237,  241,    0,  242,  241,  246,  246,  239,  243,
      244,  244,  240,  248,  248,  234,  245,  250,  250,    0,

      235,  249,  249,  251,  251,  252,  252,  246,  237,  241,
        0,  242,  241,  255,  255,  239,  243,    0,  250,  240,
      244,  316,  316,  245,  251,  249,    0,  248,    0,  270,
      270,  253,  253,  252,  246,  254,  254,  271,  271,  256,
      256,  255,    0,  257,  257,  250,    0,  244,  247,  247,
      270,  251,  249,    0,  248,  253,  258,  258,  271,  254,
      252,  247,  366,  366,  247,  247,  247,  257,  255,  247,
      256,  259,  259,  260,  260,    0,  247,  270,  247,  247,
      247,  366,  253,  261,  261,  271,  254,  258,  247,  263,
      263,  247,  247,  247,  257,    0,  247,  256,  261,  262,

      262,    0,  259,  247,  260,  247,  247,  247,  366,  264,
      264,  265,  265,    0,  258,  266,  266,  262,  267,  267,
        0,  263,  268,  268,    0,  261,  264,  272,  272,  259,
        0,  260,  269,  269,  273,  273,  265,  274,  274,  268,
      276,  276,  267,    0,  262,    0,  266,    0,  263,  269,
      275,  275,    0,  264,  272,  274,  277,  277,    0,  280,
      280,  282,  282,  265,  273,    0,  268,  369,  369,  267,
      276,  303,  303,  266,  286,  286,  269,    0,  282,  288,
      288,  272,  274,  280,  287,  287,  275,  303,  277,  285,
      285,  273,    0,  289,  289,  279,  279,  276,  279,  279,

      279,  279,  279,  279,  286,  282,  290,  290,  287,    0,
      280,    0,  288,  275,  303,  277,  291,  291,  293,  293,
      285,  289,    0,  290,  292,  292,  294,  294,  295,  295,
        0,  286,    0,  291,    0,  287,    0,  296,  296,  288,
        0,  294,  297,  297,  298,  298,  293,  285,  289,    0,
      290,  299,  299,  300,  300,  297,  292,  301,  301,    0,
      291,    0,  295,  296,  302,  302,  308,  308,  294,    0,
      300,  304,  304,  293,  298,    0,  305,  305,    0,  299,
        0,  302,  297,  292,    0,  306,  306,  301,    0,  295,
      296,    0,  304,  305,  307,  307,    0,  300,  317,  317,

      308,  298,  306,  313,  313,    0,  299,    0,  302,  309,
      309,  307,  314,  314,  301,  318,  318,  315,  315,  304,
      305,  319,  319,  321,  321,  309,    0,  308,  317,  306,
      313,  315,  320,  320,    0,  322,  322,    0,  307,  318,
      323,  323,    0,  314,    0,  324,  324,    0,  320,  325,
      325,    0,  309,  319,    0,  317,    0,  313,  315,  321,
      322,  323,  325,    0,  326,  326,  318,  322,  328,  328,
      314,  324,  327,  327,    0,  320,  329,  329,  332,  332,
      319,  328,    0,  330,  330,    0,  321,  322,  323,  325,
      326,    0,  327,    0,  322,  331,  331,    0,  324,  327,

      333,  333,    0,  330,  329,  334,  334,    0,  328,    0,
      332,  335,  335,  333,  336,  336,  331,  326,    0,  327,
      330,  337,  337,    0,  338,  338,  327,    0,  339,  339,
      330,  329,    0,  340,  340,  335,  334,  332,  341,  341,
      333,  339,    0,  331,  342,  342,  336,  330,  338,    0,
      343,  343,    0,  337,  340,  341,  344,  344,  345,  345,
      347,  347,  335,  334,  342,  343,  346,  346,  339,  348,
      348,  343,    0,  336,    0,  338,  350,  350,  343,  346,
      337,  340,  341,  351,  351,  345,  349,  349,  344,  350,
      347,  342,  343,  352,  352,    0,  348,    0,  343,  373,

      373,  349,  353,  353,    0,  343,  346,  355,  355,  351,
      354,  354,  345,  356,  356,  344,  350,  347,  357,  357,
      358,  358,    0,  348,  360,  360,  353,    0,  349,  352,
      356,  357,  359,  359,  358,    0,  351,  355,    0,  354,
      365,  365,  361,  361,    0,  359,  362,  362,  367,  367,
        0,  358,    0,  353,  360,    0,  352,  356,  357,  361,
        0,  358,    0,  362,  355,  367,  354,  368,  368,  370,
      370,    0,  359,  365,  365,  365,  371,  371,  358,  372,
      372,  360,  374,  374,  376,  376,  361,  370,  375,  375,
      362,    0,  367,  368,    0,  377,  377,  378,  378,    0,

      365,  365,  365,  376,  372,  379,  379,  371,    0,  374,
      382,  382,  375,  375,  370,    0,  378,  380,  380,    0,
      368,  377,    0,  381,  381,  383,  383,    0,  384,  384,
      376,  372,  385,  385,  371,    0,  374,  386,  386,  375,
      375,  384,  383,  378,  381,  391,  391,  380,  377,  387,
      387,  390,  390,  388,  388,  389,  389,    0,  385,  392,
      392,    0,  386,  393,  393,    0,  391,    0,  384,  383,
      388,  381,  389,    0,  380,  387,    0,  394,  394,  395,
      395,  390,    0,  392,    0,  385,  396,  396,    0,  386,
      397,  397,    0,  391,  394,  393,  395,  388,    0,  389,

      398,  398,  387,  399,  399,  401,  401,  397,  390,    0,
      392,    0,  400,  400,  398,  402,  402,    0,  401,    0,
      396,  394,  393,  395,  403,  403,    0,  404,  404,    0,
      400,    0,  405,  405,  397,  399,  407,  407,    0,  402,
        0,  398,  400,  403,    0,  401,    0,  396,  404,    0,
      406,  406,    0,  407,  408,  408,    0,  400,  409,  409,
      410,  410,  399,  405,  411,  411,  402,  412,  412,  400,
      403,  408,  413,  413,    0,  404,  406,  410,  414,  414,
      407,  411,    0,  415,  415,    0,  409,    0,  416,  416,
      405,  412,  417,  417,    0,  414,  418,  418,  408,  413,

      415,  419,  419,  406,  410,  416,  420,  420,  411,    0,
      421,  421,    0,  409,    0,  422,  422,    0,  412,  417,
        0,  418,  414,  421,    0,  420,  413,  415,  422,  423,
      423,    0,  416,  424,  424,  425,  425,  428,  428,  419,
      426,  426,  427,  427,  429,  429,  417,    0,  418,    0,
      421,    0,  420,  432,  432,  422,  425,  430,  430,  426,
      429,  431,  431,  424,  436,  436,  419,  423,    0,  432,
      430,    0,  427,  433,  433,  435,  435,  437,  437,    0,
      436,  440,  440,  425,  441,  441,  426,  429,  438,  438,
      424,  431,  439,  439,  423,  437,  432,  430,    0,  427,

        0,  440,    0,  438,    0,  433,    0,  436,  435,  437,
      441,    0,  442,  442,  443,  443,  439,    0,  431,  444,
      444,    0,  437,  447,  447,  442,  448,  448,  440,    0,
      438,    0,  433,  434,  434,  435,  437,  441,  449,  449,
      451,  451,    0,  439,    0,  444,    0,  452,  452,    0,
      434,  434,  442,  453,  453,  454,  454,    0,  434,  459,
      459,  434,  452,  434,  460,  460,  451,    0,  434,  457,
      457,  434,  444,  455,  455,  456,  456,  434,  434,  450,
      450,  460,  450,  450,  450,  434,  455,  454,  434,  452,
      434,  458,  458,  451,    0,  434,  457,    0,  434,  456,

      457,    0,  461,  461,  458,  461,  461,  461,  460,  462,
      462,  463,  463,  455,  454,  464,  464,  465,  465,  466,
      466,  467,  467,  457,  468,  468,  456,  457,  469,  469,
        0,  458,  470,  470,  467,  466,    0,  468,  471,  471,
        0,  462,    0,  463,  472,  472,  473,  473,  465,  474,
      474,  476,  476,  469,  475,  475,  477,  477,  478,  478,
        0,  467,  466,  473,  468,  479,  479,    0,  462,    0,
      463,  480,  480,  477,    0,  465,  472,  481,  481,  475,
      469,    0,  478,    0,  482,  482,  479,  476,  480,    0,
      473,  483,  483,  484,  484,  481,  485,  485,  486,  486,

      477,  482,    0,  472,    0,  483,  475,  488,  488,  478,
      487,  487,    0,  479,  476,  480,    0,  484,  489,  489,
      490,  490,  481,  491,  491,    0,  488,    0,  482,  492,
      492,  487,  483,  489,    0,  493,  493,  495,  495,    0,
      491,  496,  496,    0,  484,    0,  497,  497,  498,  498,
      513,  513,  490,  488,  499,  499,  500,  500,  487,    0,
      489,  502,  502,    0,  492,  493,    0,  491,    0,  495,
      499,  501,  501,  503,  503,  496,  497,    0,  498,  490,
      504,  504,  505,  505,  500,    0,  502,    0,  501,  503,
        0,  492,  493,  494,  494,    0,  495,  499,    0,  505,

      507,  507,  496,  497,  504,  498,  494,  506,  506,  494,
      494,  500,    0,  502,    0,  501,  503,  508,  508,  509,
      509,  494,  510,  510,  494,    0,  505,  507,  506,  511,
      511,  504,    0,  494,  508,    0,  494,  494,  509,  510,
      514,  514,  512,  512,  515,  515,  535,  535,  494,  516,
      516,  494,    0,  511,  507,  506,  517,  517,    0,  512,
        0,  508,  516,  518,  518,  509,  510,  512,    0,  517,
      515,  519,  519,  514,  520,  520,  518,  521,  521,    0,
      511,    0,  516,    0,  522,  522,  512,    0,  519,  516,
      523,  523,  524,  524,  512,  521,  517,  515,  526,  526,

      514,  522,    0,  518,  520,  524,  525,  525,    0,  516,
        0,  523,  527,  527,    0,  519,  529,  529,  530,  530,
      528,  528,  521,    0,  531,  531,  534,  534,  522,  527,
      526,  520,  524,  528,  536,  536,  525,  531,  523,    0,
      537,  537,  534,    0,  530,  541,  541,  529,  538,  538,
        0,  536,  539,  539,  545,  545,  527,  526,  540,  540,
      528,  546,  546,  525,  531,  542,  542,  543,  543,  534,
      539,  530,  537,  540,  529,  538,    0,  541,  536,  544,
      544,    0,  542,    0,  543,  547,  547,  548,  548,    0,
      549,  549,  550,  550,  551,  551,  544,  539,    0,  537,

      540,  548,  538,  549,  541,  552,  552,  555,  555,  542,
        0,  543,  553,  553,    0,  554,  554,  547,  556,  556,
      557,  557,    0,  544,  558,  558,  559,  559,  548,  550,
      549,    0,  552,  561,  561,  556,    0,  553,    0,  560,
      560,  559,  562,  562,  547,  554,  557,    0,  563,  563,
      564,  564,    0,  565,  565,    0,  550,  558,    0,  552,
      561,    0,  556,  560,  553,  563,  565,    0,  559,  566,
      566,    0,  554,  557,  562,  568,  568,  567,  567,  569,
      569,  570,  570,  564,  558,  572,  572,  561,  571,  571,
      560,    0,  563,  565,  567,  573,  573,  574,  574,  575,

      575,  562,  570,    0,  569,  576,  576,  577,  577,    0,
      564,    0,  572,  571,  578,  578,  575,  579,  579,  580,
      580,  567,    0,  573,    0,  581,  581,  574,  578,  570,
        0,  569,  582,  582,  583,  583,  584,  584,    0,  572,
      571,  579,  581,  575,    0,  580,    0,  585,  585,  582,
      573,  583,  588,  588,  574,  578,  586,  586,  587,  587,
      589,  589,    0,  590,  590,  591,  591,    0,  579,  581,
      592,  592,  580,  593,  593,  584,  582,    0,  583,  585,
      590,    0,  586,  592,  587,  594,  594,  595,  595,  596,
      596,  591,  597,  597,    0,  598,  598,    0,  594,  599,

      599,  600,  600,  593,  602,  602,  585,  590,  595,  586,
      592,  587,  603,  603,    0,  596,    0,  599,  591,  601,
      601,    0,  600,  597,    0,  594,  598,    0,  604,  604,
      593,    0,  601,  605,  605,  595,  606,  606,  603,    0,
      607,  607,  596,  604,  599,    0,  605,  610,  610,  600,
      597,  608,  608,  598,  609,  609,    0,  611,  611,  601,
      614,  614,    0,  606,    0,  603,  607,  608,  616,  616,
      604,  611,  609,  605,  615,  615,    0,  614,  610,  617,
      617,  621,  621,  618,  618,  616,  622,  622,  620,  620,
      606,  620,  620,  607,  608,  619,  619,    0,  611,  609,

      615,  618,  623,  623,  614,  610,    0,  621,  619,  617,
      626,  626,  616,  624,  624,  625,  625,  627,  627,  623,
      629,  629,  622,    0,  628,  628,    0,  615,  618,    0,
      624,  630,  630,    0,  621,  619,  617,  633,  633,  625,
      628,    0,  626,    0,  631,  631,  623,  629,    0,  622,
      632,  632,  634,  634,  635,  635,    0,  624,  636,  636,
      637,  637,    0,  630,  638,  638,  625,  628,  633,  626,
      631,  635,  639,  639,  629,    0,  636,  640,  640,  641,
      641,  637,    0,  632,  634,  642,  642,  643,  643,    0,
      630,  644,  644,  645,  645,  633,  639,  631,  635,  642,

      646,  646,    0,  636,    0,  643,  647,  647,  637,  641,
      632,  634,  644,  648,  648,  651,  651,  646,    0,  649,
      649,  650,  650,  639,  652,  652,  642,    0,  645,  653,
      653,    0,  643,  647,  654,  654,  641,  648,  650,  644,
      649,    0,  651,    0,  646,  655,  655,  657,  657,    0,
      652,  654,    0,  658,  658,  645,    0,  656,  656,  653,
      647,    0,  660,  660,  648,  650,  658,  649,    0,  651,
      655,  659,  659,  654,  656,  660,    0,  652,  654,  657,
      661,  661,  662,  662,  663,  663,  653,  659,    0,  664,
      664,  667,  667,  658,  665,  665,    0,  655,  663,  662,

        0,  656,  660,    0,  666,  666,  657,  668,  668,  665,
      669,  669,  661,  664,  659,    0,  670,  670,  671,  671,
      672,  672,  667,  674,  674,  663,  662,  666,    0,  673,
      673,  675,  675,    0,  671,    0,  665,  670,    0,  661,
      664,    0,  669,  676,  676,  677,  677,  675,    0,  667,
      678,  678,  672,  674,  666,  673,    0,  679,  679,    0,
      676,  671,  682,  682,  670,  683,  683,    0,  678,  669,
      684,  684,  677,    0,  675,  685,  685,    0,  683,  672,
      674,  679,  673,  686,  686,  687,  687,  676,  682,  688,
      688,    0,  688,  688,    0,  678,    0,  690,  690,  677,

      684,  691,  691,  689,  689,  683,  689,  689,  679,  687,
      690,    0,  692,  692,  686,  682,  693,  693,  694,  694,
      699,  699,  695,  695,    0,  696,  696,  684,  697,  697,
      698,  698,  700,  700,    0,  694,  687,  690,  692,  695,
        0,  686,  696,    0,  697,  700,  693,  698,  703,  703,
      701,  701,  699,    0,  702,  702,  705,  705,  704,  704,
      707,  707,  694,  708,  708,  692,  695,  701,    0,  696,
        0,  697,  700,  693,  698,  702,  704,  706,  706,  699,
      709,  709,    0,  705,  708,  710,  710,  711,  711,    0,
      706,  712,  712,    0,  701,  713,  713,    0,  709,  714,

      714,    0,  702,  704,  711,    0,  712,  715,  715,    0,
      705,  708,    0,  716,  716,    0,  710,  706,  717,  717,
      715,  719,  719,  713,    0,  709,  716,  718,  718,  720,
      720,  711,    0,  712,  723,  723,  719,    0,  716,  722,
      722,  726,  726,  710,  724,  724,    0,  715,  717,    0,
      713,  723,  722,  716,    0,  720,  721,  721,  726,  718,
      722,  729,  729,  719,    0,  716,  725,  725,    0,  721,
      721,  721,  728,  728,  724,  717,  727,  727,  723,  722,
      725,    0,  720,  731,  731,  726,  718,  722,    0,  728,
      727,  730,  730,  732,  732,    0,  721,  721,  721,  733,

      733,  724,  734,  734,  735,  735,    0,  725,  736,  736,
      737,  737,  738,  738,    0,  730,  728,  727,  739,  739,
        0,  735,  740,  740,  741,  741,    0,  737,  742,  742,
      743,  743,  736,    0,  744,  744,  745,  745,    0,  738,
      751,  751,  730,  748,  748,    0,  750,  750,  735,  739,
      749,  749,    0,  745,  737,    0,  748,  751,  742,  736,
      743,  744,  752,  752,  749,    0,  738,  750,  753,  753,
        0,  755,  755,  754,  754,    0,  739,  756,  756,  752,
      745,    0,  753,  748,  751,  742,  754,  743,  744,  758,
      758,  749,  755,    0,  750,  757,  757,  759,  759,  760,

      760,  761,  761,    0,  762,  762,  752,  763,  763,  753,
      764,  764,    0,  754,  759,  765,  765,  766,  766,  755,
      767,  767,  768,  768,    0,  757,  769,  769,    0,  770,
      770,  771,  771,  781,  781,  760,  762,  764,    0,  768,
        0,  759,    0,  766,    0,  772,  772,  773,  773,    0,
      767,    0,  757,    0,  774,  774,  775,  775,    0,  769,
      770,  771,  760,  762,  764,    0,  768,  776,  776,    0,
      766,  777,  777,  778,  778,  779,  779,  767,  772,    0,
      776,    0,  775,    0,  773,  774,  769,  770,  771,    0,
      780,  780,  782,  782,  783,  783,  777,  784,  784,  785,

      785,    0,  779,  780,  778,  772,    0,  776,    0,  775,
        0,  773,  774,  786,  786,  787,  787,  788,  788,  789,
      789,  790,  790,  777,    0,  785,  791,  791,  787,  779,
      780,  778,    0,  784,  792,  792,  793,  793,    0,  786,
        0,  788,  794,  794,    0,  790,    0,  789,  795,  795,
        0,  792,  785,  797,  797,  787,  791,  796,  796,    0,
      784,  793,  798,  798,  799,  799,  786,    0,  788,  800,
      800,  797,  790,    0,  789,  801,  801,  798,  792,  804,
      804,  805,  805,  791,  795,  807,  807,  796,  793,  799,
      806,  806,    0,  804,  808,  808,  810,  810,  797,  800,

      809,  809,    0,  806,  798,  805,  811,  811,  812,  812,
      810,  795,  813,  813,  796,    0,  799,  807,    0,  811,
      804,  814,  814,    0,  809,    0,  800,  815,  815,  812,
      806,    0,  805,  816,  816,  814,    0,  810,  817,  817,
      818,  818,  819,  819,  807,    0,  811,    0,  815,  820,
      820,  809,  821,  821,  822,  822,  812,  823,  823,  816,
      824,  824,  814,  825,  825,  826,  826,    0,  819,    0,
      827,  827,    0,  821,    0,  815,  828,  828,  829,  829,
      820,  823,    0,  830,  830,    0,  816,  832,  832,  828,
      831,  831,  833,  833,    0,  819,    0,  826,  834,  834,

      821,  827,  836,  836,  831,  837,  837,  820,  823,  830,
        0,  834,    0,  835,  835,    0,  828,  838,  838,  836,
      839,  839,  840,  840,  826,  842,  842,    0,  827,  841,
      841,  831,  843,  843,  838,    0,  830,  837,  834,  835,
        0,  839,  841,  844,  844,    0,  836,  845,  845,  846,
      846,  847,  847,  850,  850,  851,  851,  852,  852,  853,
      853,  838,  854,  854,  837,    0,  835,    0,  839,  841,
      844,    0,  851,    0,  845,    0,  847,  850,    0,  854,
        0,  852,    0,  855,  855,  856,  856,  857,  857,  858,
      858,  859,  859,  860,  860,  862,  862,  844,    0,  851,

      857,  845,    0,  847,  850,    0,  854,  855,  852,  856,
      861,  861,  862,  858,  863,  863,  864,  864,  859,    0,
      865,  865,    0,  866,  866,  867,  867,  857,    0,  864,
      868,  868,  871,  871,  855,    0,  856,  870,  870,  862,
      858,  865,  861,  869,  869,  859,  866,    0,  863,  867,
        0,  870,  872,  872,  873,  873,  864,  874,  874,  875,
      875,  868,    0,  871,  876,  876,    0,  869,  865,  861,
      877,  877,  875,  866,  873,  863,  867,    0,  870,  878,
      878,  879,  879,  883,  883,  882,  882,    0,  868,    0,
      871,    0,  884,  884,  869,  876,  885,  885,    0,  875,

      877,  873,  882,  886,  886,  878,  887,  887,    0,  888,
      888,  889,  889,  890,  890,  891,  891,  892,  892,    0,
      886,    0,  876,  884,  893,  893,    0,  877,  889,  882,
      895,  895,  878,  888,    0,  894,  894,  887,    0,  890,
        0,  893,    0,  895,  896,  896,    0,  886,  897,  897,
      884,  898,  898,  900,  900,  889,  899,  899,  901,  901,
      888,  902,  902,    0,  887,  894,  890,    0,  893,    0,
      895,  903,  903,  899,    0,  902,  901,  900,    0,  897,
      905,  905,    0,  898,  904,  904,  906,  906,  909,  909,
      910,  910,  894,  911,  911,  903,  912,  912,  913,  913,

      899,    0,  902,  901,  900,  905,  897,  904,  914,  914,
      898,  914,  914,  914,    0,  909,    0,  906,  915,  915,
      911,    0,  903,    0,  913,  916,  916,  912,  917,  917,
      918,  918,  905,    0,  904,  919,  919,  920,  920,  921,
      921,    0,  909,    0,  906,  922,  922,  911,  919,  923,
      923,  913,  917,    0,  912,    0,  921,  924,  924,  925,
      925,    0,  926,  926,  927,  927,    0,  929,  929,    0,
      923,    0,  922,  930,  930,  919,  931,  931,    0,  917,
      926,  933,  933,  921,    0,  932,  932,    0,  924,    0,
      934,  934,  935,  935,  936,  936,  927,  923,    0,  922,

      929,  932,  933,  931,  937,  937,  930,  926,  938,  938,
      939,  939,  940,  940,    0,  924,  934,  937,  941,  941,
      942,  942,    0,  927,  936,  940,    0,  929,  932,  933,
      931,  943,  943,  930,  939,  938,  944,  944,  946,  946,
        0,  945,  945,  934,  937,    0,  947,  947,  941,    0,
      942,  936,  940,  944,  945,  948,  948,  949,  949,  950,
      950,  939,  938,    0,  943,    0,  951,  951,  952,  952,
      946,  947,  950,  953,  953,  941,    0,  942,  954,  954,
      944,  945,    0,  952,  958,  958,  948,    0,  953,    0,
      949,  943,  951,    0,  955,  955,    0,  946,  947,  950,

      956,  956,  959,  959,  960,  960,  961,  961,  954,    0,
      952,  962,  962,  948,    0,  953,    0,  949,    0,  951,
      955,  967,  967,  963,  963,  961,    0,  964,  964,  966,
      966,  956,  968,  968,  960,  954,  965,  965,  969,  969,
      963,    0,  966,  962,  964,  970,  970,  955,  971,  971,
        0,  965,  961,  972,  972,  973,  973,    0,  956,  957,
      957,  960,    0,  957,  957,  957,  957,  963,  972,  966,
      962,  964,    0,  957,  975,  975,    0,  957,  965,    0,
      957,  976,  976,  978,  978,    0,  973,  980,  980,  977,
      977,    0,  979,  979,    0,  972,    0,  978,  981,  981,

      957,  982,  982,    0,  957,    0,  977,  957,    0,  979,
      983,  983,    0,  973,  974,  974,  984,  984,  974,  974,
      974,  974,  985,  985,  978,  986,  986,    0,  974,    0,
      987,  987,  974,  977,    0,  974,  979,  988,  988,    0,
        0,    0,    0,    0,    0,    0,  985,  987,    0,    0,
        0,    0,    0,    0,    0,  974,    0,    0,    0,  974,
        0,    0,  974,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  985,  987,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  991,  991,    0,    0,  991,  992,
      992,  992,  992,  992,  992,  992,  993,  993,  993,  993,

      993,  994,    0,  994,  994,  994,  994,  994,  994,  994,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  996,
        0,  996,  996,  996,  996,  996,  996,  996,  997,    0,
      997,  998,  998,  998,  999,  999,  999,  999,  999,  999,
      999,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989
    } ;

static const flex_int16_t yy_rule_linenum[23] =
    {   0,
       91,   96,  103,  106,  113,  114,  115,  116,  117,  118,
      119,  120,  122,  127,  128,  130,  135,  141,  147,  154,
      156,  157
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
/* $Id$ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"

#include <string>
#include <sstream>
#include "scanner.h"


/* HLSL Code Block */

std::stringstream code_block;

/* import the parser's token type into a local typedef */
typedef example::Parser::token token;
typedef example::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 1845 "scanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1859 "scanner.cc"
/* Effect States (Direct3D 9) Token*/
#line 1861 "scanner.cc"

#define INITIAL 0
#define PARSE_STATE_HLSLCODEBLOCK 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 80 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


#line 83 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
 /* code to place at the beginning of yylex() */

    BEGIN(INITIAL);
    // reset location
    yylloc->step();



#line 2066 "scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 990 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 989 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 23 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 23 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 24 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        BEGIN PARSE_STATE_HLSLCODEBLOCK;
        code_block.clear();
        code_block.str("");
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 96 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(code_block.str());
    code_block.clear();
    code_block.str("");
    //BEGIN(INITIAL);
    return token::HLSL_CODE_BLOCK;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 103 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<yytext;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 106 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    code_block<<std::endl;
    yylloc->lines(yyleng);yylloc->step();
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 113 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{ /* skip comments */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 115 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::TECHNIQUE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 116 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::PASS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 117 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::COMPILE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 118 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT2;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 119 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT3;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return token::FLOAT4;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
        yylval->stringVal = new std::string(yytext, yyleng);
        return token::STATE_NAME;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = true;return token::BOOLEAN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylval->boolVal = false;return token::BOOLEAN;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->floatVal = atof(yytext);
    return token::FLOAT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 141 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::IDENTIFIER;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 147 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 154 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->step();}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{yylloc->lines(yyleng); yylloc->step();}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 157 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
{return static_cast<token_type>(*yytext);}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 23:
YY_RULE_SETUP
#line 162 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"
ECHO;
	YY_BREAK
#line 2290 "scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSE_STATE_HLSLCODEBLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Examplefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Examplefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Examplerealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Examplerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 990 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 990 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 989);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Examplealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Examplealloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Examplefree((void *) b->yy_ch_buf  );

	Examplefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Examplerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Examplealloc(new_size  );

		else
			(yy_start_stack) = (int *) Examplerealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Examplealloc (yy_size_t  size )
{
			return malloc(size);
}

void *Examplerealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Examplefree (void * ptr )
{
			free( (char *) ptr );	/* see Examplerealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 162 "E:/Source/GitRepos/dxEffectsParser/src/scanner.l"


namespace example {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : ExampleFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int ExampleFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int ExampleFlexLexer::yywrap()
{
    return 1;
}

